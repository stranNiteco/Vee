//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/work/Vee/Parser/Grammar\Vee.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Vee.Parser.Grammar {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class VeeParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LBracket=1, RBracket=2, LBrace=3, RBrace=4, LParen=5, RParen=6, Comma=7, 
		Colon=8, Range=9, Arrow=10, Lambda=11, Pow=12, Multiply=13, Divide=14, 
		Modulo=15, Plus=16, Minus=17, Eq=18, Neq=19, Lt=20, Gt=21, Lte=22, Gte=23, 
		Pipe=24, RPipe=25, Dot=26, Concat=27, ComposeRight=28, ComposeLeft=29, 
		ComposeAnd=30, ComposeOr=31, Inverse=32, AndAlso=33, OrElse=34, Not=35, 
		TypeOf=36, Let=37, In=38, If=39, Is=40, When=41, Then=42, Else=43, True=44, 
		False=45, New=46, As=47, Type=48, StringType=49, NumberType=50, BooleanType=51, 
		EnumType=52, TupleType=53, RecordType=54, FunctionType=55, ListType=56, 
		MapType=57, TaskType=58, OptionType=59, UnitType=60, SomeCase=61, NoneCase=62, 
		ResultCase=63, ErrorCase=64, Number=65, Name=66, Wildcard=67, String=68, 
		WS=69;
	public const int
		RULE_root = 0, RULE_type = 1, RULE_typeAnnotation = 2, RULE_typeName = 3, 
		RULE_expression = 4, RULE_constant = 5, RULE_range = 6, RULE_recordPair = 7, 
		RULE_mapItems = 8, RULE_mapPair = 9, RULE_listItems = 10, RULE_member = 11, 
		RULE_argument = 12, RULE_declarations = 13, RULE_declaration = 14, RULE_extraction = 15, 
		RULE_alias = 16, RULE_condition = 17, RULE_match = 18, RULE_pattern = 19, 
		RULE_capture = 20, RULE_keyPattern = 21, RULE_fieldPattern = 22, RULE_rest = 23, 
		RULE_lambdaParams = 24, RULE_lambdaBody = 25, RULE_operators = 26, RULE_binaryOperators = 27, 
		RULE_unaryOperators = 28;
	public static readonly string[] ruleNames = {
		"root", "type", "typeAnnotation", "typeName", "expression", "constant", 
		"range", "recordPair", "mapItems", "mapPair", "listItems", "member", "argument", 
		"declarations", "declaration", "extraction", "alias", "condition", "match", 
		"pattern", "capture", "keyPattern", "fieldPattern", "rest", "lambdaParams", 
		"lambdaBody", "operators", "binaryOperators", "unaryOperators"
	};

	private static readonly string[] _LiteralNames = {
		null, "'['", "']'", "'{'", "'}'", "'('", "')'", "','", "':'", "'..'", 
		"'->'", "'\\'", "'^'", "'*'", "'/'", "'%'", "'+'", "'-'", "'='", "'!='", 
		"'<'", "'>'", "'<='", "'>='", "'|'", "'|>'", "'.'", "'::'", "'>>'", "'<<'", 
		"'&&'", "'||'", "'!'", "'and'", "'or'", "'not'", "'typeof'", "'let'", 
		"'in'", "'if'", "'is'", "'when'", "'then'", "'else'", "'true'", "'false'", 
		"'new'", "'as'", "'type'", "'string'", "'number'", "'boolean'", "'enum'", 
		"'tuple'", "'record'", "'function'", "'list'", "'map'", "'task'", "'option'", 
		"'unit'", "'some'", "'none'", "'result'", "'error'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LBracket", "RBracket", "LBrace", "RBrace", "LParen", "RParen", 
		"Comma", "Colon", "Range", "Arrow", "Lambda", "Pow", "Multiply", "Divide", 
		"Modulo", "Plus", "Minus", "Eq", "Neq", "Lt", "Gt", "Lte", "Gte", "Pipe", 
		"RPipe", "Dot", "Concat", "ComposeRight", "ComposeLeft", "ComposeAnd", 
		"ComposeOr", "Inverse", "AndAlso", "OrElse", "Not", "TypeOf", "Let", "In", 
		"If", "Is", "When", "Then", "Else", "True", "False", "New", "As", "Type", 
		"StringType", "NumberType", "BooleanType", "EnumType", "TupleType", "RecordType", 
		"FunctionType", "ListType", "MapType", "TaskType", "OptionType", "UnitType", 
		"SomeCase", "NoneCase", "ResultCase", "ErrorCase", "Number", "Name", "Wildcard", 
		"String", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Vee.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static VeeParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public VeeParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public VeeParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class RootContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(VeeParser.Eof, 0); }
		public DeclarationsContext declarations() {
			return GetRuleContext<DeclarationsContext>(0);
		}
		public ITerminalNode In() { return GetToken(VeeParser.In, 0); }
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Let) {
				{
				State = 58; declarations();
				State = 59; Match(In);
				}
			}

			State = 63; expression(0);
			State = 64; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NamedTypeContext : TypeContext {
		public ITerminalNode Name() { return GetToken(VeeParser.Name, 0); }
		public NamedTypeContext(TypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamedType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AliasTypeContext : TypeContext {
		public ITerminalNode Name() { return GetToken(VeeParser.Name, 0); }
		public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		public AliasTypeContext(TypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAliasType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionTypeContext : TypeContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode Arrow() { return GetToken(VeeParser.Arrow, 0); }
		public FunctionTypeContext(TypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParameterizedTypeContext : TypeContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode LParen() { return GetToken(VeeParser.LParen, 0); }
		public ITerminalNode RParen() { return GetToken(VeeParser.RParen, 0); }
		public ParameterizedTypeContext(TypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterizedType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BuiltinTypeContext : TypeContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public BuiltinTypeContext(TypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuiltinType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ProductTypeContext : TypeContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode Comma() { return GetToken(VeeParser.Comma, 0); }
		public ProductTypeContext(TypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProductType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SumTypeContext : TypeContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode Pipe() { return GetToken(VeeParser.Pipe, 0); }
		public SumTypeContext(TypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OpenTypeContext : TypeContext {
		public ITerminalNode Wildcard() { return GetToken(VeeParser.Wildcard, 0); }
		public OpenTypeContext(TypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		return type(0);
	}

	private TypeContext type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeContext _localctx = new TypeContext(Context, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_type, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				_localctx = new BuiltinTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 67; typeName();
				}
				break;
			case 2:
				{
				_localctx = new NamedTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 68; Match(Name);
				}
				break;
			case 3:
				{
				_localctx = new OpenTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 69; Match(Wildcard);
				}
				break;
			case 4:
				{
				_localctx = new AliasTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 70; Match(Name);
				State = 71; typeAnnotation();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 90;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 88;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						_localctx = new FunctionTypeContext(new TypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 74;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 75; Match(Arrow);
						State = 76; type(4);
						}
						break;
					case 2:
						{
						_localctx = new ProductTypeContext(new TypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 77;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 78; Match(Comma);
						State = 79; type(3);
						}
						break;
					case 3:
						{
						_localctx = new SumTypeContext(new TypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 80;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 81; Match(Pipe);
						State = 82; type(2);
						}
						break;
					case 4:
						{
						_localctx = new ParameterizedTypeContext(new TypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 83;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 84; Match(LParen);
						State = 85; type(0);
						State = 86; Match(RParen);
						}
						break;
					}
					} 
				}
				State = 92;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeAnnotationContext : ParserRuleContext {
		public ITerminalNode Colon() { return GetToken(VeeParser.Colon, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeAnnotation; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeAnnotationContext typeAnnotation() {
		TypeAnnotationContext _localctx = new TypeAnnotationContext(Context, State);
		EnterRule(_localctx, 4, RULE_typeAnnotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; Match(Colon);
			State = 94; type(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public ITerminalNode StringType() { return GetToken(VeeParser.StringType, 0); }
		public ITerminalNode NumberType() { return GetToken(VeeParser.NumberType, 0); }
		public ITerminalNode BooleanType() { return GetToken(VeeParser.BooleanType, 0); }
		public ITerminalNode ListType() { return GetToken(VeeParser.ListType, 0); }
		public ITerminalNode MapType() { return GetToken(VeeParser.MapType, 0); }
		public ITerminalNode TupleType() { return GetToken(VeeParser.TupleType, 0); }
		public ITerminalNode RecordType() { return GetToken(VeeParser.RecordType, 0); }
		public ITerminalNode EnumType() { return GetToken(VeeParser.EnumType, 0); }
		public ITerminalNode TaskType() { return GetToken(VeeParser.TaskType, 0); }
		public ITerminalNode OptionType() { return GetToken(VeeParser.OptionType, 0); }
		public ITerminalNode UnitType() { return GetToken(VeeParser.UnitType, 0); }
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 6, RULE_typeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringType) | (1L << NumberType) | (1L << BooleanType) | (1L << EnumType) | (1L << TupleType) | (1L << RecordType) | (1L << ListType) | (1L << MapType) | (1L << TaskType) | (1L << OptionType) | (1L << UnitType))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PatternMathchingContext : ExpressionContext {
		public ITerminalNode If() { return GetToken(VeeParser.If, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Is() { return GetToken(VeeParser.Is, 0); }
		public MatchContext[] match() {
			return GetRuleContexts<MatchContext>();
		}
		public MatchContext match(int i) {
			return GetRuleContext<MatchContext>(i);
		}
		public ITerminalNode[] Pipe() { return GetTokens(VeeParser.Pipe); }
		public ITerminalNode Pipe(int i) {
			return GetToken(VeeParser.Pipe, i);
		}
		public ITerminalNode Else() { return GetToken(VeeParser.Else, 0); }
		public PatternMathchingContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPatternMathching(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegationContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Minus() { return GetToken(VeeParser.Minus, 0); }
		public NegationContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AccessContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Dot() { return GetToken(VeeParser.Dot, 0); }
		public MemberContext member() {
			return GetRuleContext<MemberContext>(0);
		}
		public AccessContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConditionalContext : ExpressionContext {
		public ExpressionContext @else;
		public ITerminalNode If() { return GetToken(VeeParser.If, 0); }
		public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		public ITerminalNode Else() { return GetToken(VeeParser.Else, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode[] Pipe() { return GetTokens(VeeParser.Pipe); }
		public ITerminalNode Pipe(int i) {
			return GetToken(VeeParser.Pipe, i);
		}
		public ConditionalContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Multiply() { return GetToken(VeeParser.Multiply, 0); }
		public ITerminalNode Divide() { return GetToken(VeeParser.Divide, 0); }
		public ITerminalNode Modulo() { return GetToken(VeeParser.Modulo, 0); }
		public MultiplicativeContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicative(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TupleContext : ExpressionContext {
		public ITerminalNode LParen() { return GetToken(VeeParser.LParen, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RParen() { return GetToken(VeeParser.RParen, 0); }
		public ITerminalNode[] Comma() { return GetTokens(VeeParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(VeeParser.Comma, i);
		}
		public TupleContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaContext : ExpressionContext {
		public LambdaParamsContext @params;
		public LambdaBodyContext body;
		public ITerminalNode Lambda() { return GetToken(VeeParser.Lambda, 0); }
		public ITerminalNode Arrow() { return GetToken(VeeParser.Arrow, 0); }
		public LambdaParamsContext lambdaParams() {
			return GetRuleContext<LambdaParamsContext>(0);
		}
		public LambdaBodyContext lambdaBody() {
			return GetRuleContext<LambdaBodyContext>(0);
		}
		public LambdaContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCompositionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ComposeLeft() { return GetToken(VeeParser.ComposeLeft, 0); }
		public ITerminalNode ComposeRight() { return GetToken(VeeParser.ComposeRight, 0); }
		public FunctionCompositionContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionComposition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RecordContext : ExpressionContext {
		public ITerminalNode LBrace() { return GetToken(VeeParser.LBrace, 0); }
		public RecordPairContext[] recordPair() {
			return GetRuleContexts<RecordPairContext>();
		}
		public RecordPairContext recordPair(int i) {
			return GetRuleContext<RecordPairContext>(i);
		}
		public ITerminalNode RBrace() { return GetToken(VeeParser.RBrace, 0); }
		public ITerminalNode[] Comma() { return GetTokens(VeeParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(VeeParser.Comma, i);
		}
		public RecordContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecord(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PredicateCompositionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ComposeAnd() { return GetToken(VeeParser.ComposeAnd, 0); }
		public ITerminalNode ComposeOr() { return GetToken(VeeParser.ComposeOr, 0); }
		public PredicateCompositionContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateComposition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PipeContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RPipe() { return GetToken(VeeParser.RPipe, 0); }
		public PipeContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPipe(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueContext : ExpressionContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ValueContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MapContext : ExpressionContext {
		public ITerminalNode LBrace() { return GetToken(VeeParser.LBrace, 0); }
		public ITerminalNode RBrace() { return GetToken(VeeParser.RBrace, 0); }
		public MapItemsContext mapItems() {
			return GetRuleContext<MapItemsContext>(0);
		}
		public MapContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMap(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PredicateInversionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Inverse() { return GetToken(VeeParser.Inverse, 0); }
		public PredicateInversionContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateInversion(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Eq() { return GetToken(VeeParser.Eq, 0); }
		public ITerminalNode Neq() { return GetToken(VeeParser.Neq, 0); }
		public EqualityContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalNotContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Not() { return GetToken(VeeParser.Not, 0); }
		public LogicalNotContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListContext : ExpressionContext {
		public ITerminalNode LBracket() { return GetToken(VeeParser.LBracket, 0); }
		public ITerminalNode RBracket() { return GetToken(VeeParser.RBracket, 0); }
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public ListItemsContext listItems() {
			return GetRuleContext<ListItemsContext>(0);
		}
		public ListContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisionContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Lt() { return GetToken(VeeParser.Lt, 0); }
		public ITerminalNode Lte() { return GetToken(VeeParser.Lte, 0); }
		public ITerminalNode Gt() { return GetToken(VeeParser.Gt, 0); }
		public ITerminalNode Gte() { return GetToken(VeeParser.Gte, 0); }
		public ComparisionContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparision(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GroupingContext : ExpressionContext {
		public ITerminalNode LParen() { return GetToken(VeeParser.LParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RParen() { return GetToken(VeeParser.RParen, 0); }
		public GroupingContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrouping(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode AndAlso() { return GetToken(VeeParser.AndAlso, 0); }
		public ITerminalNode OrElse() { return GetToken(VeeParser.OrElse, 0); }
		public LogicalContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OperatorLambdaContext : ExpressionContext {
		public ITerminalNode[] Pipe() { return GetTokens(VeeParser.Pipe); }
		public ITerminalNode Pipe(int i) {
			return GetToken(VeeParser.Pipe, i);
		}
		public OperatorsContext operators() {
			return GetRuleContext<OperatorsContext>(0);
		}
		public OperatorLambdaContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperatorLambda(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Plus() { return GetToken(VeeParser.Plus, 0); }
		public ITerminalNode Minus() { return GetToken(VeeParser.Minus, 0); }
		public AdditiveContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditive(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExponentiationContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Pow() { return GetToken(VeeParser.Pow, 0); }
		public ExponentiationContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExponentiation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InvocationContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LParen() { return GetToken(VeeParser.LParen, 0); }
		public ITerminalNode RParen() { return GetToken(VeeParser.RParen, 0); }
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(VeeParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(VeeParser.Comma, i);
		}
		public InvocationContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConcatenationContext : ExpressionContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Concat() { return GetToken(VeeParser.Concat, 0); }
		public ConcatenationContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatenation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableContext : ExpressionContext {
		public ITerminalNode Name() { return GetToken(VeeParser.Name, 0); }
		public VariableContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				_localctx = new ValueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 99; constant();
				}
				break;
			case 2:
				{
				_localctx = new VariableContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 100; Match(Name);
				}
				break;
			case 3:
				{
				_localctx = new TupleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 101; Match(LParen);
				State = 102; expression(0);
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 103; Match(Comma);
					State = 104; expression(0);
					}
					}
					State = 107;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Comma );
				State = 109; Match(RParen);
				}
				break;
			case 4:
				{
				_localctx = new RecordContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 111; Match(LBrace);
				State = 112; recordPair();
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 113; Match(Comma);
					State = 114; recordPair();
					}
					}
					State = 119;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 120; Match(RBrace);
				}
				break;
			case 5:
				{
				_localctx = new MapContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 122; Match(LBrace);
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LBracket) {
					{
					State = 123; mapItems();
					}
				}

				State = 126; Match(RBrace);
				}
				break;
			case 6:
				{
				_localctx = new ListContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 127; Match(LBracket);
				State = 130;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 128; range();
					}
					break;
				case 2:
					{
					State = 129; listItems();
					}
					break;
				}
				State = 132; Match(RBracket);
				}
				break;
			case 7:
				{
				_localctx = new GroupingContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 133; Match(LParen);
				State = 134; expression(0);
				State = 135; Match(RParen);
				}
				break;
			case 8:
				{
				_localctx = new LogicalNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 137; ((LogicalNotContext)_localctx).op = Match(Not);
				State = 138; expression(17);
				}
				break;
			case 9:
				{
				_localctx = new PredicateInversionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 139; ((PredicateInversionContext)_localctx).op = Match(Inverse);
				State = 140; expression(16);
				}
				break;
			case 10:
				{
				_localctx = new NegationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 141; ((NegationContext)_localctx).op = Match(Minus);
				State = 142; expression(15);
				}
				break;
			case 11:
				{
				_localctx = new OperatorLambdaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 143; Match(Pipe);
				State = 144; operators();
				State = 145; Match(Pipe);
				}
				break;
			case 12:
				{
				_localctx = new LambdaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 147; Match(Lambda);
				State = 148; ((LambdaContext)_localctx).@params = lambdaParams();
				State = 149; Match(Arrow);
				State = 150; ((LambdaContext)_localctx).body = lambdaBody();
				}
				break;
			case 13:
				{
				_localctx = new ConditionalContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 152; Match(If);
				State = 153; condition();
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Pipe) {
					{
					{
					State = 154; Match(Pipe);
					State = 155; condition();
					}
					}
					State = 160;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 161; Match(Else);
				State = 162; ((ConditionalContext)_localctx).@else = expression(2);
				}
				break;
			case 14:
				{
				_localctx = new PatternMathchingContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 164; Match(If);
				State = 165; expression(0);
				State = 166; Match(Is);
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Pipe) {
					{
					State = 167; Match(Pipe);
					}
				}

				State = 170; match();
				State = 175;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 171; Match(Pipe);
						State = 172; match();
						}
						} 
					}
					State = 177;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				}
				State = 180;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 178; Match(Else);
					State = 179; expression(0);
					}
					break;
				}
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 232;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 230;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
					case 1:
						{
						_localctx = new ExponentiationContext(new ExpressionContext(_parentctx, _parentState));
						((ExponentiationContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 184;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 185; ((ExponentiationContext)_localctx).op = Match(Pow);
						State = 186; ((ExponentiationContext)_localctx).right = expression(15);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeContext(new ExpressionContext(_parentctx, _parentState));
						((MultiplicativeContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 187;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 188;
						((MultiplicativeContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Multiply) | (1L << Divide) | (1L << Modulo))) != 0)) ) {
							((MultiplicativeContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 189; ((MultiplicativeContext)_localctx).right = expression(14);
						}
						break;
					case 3:
						{
						_localctx = new AdditiveContext(new ExpressionContext(_parentctx, _parentState));
						((AdditiveContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 190;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 191;
						((AdditiveContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
							((AdditiveContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 192; ((AdditiveContext)_localctx).right = expression(13);
						}
						break;
					case 4:
						{
						_localctx = new EqualityContext(new ExpressionContext(_parentctx, _parentState));
						((EqualityContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 193;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 194;
						((EqualityContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Eq || _la==Neq) ) {
							((EqualityContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 195; ((EqualityContext)_localctx).right = expression(12);
						}
						break;
					case 5:
						{
						_localctx = new ComparisionContext(new ExpressionContext(_parentctx, _parentState));
						((ComparisionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 196;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 197;
						((ComparisionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Lt) | (1L << Gt) | (1L << Lte) | (1L << Gte))) != 0)) ) {
							((ComparisionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 198; ((ComparisionContext)_localctx).right = expression(11);
						}
						break;
					case 6:
						{
						_localctx = new LogicalContext(new ExpressionContext(_parentctx, _parentState));
						((LogicalContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 199;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 200;
						((LogicalContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==AndAlso || _la==OrElse) ) {
							((LogicalContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 201; ((LogicalContext)_localctx).right = expression(10);
						}
						break;
					case 7:
						{
						_localctx = new ConcatenationContext(new ExpressionContext(_parentctx, _parentState));
						((ConcatenationContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 202;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 203; ((ConcatenationContext)_localctx).op = Match(Concat);
						State = 204; ((ConcatenationContext)_localctx).right = expression(9);
						}
						break;
					case 8:
						{
						_localctx = new PredicateCompositionContext(new ExpressionContext(_parentctx, _parentState));
						((PredicateCompositionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 205;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 206;
						((PredicateCompositionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ComposeAnd || _la==ComposeOr) ) {
							((PredicateCompositionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 207; ((PredicateCompositionContext)_localctx).right = expression(8);
						}
						break;
					case 9:
						{
						_localctx = new FunctionCompositionContext(new ExpressionContext(_parentctx, _parentState));
						((FunctionCompositionContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 208;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 209;
						((FunctionCompositionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ComposeRight || _la==ComposeLeft) ) {
							((FunctionCompositionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 210; ((FunctionCompositionContext)_localctx).right = expression(7);
						}
						break;
					case 10:
						{
						_localctx = new PipeContext(new ExpressionContext(_parentctx, _parentState));
						((PipeContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 211;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 212; ((PipeContext)_localctx).op = Match(RPipe);
						State = 213; ((PipeContext)_localctx).right = expression(6);
						}
						break;
					case 11:
						{
						_localctx = new AccessContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 214;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 215; Match(Dot);
						State = 216; member();
						}
						break;
					case 12:
						{
						_localctx = new InvocationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 217;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 218; Match(LParen);
						State = 220;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBracket) | (1L << LBrace) | (1L << LParen) | (1L << Lambda) | (1L << Minus) | (1L << Pipe) | (1L << Inverse) | (1L << Not) | (1L << If) | (1L << True) | (1L << False))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (Number - 65)) | (1L << (Name - 65)) | (1L << (Wildcard - 65)) | (1L << (String - 65)))) != 0)) {
							{
							State = 219; argument();
							}
						}

						State = 226;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==Comma) {
							{
							{
							State = 222; Match(Comma);
							State = 223; argument();
							}
							}
							State = 228;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 229; Match(RParen);
						}
						break;
					}
					} 
				}
				State = 234;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode True() { return GetToken(VeeParser.True, 0); }
		public ITerminalNode False() { return GetToken(VeeParser.False, 0); }
		public ITerminalNode Number() { return GetToken(VeeParser.Number, 0); }
		public ITerminalNode String() { return GetToken(VeeParser.String, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 10, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 44)) & ~0x3f) == 0 && ((1L << (_la - 44)) & ((1L << (True - 44)) | (1L << (False - 44)) | (1L << (Number - 44)) | (1L << (String - 44)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public IToken from;
		public IToken incr;
		public IToken to;
		public ITerminalNode[] Range() { return GetTokens(VeeParser.Range); }
		public ITerminalNode Range(int i) {
			return GetToken(VeeParser.Range, i);
		}
		public ITerminalNode[] Number() { return GetTokens(VeeParser.Number); }
		public ITerminalNode Number(int i) {
			return GetToken(VeeParser.Number, i);
		}
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 12, RULE_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237; _localctx.from = Match(Number);
			State = 238; Match(Range);
			State = 241;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 239; _localctx.incr = Match(Number);
				State = 240; Match(Range);
				}
				break;
			}
			State = 243; _localctx.to = Match(Number);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordPairContext : ParserRuleContext {
		public IToken field;
		public ExpressionContext value;
		public ITerminalNode Colon() { return GetToken(VeeParser.Colon, 0); }
		public ITerminalNode Name() { return GetToken(VeeParser.Name, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RecordPairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordPair; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordPairContext recordPair() {
		RecordPairContext _localctx = new RecordPairContext(Context, State);
		EnterRule(_localctx, 14, RULE_recordPair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245; _localctx.field = Match(Name);
			State = 246; Match(Colon);
			State = 247; _localctx.value = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapItemsContext : ParserRuleContext {
		public MapPairContext[] mapPair() {
			return GetRuleContexts<MapPairContext>();
		}
		public MapPairContext mapPair(int i) {
			return GetRuleContext<MapPairContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(VeeParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(VeeParser.Comma, i);
		}
		public MapItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapItems; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapItems(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapItemsContext mapItems() {
		MapItemsContext _localctx = new MapItemsContext(Context, State);
		EnterRule(_localctx, 16, RULE_mapItems);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; mapPair();
			State = 254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 250; Match(Comma);
				State = 251; mapPair();
				}
				}
				State = 256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapPairContext : ParserRuleContext {
		public ExpressionContext key;
		public ExpressionContext value;
		public ITerminalNode LBracket() { return GetToken(VeeParser.LBracket, 0); }
		public ITerminalNode RBracket() { return GetToken(VeeParser.RBracket, 0); }
		public ITerminalNode Colon() { return GetToken(VeeParser.Colon, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MapPairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapPair; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapPairContext mapPair() {
		MapPairContext _localctx = new MapPairContext(Context, State);
		EnterRule(_localctx, 18, RULE_mapPair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; Match(LBracket);
			State = 258; _localctx.key = expression(0);
			State = 259; Match(RBracket);
			State = 260; Match(Colon);
			State = 261; _localctx.value = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListItemsContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(VeeParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(VeeParser.Comma, i);
		}
		public ListItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listItems; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListItems(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListItemsContext listItems() {
		ListItemsContext _localctx = new ListItemsContext(Context, State);
		EnterRule(_localctx, 20, RULE_listItems);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263; expression(0);
			State = 268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 264; Match(Comma);
				State = 265; expression(0);
				}
				}
				State = 270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberContext : ParserRuleContext {
		public MemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member; } }
	 
		public MemberContext() { }
		public virtual void CopyFrom(MemberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FieldMemberContext : MemberContext {
		public ITerminalNode Name() { return GetToken(VeeParser.Name, 0); }
		public FieldMemberContext(MemberContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldMember(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexMemberContext : MemberContext {
		public ITerminalNode LBracket() { return GetToken(VeeParser.LBracket, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RBracket() { return GetToken(VeeParser.RBracket, 0); }
		public IndexMemberContext(MemberContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberContext member() {
		MemberContext _localctx = new MemberContext(Context, State);
		EnterRule(_localctx, 22, RULE_member);
		try {
			State = 276;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBracket:
				_localctx = new IndexMemberContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 271; Match(LBracket);
				State = 272; expression(0);
				State = 273; Match(RBracket);
				}
				break;
			case Name:
				_localctx = new FieldMemberContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 275; Match(Name);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Name() { return GetToken(VeeParser.Name, 0); }
		public ITerminalNode Colon() { return GetToken(VeeParser.Colon, 0); }
		public ITerminalNode Wildcard() { return GetToken(VeeParser.Wildcard, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 24, RULE_argument);
		try {
			State = 284;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBracket:
			case LBrace:
			case LParen:
			case Lambda:
			case Minus:
			case Pipe:
			case Inverse:
			case Not:
			case If:
			case True:
			case False:
			case Number:
			case Name:
			case String:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 280;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
				case 1:
					{
					State = 278; Match(Name);
					State = 279; Match(Colon);
					}
					break;
				}
				State = 282; expression(0);
				}
				}
				break;
			case Wildcard:
				EnterOuterAlt(_localctx, 2);
				{
				State = 283; Match(Wildcard);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationsContext : ParserRuleContext {
		public ITerminalNode Let() { return GetToken(VeeParser.Let, 0); }
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(VeeParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(VeeParser.Comma, i);
		}
		public DeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarations; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationsContext declarations() {
		DeclarationsContext _localctx = new DeclarationsContext(Context, State);
		EnterRule(_localctx, 26, RULE_declarations);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 286; Match(Let);
			State = 287; declaration();
			State = 292;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 288; Match(Comma);
					State = 289; declaration();
					}
					} 
				}
				State = 294;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			State = 296;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 295; Match(Comma);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public ITerminalNode Colon() { return GetToken(VeeParser.Colon, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Name() { return GetToken(VeeParser.Name, 0); }
		public ExtractionContext extraction() {
			return GetRuleContext<ExtractionContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Name:
				{
				State = 298; Match(Name);
				}
				break;
			case LBrace:
			case LParen:
				{
				State = 299; extraction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 302; Match(Colon);
			State = 303; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtractionContext : ParserRuleContext {
		public ExtractionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extraction; } }
	 
		public ExtractionContext() { }
		public virtual void CopyFrom(ExtractionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RecordExtractionContext : ExtractionContext {
		public ITerminalNode LBrace() { return GetToken(VeeParser.LBrace, 0); }
		public ITerminalNode[] Name() { return GetTokens(VeeParser.Name); }
		public ITerminalNode Name(int i) {
			return GetToken(VeeParser.Name, i);
		}
		public ITerminalNode RBrace() { return GetToken(VeeParser.RBrace, 0); }
		public AliasContext[] alias() {
			return GetRuleContexts<AliasContext>();
		}
		public AliasContext alias(int i) {
			return GetRuleContext<AliasContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(VeeParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(VeeParser.Comma, i);
		}
		public RecordExtractionContext(ExtractionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordExtraction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TupleExtractionContext : ExtractionContext {
		public ITerminalNode LParen() { return GetToken(VeeParser.LParen, 0); }
		public ITerminalNode[] Name() { return GetTokens(VeeParser.Name); }
		public ITerminalNode Name(int i) {
			return GetToken(VeeParser.Name, i);
		}
		public ITerminalNode RParen() { return GetToken(VeeParser.RParen, 0); }
		public ITerminalNode[] Comma() { return GetTokens(VeeParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(VeeParser.Comma, i);
		}
		public TupleExtractionContext(ExtractionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleExtraction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtractionContext extraction() {
		ExtractionContext _localctx = new ExtractionContext(Context, State);
		EnterRule(_localctx, 30, RULE_extraction);
		int _la;
		try {
			State = 328;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LParen:
				_localctx = new TupleExtractionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 305; Match(LParen);
				State = 306; Match(Name);
				State = 309;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 307; Match(Comma);
					State = 308; Match(Name);
					}
					}
					State = 311;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Comma );
				State = 313; Match(RParen);
				}
				break;
			case LBrace:
				_localctx = new RecordExtractionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 314; Match(LBrace);
				State = 315; Match(Name);
				State = 317;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==As) {
					{
					State = 316; alias();
					}
				}

				State = 324;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 319; Match(Comma);
					State = 320; Match(Name);
					State = 321; alias();
					}
					}
					State = 326;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 327; Match(RBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : ParserRuleContext {
		public ITerminalNode As() { return GetToken(VeeParser.As, 0); }
		public ITerminalNode Name() { return GetToken(VeeParser.Name, 0); }
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(Context, State);
		EnterRule(_localctx, 32, RULE_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330; Match(As);
			State = 331; Match(Name);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ExpressionContext @if;
		public ExpressionContext then;
		public ITerminalNode Then() { return GetToken(VeeParser.Then, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 34, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333; _localctx.@if = expression(0);
			State = 334; Match(Then);
			State = 335; _localctx.then = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchContext : ParserRuleContext {
		public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		public ITerminalNode Then() { return GetToken(VeeParser.Then, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode When() { return GetToken(VeeParser.When, 0); }
		public MatchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_match; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MatchContext match() {
		MatchContext _localctx = new MatchContext(Context, State);
		EnterRule(_localctx, 36, RULE_match);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337; pattern();
			State = 340;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==When) {
				{
				State = 338; Match(When);
				State = 339; expression(0);
				}
			}

			State = 342; Match(Then);
			State = 343; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatternContext : ParserRuleContext {
		public PatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pattern; } }
	 
		public PatternContext() { }
		public virtual void CopyFrom(PatternContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ListPatternContext : PatternContext {
		public ITerminalNode LBracket() { return GetToken(VeeParser.LBracket, 0); }
		public ITerminalNode RBracket() { return GetToken(VeeParser.RBracket, 0); }
		public CaptureContext[] capture() {
			return GetRuleContexts<CaptureContext>();
		}
		public CaptureContext capture(int i) {
			return GetRuleContext<CaptureContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(VeeParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(VeeParser.Comma, i);
		}
		public RestContext rest() {
			return GetRuleContext<RestContext>(0);
		}
		public ListPatternContext(PatternContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListPattern(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NonePatternContext : PatternContext {
		public ITerminalNode NoneCase() { return GetToken(VeeParser.NoneCase, 0); }
		public NonePatternContext(PatternContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonePattern(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TuplePatternContext : PatternContext {
		public ITerminalNode LParen() { return GetToken(VeeParser.LParen, 0); }
		public CaptureContext[] capture() {
			return GetRuleContexts<CaptureContext>();
		}
		public CaptureContext capture(int i) {
			return GetRuleContext<CaptureContext>(i);
		}
		public ITerminalNode RParen() { return GetToken(VeeParser.RParen, 0); }
		public ITerminalNode[] Comma() { return GetTokens(VeeParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(VeeParser.Comma, i);
		}
		public RestContext rest() {
			return GetRuleContext<RestContext>(0);
		}
		public TuplePatternContext(PatternContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuplePattern(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RecordPatternContext : PatternContext {
		public ITerminalNode LBrace() { return GetToken(VeeParser.LBrace, 0); }
		public FieldPatternContext[] fieldPattern() {
			return GetRuleContexts<FieldPatternContext>();
		}
		public FieldPatternContext fieldPattern(int i) {
			return GetRuleContext<FieldPatternContext>(i);
		}
		public ITerminalNode RBrace() { return GetToken(VeeParser.RBrace, 0); }
		public ITerminalNode[] Comma() { return GetTokens(VeeParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(VeeParser.Comma, i);
		}
		public RestContext rest() {
			return GetRuleContext<RestContext>(0);
		}
		public RecordPatternContext(PatternContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordPattern(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantPatternContext : PatternContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantPatternContext(PatternContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantPattern(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MapPatternContext : PatternContext {
		public ITerminalNode LBrace() { return GetToken(VeeParser.LBrace, 0); }
		public ITerminalNode RBrace() { return GetToken(VeeParser.RBrace, 0); }
		public KeyPatternContext[] keyPattern() {
			return GetRuleContexts<KeyPatternContext>();
		}
		public KeyPatternContext keyPattern(int i) {
			return GetRuleContext<KeyPatternContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(VeeParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(VeeParser.Comma, i);
		}
		public RestContext rest() {
			return GetRuleContext<RestContext>(0);
		}
		public MapPatternContext(PatternContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapPattern(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EnumPatternContext : PatternContext {
		public CaptureContext capture() {
			return GetRuleContext<CaptureContext>(0);
		}
		public ITerminalNode SomeCase() { return GetToken(VeeParser.SomeCase, 0); }
		public ITerminalNode ResultCase() { return GetToken(VeeParser.ResultCase, 0); }
		public ITerminalNode ErrorCase() { return GetToken(VeeParser.ErrorCase, 0); }
		public EnumPatternContext(PatternContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatternContext pattern() {
		PatternContext _localctx = new PatternContext(Context, State);
		EnterRule(_localctx, 38, RULE_pattern);
		int _la;
		try {
			int _alt;
			State = 411;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				_localctx = new TuplePatternContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 345; Match(LParen);
				State = 346; capture();
				State = 351;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 347; Match(Comma);
						State = 348; capture();
						}
						} 
					}
					State = 353;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
				}
				State = 356;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 354; Match(Comma);
					State = 355; rest();
					}
				}

				State = 358; Match(RParen);
				}
				break;
			case 2:
				_localctx = new RecordPatternContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 360; Match(LBrace);
				State = 361; fieldPattern();
				State = 366;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 362; Match(Comma);
						State = 363; fieldPattern();
						}
						} 
					}
					State = 368;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
				}
				State = 371;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 369; Match(Comma);
					State = 370; rest();
					}
				}

				State = 373; Match(RBrace);
				}
				break;
			case 3:
				_localctx = new ListPatternContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 375; Match(LBracket);
				State = 377;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBracket) | (1L << LBrace) | (1L << LParen) | (1L << True) | (1L << False) | (1L << StringType) | (1L << NumberType) | (1L << BooleanType) | (1L << EnumType) | (1L << TupleType) | (1L << RecordType) | (1L << ListType) | (1L << MapType) | (1L << TaskType) | (1L << OptionType) | (1L << UnitType) | (1L << SomeCase) | (1L << NoneCase) | (1L << ResultCase))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (ErrorCase - 64)) | (1L << (Number - 64)) | (1L << (Name - 64)) | (1L << (String - 64)))) != 0)) {
					{
					State = 376; capture();
					}
				}

				State = 383;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 379; Match(Comma);
						State = 380; capture();
						}
						} 
					}
					State = 385;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
				}
				State = 388;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 386; Match(Comma);
					State = 387; rest();
					}
				}

				State = 390; Match(RBracket);
				}
				break;
			case 4:
				_localctx = new MapPatternContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 391; Match(LBrace);
				State = 393;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LBracket) {
					{
					State = 392; keyPattern();
					}
				}

				State = 399;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 395; Match(Comma);
						State = 396; keyPattern();
						}
						} 
					}
					State = 401;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
				}
				State = 404;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 402; Match(Comma);
					State = 403; rest();
					}
				}

				State = 406; Match(RBrace);
				}
				break;
			case 5:
				_localctx = new EnumPatternContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 407;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (SomeCase - 61)) | (1L << (ResultCase - 61)) | (1L << (ErrorCase - 61)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 408; capture();
				}
				break;
			case 6:
				_localctx = new NonePatternContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 409; Match(NoneCase);
				}
				break;
			case 7:
				_localctx = new ConstantPatternContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 410; constant();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaptureContext : ParserRuleContext {
		public CaptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_capture; } }
	 
		public CaptureContext() { }
		public virtual void CopyFrom(CaptureContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypeCaptureContext : CaptureContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		public TypeCaptureContext(CaptureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeCapture(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubPatternCaptureContext : CaptureContext {
		public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		public SubPatternCaptureContext(CaptureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubPatternCapture(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableCaptureContext : CaptureContext {
		public ITerminalNode Name() { return GetToken(VeeParser.Name, 0); }
		public VariableCaptureContext(CaptureContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableCapture(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaptureContext capture() {
		CaptureContext _localctx = new CaptureContext(Context, State);
		EnterRule(_localctx, 40, RULE_capture);
		int _la;
		try {
			State = 419;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Name:
				_localctx = new VariableCaptureContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 413; Match(Name);
				}
				break;
			case LBracket:
			case LBrace:
			case LParen:
			case True:
			case False:
			case SomeCase:
			case NoneCase:
			case ResultCase:
			case ErrorCase:
			case Number:
			case String:
				_localctx = new SubPatternCaptureContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 414; pattern();
				}
				break;
			case StringType:
			case NumberType:
			case BooleanType:
			case EnumType:
			case TupleType:
			case RecordType:
			case ListType:
			case MapType:
			case TaskType:
			case OptionType:
			case UnitType:
				_localctx = new TypeCaptureContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 415; typeName();
				State = 417;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==As) {
					{
					State = 416; alias();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyPatternContext : ParserRuleContext {
		public ITerminalNode LBracket() { return GetToken(VeeParser.LBracket, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ITerminalNode RBracket() { return GetToken(VeeParser.RBracket, 0); }
		public ITerminalNode Colon() { return GetToken(VeeParser.Colon, 0); }
		public CaptureContext capture() {
			return GetRuleContext<CaptureContext>(0);
		}
		public KeyPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyPattern; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyPatternContext keyPattern() {
		KeyPatternContext _localctx = new KeyPatternContext(Context, State);
		EnterRule(_localctx, 42, RULE_keyPattern);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 421; Match(LBracket);
			State = 422; constant();
			State = 423; Match(RBracket);
			State = 426;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 424; Match(Colon);
				State = 425; capture();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldPatternContext : ParserRuleContext {
		public ITerminalNode Name() { return GetToken(VeeParser.Name, 0); }
		public ITerminalNode Colon() { return GetToken(VeeParser.Colon, 0); }
		public CaptureContext capture() {
			return GetRuleContext<CaptureContext>(0);
		}
		public FieldPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldPattern; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldPatternContext fieldPattern() {
		FieldPatternContext _localctx = new FieldPatternContext(Context, State);
		EnterRule(_localctx, 44, RULE_fieldPattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428; Match(Name);
			State = 429; Match(Colon);
			State = 430; capture();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RestContext : ParserRuleContext {
		public ITerminalNode Range() { return GetToken(VeeParser.Range, 0); }
		public ITerminalNode Name() { return GetToken(VeeParser.Name, 0); }
		public RestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rest; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RestContext rest() {
		RestContext _localctx = new RestContext(Context, State);
		EnterRule(_localctx, 46, RULE_rest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 432; Match(Range);
			State = 433; Match(Name);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaParamsContext : ParserRuleContext {
		public LambdaParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaParams; } }
	 
		public LambdaParamsContext() { }
		public virtual void CopyFrom(LambdaParamsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SingleLambdaParamContext : LambdaParamsContext {
		public ITerminalNode Name() { return GetToken(VeeParser.Name, 0); }
		public SingleLambdaParamContext(LambdaParamsContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleLambdaParam(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultipleLambdaParamsContext : LambdaParamsContext {
		public ITerminalNode LParen() { return GetToken(VeeParser.LParen, 0); }
		public ITerminalNode[] Name() { return GetTokens(VeeParser.Name); }
		public ITerminalNode Name(int i) {
			return GetToken(VeeParser.Name, i);
		}
		public ITerminalNode RParen() { return GetToken(VeeParser.RParen, 0); }
		public TypeAnnotationContext[] typeAnnotation() {
			return GetRuleContexts<TypeAnnotationContext>();
		}
		public TypeAnnotationContext typeAnnotation(int i) {
			return GetRuleContext<TypeAnnotationContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(VeeParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(VeeParser.Comma, i);
		}
		public MultipleLambdaParamsContext(LambdaParamsContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultipleLambdaParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaParamsContext lambdaParams() {
		LambdaParamsContext _localctx = new LambdaParamsContext(Context, State);
		EnterRule(_localctx, 48, RULE_lambdaParams);
		int _la;
		try {
			State = 452;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Name:
				_localctx = new SingleLambdaParamContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 435; Match(Name);
				}
				break;
			case LParen:
				_localctx = new MultipleLambdaParamsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 436; Match(LParen);
				State = 437; Match(Name);
				State = 439;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 438; typeAnnotation();
					}
				}

				State = 448;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 441; Match(Comma);
					State = 442; Match(Name);
					State = 444;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==Colon) {
						{
						State = 443; typeAnnotation();
						}
					}

					}
					}
					State = 450;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 451; Match(RParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaBodyContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationsContext declarations() {
			return GetRuleContext<DeclarationsContext>(0);
		}
		public ITerminalNode In() { return GetToken(VeeParser.In, 0); }
		public LambdaBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaBody; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaBodyContext lambdaBody() {
		LambdaBodyContext _localctx = new LambdaBodyContext(Context, State);
		EnterRule(_localctx, 50, RULE_lambdaBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Let) {
				{
				State = 454; declarations();
				State = 455; Match(In);
				}
			}

			State = 459; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorsContext : ParserRuleContext {
		public OperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operators; } }
	 
		public OperatorsContext() { }
		public virtual void CopyFrom(OperatorsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RightUnaryOperatorContext : OperatorsContext {
		public IToken right;
		public UnaryOperatorsContext unaryOperators() {
			return GetRuleContext<UnaryOperatorsContext>(0);
		}
		public ITerminalNode Wildcard() { return GetToken(VeeParser.Wildcard, 0); }
		public RightUnaryOperatorContext(OperatorsContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightUnaryOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RightOperatorContext : OperatorsContext {
		public ExpressionContext left;
		public IToken right;
		public BinaryOperatorsContext binaryOperators() {
			return GetRuleContext<BinaryOperatorsContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Wildcard() { return GetToken(VeeParser.Wildcard, 0); }
		public RightOperatorContext(OperatorsContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberOperatorContext : OperatorsContext {
		public IToken left;
		public ITerminalNode Dot() { return GetToken(VeeParser.Dot, 0); }
		public MemberContext member() {
			return GetRuleContext<MemberContext>(0);
		}
		public ITerminalNode Wildcard() { return GetToken(VeeParser.Wildcard, 0); }
		public TypeAnnotationContext typeAnnotation() {
			return GetRuleContext<TypeAnnotationContext>(0);
		}
		public MemberOperatorContext(OperatorsContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LeftOperatorContext : OperatorsContext {
		public IToken left;
		public ExpressionContext right;
		public BinaryOperatorsContext binaryOperators() {
			return GetRuleContext<BinaryOperatorsContext>(0);
		}
		public ITerminalNode Wildcard() { return GetToken(VeeParser.Wildcard, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LeftOperatorContext(OperatorsContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeftOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LeftRightOperatorContext : OperatorsContext {
		public IToken left;
		public IToken right;
		public BinaryOperatorsContext binaryOperators() {
			return GetRuleContext<BinaryOperatorsContext>(0);
		}
		public ITerminalNode[] Wildcard() { return GetTokens(VeeParser.Wildcard); }
		public ITerminalNode Wildcard(int i) {
			return GetToken(VeeParser.Wildcard, i);
		}
		public TypeAnnotationContext[] typeAnnotation() {
			return GetRuleContexts<TypeAnnotationContext>();
		}
		public TypeAnnotationContext typeAnnotation(int i) {
			return GetRuleContext<TypeAnnotationContext>(i);
		}
		public LeftRightOperatorContext(OperatorsContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeftRightOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorsContext operators() {
		OperatorsContext _localctx = new OperatorsContext(Context, State);
		EnterRule(_localctx, 52, RULE_operators);
		int _la;
		try {
			State = 487;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				_localctx = new LeftOperatorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 461; ((LeftOperatorContext)_localctx).left = Match(Wildcard);
				State = 462; binaryOperators();
				State = 463; ((LeftOperatorContext)_localctx).right = expression(0);
				}
				break;
			case 2:
				_localctx = new RightOperatorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 465; ((RightOperatorContext)_localctx).left = expression(0);
				State = 466; binaryOperators();
				State = 467; ((RightOperatorContext)_localctx).right = Match(Wildcard);
				}
				break;
			case 3:
				_localctx = new LeftRightOperatorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 469; ((LeftRightOperatorContext)_localctx).left = Match(Wildcard);
				State = 471;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 470; typeAnnotation();
					}
				}

				State = 473; binaryOperators();
				State = 474; ((LeftRightOperatorContext)_localctx).right = Match(Wildcard);
				State = 476;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 475; typeAnnotation();
					}
				}

				}
				break;
			case 4:
				_localctx = new RightUnaryOperatorContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 478; unaryOperators();
				State = 479; ((RightUnaryOperatorContext)_localctx).right = Match(Wildcard);
				}
				break;
			case 5:
				_localctx = new MemberOperatorContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 481; ((MemberOperatorContext)_localctx).left = Match(Wildcard);
				State = 483;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 482; typeAnnotation();
					}
				}

				State = 485; Match(Dot);
				State = 486; member();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryOperatorsContext : ParserRuleContext {
		public ITerminalNode Pow() { return GetToken(VeeParser.Pow, 0); }
		public ITerminalNode Multiply() { return GetToken(VeeParser.Multiply, 0); }
		public ITerminalNode Divide() { return GetToken(VeeParser.Divide, 0); }
		public ITerminalNode Modulo() { return GetToken(VeeParser.Modulo, 0); }
		public ITerminalNode Plus() { return GetToken(VeeParser.Plus, 0); }
		public ITerminalNode Minus() { return GetToken(VeeParser.Minus, 0); }
		public ITerminalNode Eq() { return GetToken(VeeParser.Eq, 0); }
		public ITerminalNode Neq() { return GetToken(VeeParser.Neq, 0); }
		public ITerminalNode AndAlso() { return GetToken(VeeParser.AndAlso, 0); }
		public ITerminalNode OrElse() { return GetToken(VeeParser.OrElse, 0); }
		public ITerminalNode Gte() { return GetToken(VeeParser.Gte, 0); }
		public ITerminalNode Gt() { return GetToken(VeeParser.Gt, 0); }
		public ITerminalNode Lt() { return GetToken(VeeParser.Lt, 0); }
		public ITerminalNode Lte() { return GetToken(VeeParser.Lte, 0); }
		public ITerminalNode Concat() { return GetToken(VeeParser.Concat, 0); }
		public BinaryOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryOperators; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryOperatorsContext binaryOperators() {
		BinaryOperatorsContext _localctx = new BinaryOperatorsContext(Context, State);
		EnterRule(_localctx, 54, RULE_binaryOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 489;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Pow) | (1L << Multiply) | (1L << Divide) | (1L << Modulo) | (1L << Plus) | (1L << Minus) | (1L << Eq) | (1L << Neq) | (1L << Lt) | (1L << Gt) | (1L << Lte) | (1L << Gte) | (1L << Concat) | (1L << AndAlso) | (1L << OrElse))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOperatorsContext : ParserRuleContext {
		public ITerminalNode Minus() { return GetToken(VeeParser.Minus, 0); }
		public ITerminalNode Not() { return GetToken(VeeParser.Not, 0); }
		public UnaryOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperators; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperatorsContext unaryOperators() {
		UnaryOperatorsContext _localctx = new UnaryOperatorsContext(Context, State);
		EnterRule(_localctx, 56, RULE_unaryOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 491;
			_la = TokenStream.LA(1);
			if ( !(_la==Minus || _la==Not) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return type_sempred((TypeContext)_localctx, predIndex);
		case 4: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		case 2: return Precpred(Context, 1);
		case 3: return Precpred(Context, 4);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 14);
		case 5: return Precpred(Context, 13);
		case 6: return Precpred(Context, 12);
		case 7: return Precpred(Context, 11);
		case 8: return Precpred(Context, 10);
		case 9: return Precpred(Context, 9);
		case 10: return Precpred(Context, 8);
		case 11: return Precpred(Context, 7);
		case 12: return Precpred(Context, 6);
		case 13: return Precpred(Context, 5);
		case 14: return Precpred(Context, 19);
		case 15: return Precpred(Context, 18);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'G', '\x1F0', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x5', '\x2', '@', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', 'K', '\n', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '[', '\n', '\x3', '\f', 
		'\x3', '\xE', '\x3', '^', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x6', 
		'\x6', 'l', '\n', '\x6', '\r', '\x6', '\xE', '\x6', 'm', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\a', '\x6', 'v', '\n', '\x6', '\f', '\x6', '\xE', '\x6', 'y', '\v', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'\x7F', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x5', '\x6', '\x85', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x9F', '\n', '\x6', '\f', '\x6', 
		'\xE', '\x6', '\xA2', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', '\xAB', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\a', '\x6', '\xB0', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '\xB3', '\v', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\xB7', '\n', '\x6', 
		'\x5', '\x6', '\xB9', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\xDF', 
		'\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\xE3', '\n', '\x6', 
		'\f', '\x6', '\xE', '\x6', '\xE6', '\v', '\x6', '\x3', '\x6', '\a', '\x6', 
		'\xE9', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '\xEC', '\v', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x5', '\b', '\xF4', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\a', '\n', '\xFF', '\n', '\n', '\f', '\n', '\xE', '\n', '\x102', 
		'\v', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', 
		'\x10D', '\n', '\f', '\f', '\f', '\xE', '\f', '\x110', '\v', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', 
		'\x117', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x11B', 
		'\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x11F', '\n', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', 
		'\x125', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x128', '\v', '\xF', 
		'\x3', '\xF', '\x5', '\xF', '\x12B', '\n', '\xF', '\x3', '\x10', '\x3', 
		'\x10', '\x5', '\x10', '\x12F', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x6', '\x11', '\x138', '\n', '\x11', '\r', '\x11', '\xE', '\x11', '\x139', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', 
		'\x140', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', 
		'\x11', '\x145', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\x148', '\v', 
		'\x11', '\x3', '\x11', '\x5', '\x11', '\x14B', '\n', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', 
		'\x157', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', '\x160', 
		'\n', '\x15', '\f', '\x15', '\xE', '\x15', '\x163', '\v', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x5', '\x15', '\x167', '\n', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\a', '\x15', '\x16F', '\n', '\x15', '\f', '\x15', '\xE', '\x15', '\x172', 
		'\v', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x176', '\n', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', 
		'\x15', '\x17C', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', 
		'\x180', '\n', '\x15', '\f', '\x15', '\xE', '\x15', '\x183', '\v', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x187', '\n', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x18C', '\n', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\a', '\x15', '\x190', '\n', '\x15', '\f', 
		'\x15', '\xE', '\x15', '\x193', '\v', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x5', '\x15', '\x197', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x19E', '\n', '\x15', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', 
		'\x1A4', '\n', '\x16', '\x5', '\x16', '\x1A6', '\n', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', 
		'\x1AD', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x1BA', '\n', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x1BF', '\n', 
		'\x1A', '\a', '\x1A', '\x1C1', '\n', '\x1A', '\f', '\x1A', '\xE', '\x1A', 
		'\x1C4', '\v', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x1C7', '\n', '\x1A', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x1CC', '\n', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x1DA', '\n', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x1DF', '\n', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x5', '\x1C', '\x1E6', '\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x5', '\x1C', '\x1EA', '\n', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x2', '\x4', '\x4', '\n', '\x1F', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '\x2', '\xE', '\x4', 
		'\x2', '\x33', '\x38', ':', '>', '\x3', '\x2', '\xF', '\x11', '\x3', '\x2', 
		'\x12', '\x13', '\x3', '\x2', '\x14', '\x15', '\x3', '\x2', '\x16', '\x19', 
		'\x3', '\x2', '#', '$', '\x3', '\x2', ' ', '!', '\x3', '\x2', '\x1E', 
		'\x1F', '\x5', '\x2', '.', '/', '\x43', '\x43', '\x46', '\x46', '\x4', 
		'\x2', '?', '?', '\x41', '\x42', '\x5', '\x2', '\xE', '\x19', '\x1D', 
		'\x1D', '#', '$', '\x4', '\x2', '\x13', '\x13', '%', '%', '\x2', '\x22C', 
		'\x2', '?', '\x3', '\x2', '\x2', '\x2', '\x4', 'J', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '_', '\x3', '\x2', '\x2', '\x2', '\b', '\x62', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\xB8', '\x3', '\x2', '\x2', '\x2', '\f', '\xED', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\xEF', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\xF7', '\x3', '\x2', '\x2', '\x2', '\x12', '\xFB', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x103', '\x3', '\x2', '\x2', '\x2', '\x16', '\x109', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\x116', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x120', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x12E', '\x3', '\x2', '\x2', '\x2', ' ', '\x14A', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\x14C', '\x3', '\x2', '\x2', '\x2', 
		'$', '\x14F', '\x3', '\x2', '\x2', '\x2', '&', '\x153', '\x3', '\x2', 
		'\x2', '\x2', '(', '\x19D', '\x3', '\x2', '\x2', '\x2', '*', '\x1A5', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x1A7', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x1AE', '\x3', '\x2', '\x2', '\x2', '\x30', '\x1B2', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x1C6', '\x3', '\x2', '\x2', '\x2', '\x34', '\x1CB', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x1E9', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x1EB', '\x3', '\x2', '\x2', '\x2', ':', '\x1ED', '\x3', '\x2', 
		'\x2', '\x2', '<', '=', '\x5', '\x1C', '\xF', '\x2', '=', '>', '\a', '(', 
		'\x2', '\x2', '>', '@', '\x3', '\x2', '\x2', '\x2', '?', '<', '\x3', '\x2', 
		'\x2', '\x2', '?', '@', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x41', '\x42', '\x5', '\n', '\x6', '\x2', '\x42', 
		'\x43', '\a', '\x2', '\x2', '\x3', '\x43', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x44', '\x45', '\b', '\x3', '\x1', '\x2', '\x45', 'K', '\x5', 
		'\b', '\x5', '\x2', '\x46', 'K', '\a', '\x44', '\x2', '\x2', 'G', 'K', 
		'\a', '\x45', '\x2', '\x2', 'H', 'I', '\a', '\x44', '\x2', '\x2', 'I', 
		'K', '\x5', '\x6', '\x4', '\x2', 'J', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'J', '\x46', '\x3', '\x2', '\x2', '\x2', 'J', 'G', '\x3', '\x2', '\x2', 
		'\x2', 'J', 'H', '\x3', '\x2', '\x2', '\x2', 'K', '\\', '\x3', '\x2', 
		'\x2', '\x2', 'L', 'M', '\f', '\x5', '\x2', '\x2', 'M', 'N', '\a', '\f', 
		'\x2', '\x2', 'N', '[', '\x5', '\x4', '\x3', '\x6', 'O', 'P', '\f', '\x4', 
		'\x2', '\x2', 'P', 'Q', '\a', '\t', '\x2', '\x2', 'Q', '[', '\x5', '\x4', 
		'\x3', '\x5', 'R', 'S', '\f', '\x3', '\x2', '\x2', 'S', 'T', '\a', '\x1A', 
		'\x2', '\x2', 'T', '[', '\x5', '\x4', '\x3', '\x4', 'U', 'V', '\f', '\x6', 
		'\x2', '\x2', 'V', 'W', '\a', '\a', '\x2', '\x2', 'W', 'X', '\x5', '\x4', 
		'\x3', '\x2', 'X', 'Y', '\a', '\b', '\x2', '\x2', 'Y', '[', '\x3', '\x2', 
		'\x2', '\x2', 'Z', 'L', '\x3', '\x2', '\x2', '\x2', 'Z', 'O', '\x3', '\x2', 
		'\x2', '\x2', 'Z', 'R', '\x3', '\x2', '\x2', '\x2', 'Z', 'U', '\x3', '\x2', 
		'\x2', '\x2', '[', '^', '\x3', '\x2', '\x2', '\x2', '\\', 'Z', '\x3', 
		'\x2', '\x2', '\x2', '\\', ']', '\x3', '\x2', '\x2', '\x2', ']', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '^', '\\', '\x3', '\x2', '\x2', '\x2', '_', 
		'`', '\a', '\n', '\x2', '\x2', '`', '\x61', '\x5', '\x4', '\x3', '\x2', 
		'\x61', '\a', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\t', '\x2', 
		'\x2', '\x2', '\x63', '\t', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', 
		'\b', '\x6', '\x1', '\x2', '\x65', '\xB9', '\x5', '\f', '\a', '\x2', '\x66', 
		'\xB9', '\a', '\x44', '\x2', '\x2', 'g', 'h', '\a', '\a', '\x2', '\x2', 
		'h', 'k', '\x5', '\n', '\x6', '\x2', 'i', 'j', '\a', '\t', '\x2', '\x2', 
		'j', 'l', '\x5', '\n', '\x6', '\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 
		'l', 'm', '\x3', '\x2', '\x2', '\x2', 'm', 'k', '\x3', '\x2', '\x2', '\x2', 
		'm', 'n', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\x3', '\x2', '\x2', '\x2', 
		'o', 'p', '\a', '\b', '\x2', '\x2', 'p', '\xB9', '\x3', '\x2', '\x2', 
		'\x2', 'q', 'r', '\a', '\x5', '\x2', '\x2', 'r', 'w', '\x5', '\x10', '\t', 
		'\x2', 's', 't', '\a', '\t', '\x2', '\x2', 't', 'v', '\x5', '\x10', '\t', 
		'\x2', 'u', 's', '\x3', '\x2', '\x2', '\x2', 'v', 'y', '\x3', '\x2', '\x2', 
		'\x2', 'w', 'u', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'z', '\x3', '\x2', '\x2', '\x2', 'y', 'w', '\x3', '\x2', '\x2', 
		'\x2', 'z', '{', '\a', '\x6', '\x2', '\x2', '{', '\xB9', '\x3', '\x2', 
		'\x2', '\x2', '|', '~', '\a', '\x5', '\x2', '\x2', '}', '\x7F', '\x5', 
		'\x12', '\n', '\x2', '~', '}', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '\xB9', '\a', '\x6', '\x2', '\x2', '\x81', '\x84', '\a', '\x3', 
		'\x2', '\x2', '\x82', '\x85', '\x5', '\xE', '\b', '\x2', '\x83', '\x85', 
		'\x5', '\x16', '\f', '\x2', '\x84', '\x82', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '\x83', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\x3', '\x2', 
		'\x2', '\x2', '\x85', '\x86', '\x3', '\x2', '\x2', '\x2', '\x86', '\xB9', 
		'\a', '\x4', '\x2', '\x2', '\x87', '\x88', '\a', '\a', '\x2', '\x2', '\x88', 
		'\x89', '\x5', '\n', '\x6', '\x2', '\x89', '\x8A', '\a', '\b', '\x2', 
		'\x2', '\x8A', '\xB9', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\a', 
		'%', '\x2', '\x2', '\x8C', '\xB9', '\x5', '\n', '\x6', '\x13', '\x8D', 
		'\x8E', '\a', '\"', '\x2', '\x2', '\x8E', '\xB9', '\x5', '\n', '\x6', 
		'\x12', '\x8F', '\x90', '\a', '\x13', '\x2', '\x2', '\x90', '\xB9', '\x5', 
		'\n', '\x6', '\x11', '\x91', '\x92', '\a', '\x1A', '\x2', '\x2', '\x92', 
		'\x93', '\x5', '\x36', '\x1C', '\x2', '\x93', '\x94', '\a', '\x1A', '\x2', 
		'\x2', '\x94', '\xB9', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\a', 
		'\r', '\x2', '\x2', '\x96', '\x97', '\x5', '\x32', '\x1A', '\x2', '\x97', 
		'\x98', '\a', '\f', '\x2', '\x2', '\x98', '\x99', '\x5', '\x34', '\x1B', 
		'\x2', '\x99', '\xB9', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\a', 
		')', '\x2', '\x2', '\x9B', '\xA0', '\x5', '$', '\x13', '\x2', '\x9C', 
		'\x9D', '\a', '\x1A', '\x2', '\x2', '\x9D', '\x9F', '\x5', '$', '\x13', 
		'\x2', '\x9E', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA2', '\x3', 
		'\x2', '\x2', '\x2', '\xA0', '\x9E', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'\xA1', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\xA2', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\a', 
		'-', '\x2', '\x2', '\xA4', '\xA5', '\x5', '\n', '\x6', '\x4', '\xA5', 
		'\xB9', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', '\a', ')', '\x2', 
		'\x2', '\xA7', '\xA8', '\x5', '\n', '\x6', '\x2', '\xA8', '\xAA', '\a', 
		'*', '\x2', '\x2', '\xA9', '\xAB', '\a', '\x1A', '\x2', '\x2', '\xAA', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\x3', '\x2', '\x2', 
		'\x2', '\xAB', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xB1', '\x5', 
		'&', '\x14', '\x2', '\xAD', '\xAE', '\a', '\x1A', '\x2', '\x2', '\xAE', 
		'\xB0', '\x5', '&', '\x14', '\x2', '\xAF', '\xAD', '\x3', '\x2', '\x2', 
		'\x2', '\xB0', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xAF', '\x3', 
		'\x2', '\x2', '\x2', '\xB1', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB2', 
		'\xB6', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '\xB4', '\xB5', '\a', '-', '\x2', '\x2', '\xB5', '\xB7', '\x5', 
		'\n', '\x6', '\x2', '\xB6', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xB7', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB9', '\x3', '\x2', '\x2', 
		'\x2', '\xB8', '\x64', '\x3', '\x2', '\x2', '\x2', '\xB8', '\x66', '\x3', 
		'\x2', '\x2', '\x2', '\xB8', 'g', '\x3', '\x2', '\x2', '\x2', '\xB8', 
		'q', '\x3', '\x2', '\x2', '\x2', '\xB8', '|', '\x3', '\x2', '\x2', '\x2', 
		'\xB8', '\x81', '\x3', '\x2', '\x2', '\x2', '\xB8', '\x87', '\x3', '\x2', 
		'\x2', '\x2', '\xB8', '\x8B', '\x3', '\x2', '\x2', '\x2', '\xB8', '\x8D', 
		'\x3', '\x2', '\x2', '\x2', '\xB8', '\x8F', '\x3', '\x2', '\x2', '\x2', 
		'\xB8', '\x91', '\x3', '\x2', '\x2', '\x2', '\xB8', '\x95', '\x3', '\x2', 
		'\x2', '\x2', '\xB8', '\x9A', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xA6', 
		'\x3', '\x2', '\x2', '\x2', '\xB9', '\xEA', '\x3', '\x2', '\x2', '\x2', 
		'\xBA', '\xBB', '\f', '\x10', '\x2', '\x2', '\xBB', '\xBC', '\a', '\xE', 
		'\x2', '\x2', '\xBC', '\xE9', '\x5', '\n', '\x6', '\x11', '\xBD', '\xBE', 
		'\f', '\xF', '\x2', '\x2', '\xBE', '\xBF', '\t', '\x3', '\x2', '\x2', 
		'\xBF', '\xE9', '\x5', '\n', '\x6', '\x10', '\xC0', '\xC1', '\f', '\xE', 
		'\x2', '\x2', '\xC1', '\xC2', '\t', '\x4', '\x2', '\x2', '\xC2', '\xE9', 
		'\x5', '\n', '\x6', '\xF', '\xC3', '\xC4', '\f', '\r', '\x2', '\x2', '\xC4', 
		'\xC5', '\t', '\x5', '\x2', '\x2', '\xC5', '\xE9', '\x5', '\n', '\x6', 
		'\xE', '\xC6', '\xC7', '\f', '\f', '\x2', '\x2', '\xC7', '\xC8', '\t', 
		'\x6', '\x2', '\x2', '\xC8', '\xE9', '\x5', '\n', '\x6', '\r', '\xC9', 
		'\xCA', '\f', '\v', '\x2', '\x2', '\xCA', '\xCB', '\t', '\a', '\x2', '\x2', 
		'\xCB', '\xE9', '\x5', '\n', '\x6', '\f', '\xCC', '\xCD', '\f', '\n', 
		'\x2', '\x2', '\xCD', '\xCE', '\a', '\x1D', '\x2', '\x2', '\xCE', '\xE9', 
		'\x5', '\n', '\x6', '\v', '\xCF', '\xD0', '\f', '\t', '\x2', '\x2', '\xD0', 
		'\xD1', '\t', '\b', '\x2', '\x2', '\xD1', '\xE9', '\x5', '\n', '\x6', 
		'\n', '\xD2', '\xD3', '\f', '\b', '\x2', '\x2', '\xD3', '\xD4', '\t', 
		'\t', '\x2', '\x2', '\xD4', '\xE9', '\x5', '\n', '\x6', '\t', '\xD5', 
		'\xD6', '\f', '\a', '\x2', '\x2', '\xD6', '\xD7', '\a', '\x1B', '\x2', 
		'\x2', '\xD7', '\xE9', '\x5', '\n', '\x6', '\b', '\xD8', '\xD9', '\f', 
		'\x15', '\x2', '\x2', '\xD9', '\xDA', '\a', '\x1C', '\x2', '\x2', '\xDA', 
		'\xE9', '\x5', '\x18', '\r', '\x2', '\xDB', '\xDC', '\f', '\x14', '\x2', 
		'\x2', '\xDC', '\xDE', '\a', '\a', '\x2', '\x2', '\xDD', '\xDF', '\x5', 
		'\x1A', '\xE', '\x2', '\xDE', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDE', 
		'\xDF', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE4', '\x3', '\x2', '\x2', 
		'\x2', '\xE0', '\xE1', '\a', '\t', '\x2', '\x2', '\xE1', '\xE3', '\x5', 
		'\x1A', '\xE', '\x2', '\xE2', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xE6', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE2', '\x3', '\x2', '\x2', 
		'\x2', '\xE4', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE7', '\x3', 
		'\x2', '\x2', '\x2', '\xE6', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE7', 
		'\xE9', '\a', '\b', '\x2', '\x2', '\xE8', '\xBA', '\x3', '\x2', '\x2', 
		'\x2', '\xE8', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xC0', '\x3', 
		'\x2', '\x2', '\x2', '\xE8', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xE8', 
		'\xC6', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xC9', '\x3', '\x2', '\x2', 
		'\x2', '\xE8', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xCF', '\x3', 
		'\x2', '\x2', '\x2', '\xE8', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xE8', 
		'\xD5', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xD8', '\x3', '\x2', '\x2', 
		'\x2', '\xE8', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEC', '\x3', 
		'\x2', '\x2', '\x2', '\xEA', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xEA', 
		'\xEB', '\x3', '\x2', '\x2', '\x2', '\xEB', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\xEC', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xED', '\xEE', '\t', 
		'\n', '\x2', '\x2', '\xEE', '\r', '\x3', '\x2', '\x2', '\x2', '\xEF', 
		'\xF0', '\a', '\x43', '\x2', '\x2', '\xF0', '\xF3', '\a', '\v', '\x2', 
		'\x2', '\xF1', '\xF2', '\a', '\x43', '\x2', '\x2', '\xF2', '\xF4', '\a', 
		'\v', '\x2', '\x2', '\xF3', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF3', 
		'\xF4', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF5', '\x3', '\x2', '\x2', 
		'\x2', '\xF5', '\xF6', '\a', '\x43', '\x2', '\x2', '\xF6', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\xF7', '\xF8', '\a', '\x44', '\x2', '\x2', '\xF8', 
		'\xF9', '\a', '\n', '\x2', '\x2', '\xF9', '\xFA', '\x5', '\n', '\x6', 
		'\x2', '\xFA', '\x11', '\x3', '\x2', '\x2', '\x2', '\xFB', '\x100', '\x5', 
		'\x14', '\v', '\x2', '\xFC', '\xFD', '\a', '\t', '\x2', '\x2', '\xFD', 
		'\xFF', '\x5', '\x14', '\v', '\x2', '\xFE', '\xFC', '\x3', '\x2', '\x2', 
		'\x2', '\xFF', '\x102', '\x3', '\x2', '\x2', '\x2', '\x100', '\xFE', '\x3', 
		'\x2', '\x2', '\x2', '\x100', '\x101', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x102', '\x100', '\x3', '\x2', '\x2', 
		'\x2', '\x103', '\x104', '\a', '\x3', '\x2', '\x2', '\x104', '\x105', 
		'\x5', '\n', '\x6', '\x2', '\x105', '\x106', '\a', '\x4', '\x2', '\x2', 
		'\x106', '\x107', '\a', '\n', '\x2', '\x2', '\x107', '\x108', '\x5', '\n', 
		'\x6', '\x2', '\x108', '\x15', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10E', 
		'\x5', '\n', '\x6', '\x2', '\x10A', '\x10B', '\a', '\t', '\x2', '\x2', 
		'\x10B', '\x10D', '\x5', '\n', '\x6', '\x2', '\x10C', '\x10A', '\x3', 
		'\x2', '\x2', '\x2', '\x10D', '\x110', '\x3', '\x2', '\x2', '\x2', '\x10E', 
		'\x10C', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10F', '\x3', '\x2', '\x2', 
		'\x2', '\x10F', '\x17', '\x3', '\x2', '\x2', '\x2', '\x110', '\x10E', 
		'\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\a', '\x3', '\x2', '\x2', 
		'\x112', '\x113', '\x5', '\n', '\x6', '\x2', '\x113', '\x114', '\a', '\x4', 
		'\x2', '\x2', '\x114', '\x117', '\x3', '\x2', '\x2', '\x2', '\x115', '\x117', 
		'\a', '\x44', '\x2', '\x2', '\x116', '\x111', '\x3', '\x2', '\x2', '\x2', 
		'\x116', '\x115', '\x3', '\x2', '\x2', '\x2', '\x117', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x118', '\x119', '\a', '\x44', '\x2', '\x2', '\x119', 
		'\x11B', '\a', '\n', '\x2', '\x2', '\x11A', '\x118', '\x3', '\x2', '\x2', 
		'\x2', '\x11A', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11C', 
		'\x3', '\x2', '\x2', '\x2', '\x11C', '\x11F', '\x5', '\n', '\x6', '\x2', 
		'\x11D', '\x11F', '\a', '\x45', '\x2', '\x2', '\x11E', '\x11A', '\x3', 
		'\x2', '\x2', '\x2', '\x11E', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x11F', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x120', '\x121', '\a', '\'', '\x2', 
		'\x2', '\x121', '\x126', '\x5', '\x1E', '\x10', '\x2', '\x122', '\x123', 
		'\a', '\t', '\x2', '\x2', '\x123', '\x125', '\x5', '\x1E', '\x10', '\x2', 
		'\x124', '\x122', '\x3', '\x2', '\x2', '\x2', '\x125', '\x128', '\x3', 
		'\x2', '\x2', '\x2', '\x126', '\x124', '\x3', '\x2', '\x2', '\x2', '\x126', 
		'\x127', '\x3', '\x2', '\x2', '\x2', '\x127', '\x12A', '\x3', '\x2', '\x2', 
		'\x2', '\x128', '\x126', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12B', 
		'\a', '\t', '\x2', '\x2', '\x12A', '\x129', '\x3', '\x2', '\x2', '\x2', 
		'\x12A', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x12C', '\x12F', '\a', '\x44', '\x2', '\x2', '\x12D', 
		'\x12F', '\x5', ' ', '\x11', '\x2', '\x12E', '\x12C', '\x3', '\x2', '\x2', 
		'\x2', '\x12E', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x130', 
		'\x3', '\x2', '\x2', '\x2', '\x130', '\x131', '\a', '\n', '\x2', '\x2', 
		'\x131', '\x132', '\x5', '\n', '\x6', '\x2', '\x132', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\x133', '\x134', '\a', '\a', '\x2', '\x2', '\x134', '\x137', 
		'\a', '\x44', '\x2', '\x2', '\x135', '\x136', '\a', '\t', '\x2', '\x2', 
		'\x136', '\x138', '\a', '\x44', '\x2', '\x2', '\x137', '\x135', '\x3', 
		'\x2', '\x2', '\x2', '\x138', '\x139', '\x3', '\x2', '\x2', '\x2', '\x139', 
		'\x137', '\x3', '\x2', '\x2', '\x2', '\x139', '\x13A', '\x3', '\x2', '\x2', 
		'\x2', '\x13A', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x14B', 
		'\a', '\b', '\x2', '\x2', '\x13C', '\x13D', '\a', '\x5', '\x2', '\x2', 
		'\x13D', '\x13F', '\a', '\x44', '\x2', '\x2', '\x13E', '\x140', '\x5', 
		'\"', '\x12', '\x2', '\x13F', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x13F', 
		'\x140', '\x3', '\x2', '\x2', '\x2', '\x140', '\x146', '\x3', '\x2', '\x2', 
		'\x2', '\x141', '\x142', '\a', '\t', '\x2', '\x2', '\x142', '\x143', '\a', 
		'\x44', '\x2', '\x2', '\x143', '\x145', '\x5', '\"', '\x12', '\x2', '\x144', 
		'\x141', '\x3', '\x2', '\x2', '\x2', '\x145', '\x148', '\x3', '\x2', '\x2', 
		'\x2', '\x146', '\x144', '\x3', '\x2', '\x2', '\x2', '\x146', '\x147', 
		'\x3', '\x2', '\x2', '\x2', '\x147', '\x149', '\x3', '\x2', '\x2', '\x2', 
		'\x148', '\x146', '\x3', '\x2', '\x2', '\x2', '\x149', '\x14B', '\a', 
		'\x6', '\x2', '\x2', '\x14A', '\x133', '\x3', '\x2', '\x2', '\x2', '\x14A', 
		'\x13C', '\x3', '\x2', '\x2', '\x2', '\x14B', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x14C', '\x14D', '\a', '\x31', '\x2', '\x2', '\x14D', '\x14E', 
		'\a', '\x44', '\x2', '\x2', '\x14E', '#', '\x3', '\x2', '\x2', '\x2', 
		'\x14F', '\x150', '\x5', '\n', '\x6', '\x2', '\x150', '\x151', '\a', ',', 
		'\x2', '\x2', '\x151', '\x152', '\x5', '\n', '\x6', '\x2', '\x152', '%', 
		'\x3', '\x2', '\x2', '\x2', '\x153', '\x156', '\x5', '(', '\x15', '\x2', 
		'\x154', '\x155', '\a', '+', '\x2', '\x2', '\x155', '\x157', '\x5', '\n', 
		'\x6', '\x2', '\x156', '\x154', '\x3', '\x2', '\x2', '\x2', '\x156', '\x157', 
		'\x3', '\x2', '\x2', '\x2', '\x157', '\x158', '\x3', '\x2', '\x2', '\x2', 
		'\x158', '\x159', '\a', ',', '\x2', '\x2', '\x159', '\x15A', '\x5', '\n', 
		'\x6', '\x2', '\x15A', '\'', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x15C', 
		'\a', '\a', '\x2', '\x2', '\x15C', '\x161', '\x5', '*', '\x16', '\x2', 
		'\x15D', '\x15E', '\a', '\t', '\x2', '\x2', '\x15E', '\x160', '\x5', '*', 
		'\x16', '\x2', '\x15F', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x160', 
		'\x163', '\x3', '\x2', '\x2', '\x2', '\x161', '\x15F', '\x3', '\x2', '\x2', 
		'\x2', '\x161', '\x162', '\x3', '\x2', '\x2', '\x2', '\x162', '\x166', 
		'\x3', '\x2', '\x2', '\x2', '\x163', '\x161', '\x3', '\x2', '\x2', '\x2', 
		'\x164', '\x165', '\a', '\t', '\x2', '\x2', '\x165', '\x167', '\x5', '\x30', 
		'\x19', '\x2', '\x166', '\x164', '\x3', '\x2', '\x2', '\x2', '\x166', 
		'\x167', '\x3', '\x2', '\x2', '\x2', '\x167', '\x168', '\x3', '\x2', '\x2', 
		'\x2', '\x168', '\x169', '\a', '\b', '\x2', '\x2', '\x169', '\x19E', '\x3', 
		'\x2', '\x2', '\x2', '\x16A', '\x16B', '\a', '\x5', '\x2', '\x2', '\x16B', 
		'\x170', '\x5', '.', '\x18', '\x2', '\x16C', '\x16D', '\a', '\t', '\x2', 
		'\x2', '\x16D', '\x16F', '\x5', '.', '\x18', '\x2', '\x16E', '\x16C', 
		'\x3', '\x2', '\x2', '\x2', '\x16F', '\x172', '\x3', '\x2', '\x2', '\x2', 
		'\x170', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x170', '\x171', '\x3', 
		'\x2', '\x2', '\x2', '\x171', '\x175', '\x3', '\x2', '\x2', '\x2', '\x172', 
		'\x170', '\x3', '\x2', '\x2', '\x2', '\x173', '\x174', '\a', '\t', '\x2', 
		'\x2', '\x174', '\x176', '\x5', '\x30', '\x19', '\x2', '\x175', '\x173', 
		'\x3', '\x2', '\x2', '\x2', '\x175', '\x176', '\x3', '\x2', '\x2', '\x2', 
		'\x176', '\x177', '\x3', '\x2', '\x2', '\x2', '\x177', '\x178', '\a', 
		'\x6', '\x2', '\x2', '\x178', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x179', 
		'\x17B', '\a', '\x3', '\x2', '\x2', '\x17A', '\x17C', '\x5', '*', '\x16', 
		'\x2', '\x17B', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x17B', '\x17C', 
		'\x3', '\x2', '\x2', '\x2', '\x17C', '\x181', '\x3', '\x2', '\x2', '\x2', 
		'\x17D', '\x17E', '\a', '\t', '\x2', '\x2', '\x17E', '\x180', '\x5', '*', 
		'\x16', '\x2', '\x17F', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x180', 
		'\x183', '\x3', '\x2', '\x2', '\x2', '\x181', '\x17F', '\x3', '\x2', '\x2', 
		'\x2', '\x181', '\x182', '\x3', '\x2', '\x2', '\x2', '\x182', '\x186', 
		'\x3', '\x2', '\x2', '\x2', '\x183', '\x181', '\x3', '\x2', '\x2', '\x2', 
		'\x184', '\x185', '\a', '\t', '\x2', '\x2', '\x185', '\x187', '\x5', '\x30', 
		'\x19', '\x2', '\x186', '\x184', '\x3', '\x2', '\x2', '\x2', '\x186', 
		'\x187', '\x3', '\x2', '\x2', '\x2', '\x187', '\x188', '\x3', '\x2', '\x2', 
		'\x2', '\x188', '\x19E', '\a', '\x4', '\x2', '\x2', '\x189', '\x18B', 
		'\a', '\x5', '\x2', '\x2', '\x18A', '\x18C', '\x5', ',', '\x17', '\x2', 
		'\x18B', '\x18A', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x18C', '\x3', 
		'\x2', '\x2', '\x2', '\x18C', '\x191', '\x3', '\x2', '\x2', '\x2', '\x18D', 
		'\x18E', '\a', '\t', '\x2', '\x2', '\x18E', '\x190', '\x5', ',', '\x17', 
		'\x2', '\x18F', '\x18D', '\x3', '\x2', '\x2', '\x2', '\x190', '\x193', 
		'\x3', '\x2', '\x2', '\x2', '\x191', '\x18F', '\x3', '\x2', '\x2', '\x2', 
		'\x191', '\x192', '\x3', '\x2', '\x2', '\x2', '\x192', '\x196', '\x3', 
		'\x2', '\x2', '\x2', '\x193', '\x191', '\x3', '\x2', '\x2', '\x2', '\x194', 
		'\x195', '\a', '\t', '\x2', '\x2', '\x195', '\x197', '\x5', '\x30', '\x19', 
		'\x2', '\x196', '\x194', '\x3', '\x2', '\x2', '\x2', '\x196', '\x197', 
		'\x3', '\x2', '\x2', '\x2', '\x197', '\x198', '\x3', '\x2', '\x2', '\x2', 
		'\x198', '\x19E', '\a', '\x6', '\x2', '\x2', '\x199', '\x19A', '\t', '\v', 
		'\x2', '\x2', '\x19A', '\x19E', '\x5', '*', '\x16', '\x2', '\x19B', '\x19E', 
		'\a', '@', '\x2', '\x2', '\x19C', '\x19E', '\x5', '\f', '\a', '\x2', '\x19D', 
		'\x15B', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x16A', '\x3', '\x2', '\x2', 
		'\x2', '\x19D', '\x179', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x189', 
		'\x3', '\x2', '\x2', '\x2', '\x19D', '\x199', '\x3', '\x2', '\x2', '\x2', 
		'\x19D', '\x19B', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x19C', '\x3', 
		'\x2', '\x2', '\x2', '\x19E', ')', '\x3', '\x2', '\x2', '\x2', '\x19F', 
		'\x1A6', '\a', '\x44', '\x2', '\x2', '\x1A0', '\x1A6', '\x5', '(', '\x15', 
		'\x2', '\x1A1', '\x1A3', '\x5', '\b', '\x5', '\x2', '\x1A2', '\x1A4', 
		'\x5', '\"', '\x12', '\x2', '\x1A3', '\x1A2', '\x3', '\x2', '\x2', '\x2', 
		'\x1A3', '\x1A4', '\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1A6', '\x3', 
		'\x2', '\x2', '\x2', '\x1A5', '\x19F', '\x3', '\x2', '\x2', '\x2', '\x1A5', 
		'\x1A0', '\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A1', '\x3', '\x2', '\x2', 
		'\x2', '\x1A6', '+', '\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1A8', '\a', 
		'\x3', '\x2', '\x2', '\x1A8', '\x1A9', '\x5', '\f', '\a', '\x2', '\x1A9', 
		'\x1AC', '\a', '\x4', '\x2', '\x2', '\x1AA', '\x1AB', '\a', '\n', '\x2', 
		'\x2', '\x1AB', '\x1AD', '\x5', '*', '\x16', '\x2', '\x1AC', '\x1AA', 
		'\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AD', '\x3', '\x2', '\x2', '\x2', 
		'\x1AD', '-', '\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1AF', '\a', '\x44', 
		'\x2', '\x2', '\x1AF', '\x1B0', '\a', '\n', '\x2', '\x2', '\x1B0', '\x1B1', 
		'\x5', '*', '\x16', '\x2', '\x1B1', '/', '\x3', '\x2', '\x2', '\x2', '\x1B2', 
		'\x1B3', '\a', '\v', '\x2', '\x2', '\x1B3', '\x1B4', '\a', '\x44', '\x2', 
		'\x2', '\x1B4', '\x31', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1C7', 
		'\a', '\x44', '\x2', '\x2', '\x1B6', '\x1B7', '\a', '\a', '\x2', '\x2', 
		'\x1B7', '\x1B9', '\a', '\x44', '\x2', '\x2', '\x1B8', '\x1BA', '\x5', 
		'\x6', '\x4', '\x2', '\x1B9', '\x1B8', '\x3', '\x2', '\x2', '\x2', '\x1B9', 
		'\x1BA', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1C2', '\x3', '\x2', '\x2', 
		'\x2', '\x1BB', '\x1BC', '\a', '\t', '\x2', '\x2', '\x1BC', '\x1BE', '\a', 
		'\x44', '\x2', '\x2', '\x1BD', '\x1BF', '\x5', '\x6', '\x4', '\x2', '\x1BE', 
		'\x1BD', '\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1BF', '\x3', '\x2', '\x2', 
		'\x2', '\x1BF', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\x1BB', 
		'\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1C4', '\x3', '\x2', '\x2', '\x2', 
		'\x1C2', '\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1C3', '\x3', 
		'\x2', '\x2', '\x2', '\x1C3', '\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1C4', 
		'\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1C7', '\a', '\b', '\x2', 
		'\x2', '\x1C6', '\x1B5', '\x3', '\x2', '\x2', '\x2', '\x1C6', '\x1B6', 
		'\x3', '\x2', '\x2', '\x2', '\x1C7', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x1C8', '\x1C9', '\x5', '\x1C', '\xF', '\x2', '\x1C9', '\x1CA', '\a', 
		'(', '\x2', '\x2', '\x1CA', '\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1CB', 
		'\x1C8', '\x3', '\x2', '\x2', '\x2', '\x1CB', '\x1CC', '\x3', '\x2', '\x2', 
		'\x2', '\x1CC', '\x1CD', '\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1CE', 
		'\x5', '\n', '\x6', '\x2', '\x1CE', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x1CF', '\x1D0', '\a', '\x45', '\x2', '\x2', '\x1D0', '\x1D1', '\x5', 
		'\x38', '\x1D', '\x2', '\x1D1', '\x1D2', '\x5', '\n', '\x6', '\x2', '\x1D2', 
		'\x1EA', '\x3', '\x2', '\x2', '\x2', '\x1D3', '\x1D4', '\x5', '\n', '\x6', 
		'\x2', '\x1D4', '\x1D5', '\x5', '\x38', '\x1D', '\x2', '\x1D5', '\x1D6', 
		'\a', '\x45', '\x2', '\x2', '\x1D6', '\x1EA', '\x3', '\x2', '\x2', '\x2', 
		'\x1D7', '\x1D9', '\a', '\x45', '\x2', '\x2', '\x1D8', '\x1DA', '\x5', 
		'\x6', '\x4', '\x2', '\x1D9', '\x1D8', '\x3', '\x2', '\x2', '\x2', '\x1D9', 
		'\x1DA', '\x3', '\x2', '\x2', '\x2', '\x1DA', '\x1DB', '\x3', '\x2', '\x2', 
		'\x2', '\x1DB', '\x1DC', '\x5', '\x38', '\x1D', '\x2', '\x1DC', '\x1DE', 
		'\a', '\x45', '\x2', '\x2', '\x1DD', '\x1DF', '\x5', '\x6', '\x4', '\x2', 
		'\x1DE', '\x1DD', '\x3', '\x2', '\x2', '\x2', '\x1DE', '\x1DF', '\x3', 
		'\x2', '\x2', '\x2', '\x1DF', '\x1EA', '\x3', '\x2', '\x2', '\x2', '\x1E0', 
		'\x1E1', '\x5', ':', '\x1E', '\x2', '\x1E1', '\x1E2', '\a', '\x45', '\x2', 
		'\x2', '\x1E2', '\x1EA', '\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1E5', 
		'\a', '\x45', '\x2', '\x2', '\x1E4', '\x1E6', '\x5', '\x6', '\x4', '\x2', 
		'\x1E5', '\x1E4', '\x3', '\x2', '\x2', '\x2', '\x1E5', '\x1E6', '\x3', 
		'\x2', '\x2', '\x2', '\x1E6', '\x1E7', '\x3', '\x2', '\x2', '\x2', '\x1E7', 
		'\x1E8', '\a', '\x1C', '\x2', '\x2', '\x1E8', '\x1EA', '\x5', '\x18', 
		'\r', '\x2', '\x1E9', '\x1CF', '\x3', '\x2', '\x2', '\x2', '\x1E9', '\x1D3', 
		'\x3', '\x2', '\x2', '\x2', '\x1E9', '\x1D7', '\x3', '\x2', '\x2', '\x2', 
		'\x1E9', '\x1E0', '\x3', '\x2', '\x2', '\x2', '\x1E9', '\x1E3', '\x3', 
		'\x2', '\x2', '\x2', '\x1EA', '\x37', '\x3', '\x2', '\x2', '\x2', '\x1EB', 
		'\x1EC', '\t', '\f', '\x2', '\x2', '\x1EC', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x1ED', '\x1EE', '\t', '\r', '\x2', '\x2', '\x1EE', ';', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '?', 'J', 'Z', '\\', 'm', 'w', '~', '\x84', 
		'\xA0', '\xAA', '\xB1', '\xB6', '\xB8', '\xDE', '\xE4', '\xE8', '\xEA', 
		'\xF3', '\x100', '\x10E', '\x116', '\x11A', '\x11E', '\x126', '\x12A', 
		'\x12E', '\x139', '\x13F', '\x146', '\x14A', '\x156', '\x161', '\x166', 
		'\x170', '\x175', '\x17B', '\x181', '\x186', '\x18B', '\x191', '\x196', 
		'\x19D', '\x1A3', '\x1A5', '\x1AC', '\x1B9', '\x1BE', '\x1C2', '\x1C6', 
		'\x1CB', '\x1D9', '\x1DE', '\x1E5', '\x1E9',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Vee.Parser.Grammar
