//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/antlr/csharp/Vee/Vee\Vee.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Vee {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class VeeParser : Parser {
	public const int
		LBracket=1, RBracket=2, LBrace=3, RBrace=4, LParen=5, RParen=6, Comma=7, 
		Quiz=8, Colon=9, Hash=10, Range=11, Arrow=12, Pow=13, Multiply=14, Divide=15, 
		Modulo=16, Plus=17, Minus=18, Eq=19, Eeq=20, Deq=21, Neq=22, Lt=23, Gt=24, 
		Lte=25, Gte=26, Xor=27, And=28, Or=29, Compl=30, RPipe=31, Dot=32, Combine=33, 
		AndAlso=34, OrElse=35, Not=36, Let=37, Return=38, If=39, Try=40, Then=41, 
		Else=42, True=43, False=44, Date=45, DateTime=46, Number=47, Name=48, 
		String=49, WS=50;
	public const int
		RULE_root = 0, RULE_expression = 1, RULE_dates = 2, RULE_nums = 3, RULE_int = 4, 
		RULE_incr = 5, RULE_pairs = 6, RULE_pair = 7, RULE_parameters = 8, RULE_parameter = 9, 
		RULE_items = 10, RULE_arguments = 11, RULE_genericArgs = 12, RULE_argument = 13, 
		RULE_member = 14, RULE_type = 15, RULE_thenClause = 16, RULE_elseClause = 17, 
		RULE_continuation = 18, RULE_handler = 19, RULE_fallback = 20, RULE_declarations = 21, 
		RULE_declaration = 22;
	public static readonly string[] ruleNames = {
		"root", "expression", "dates", "nums", "int", "incr", "pairs", "pair", 
		"parameters", "parameter", "items", "arguments", "genericArgs", "argument", 
		"member", "type", "thenClause", "elseClause", "continuation", "handler", 
		"fallback", "declarations", "declaration"
	};

	private static readonly string[] _LiteralNames = {
		null, "'['", "']'", "'{'", "'}'", "'('", "')'", "','", "'?'", "':'", "'#'", 
		"'..'", "'->'", "'**'", "'*'", "'/'", "'%'", "'+'", "'-'", "'='", "'~='", 
		"'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'^'", "'&'", "'|'", "'~'", 
		"'|>'", "'.'", "'::'", "'and'", "'or'", "'not'", "'let'", "'return'", 
		"'if'", "'try'", "'then'", "'else'", "'true'", "'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LBracket", "RBracket", "LBrace", "RBrace", "LParen", "RParen", 
		"Comma", "Quiz", "Colon", "Hash", "Range", "Arrow", "Pow", "Multiply", 
		"Divide", "Modulo", "Plus", "Minus", "Eq", "Eeq", "Deq", "Neq", "Lt", 
		"Gt", "Lte", "Gte", "Xor", "And", "Or", "Compl", "RPipe", "Dot", "Combine", 
		"AndAlso", "OrElse", "Not", "Let", "Return", "If", "Try", "Then", "Else", 
		"True", "False", "Date", "DateTime", "Number", "Name", "String", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Vee.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public VeeParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class RootContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(VeeParser.Eof, 0); }
		public DeclarationsContext declarations() {
			return GetRuleContext<DeclarationsContext>(0);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			_la = TokenStream.La(1);
			if (_la==Let) {
				{
				State = 46; declarations();
				}
			}

			State = 49; expression(0);
			State = 50; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AccessContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public AccessContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ExpressionContext {
		public ITerminalNode String() { return GetToken(VeeParser.String, 0); }
		public StringContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConditionalContext : ExpressionContext {
		public ITerminalNode If() { return GetToken(VeeParser.If, 0); }
		public ThenClauseContext[] thenClause() {
			return GetRuleContexts<ThenClauseContext>();
		}
		public ThenClauseContext thenClause(int i) {
			return GetRuleContext<ThenClauseContext>(i);
		}
		public ElseClauseContext elseClause() {
			return GetRuleContext<ElseClauseContext>(0);
		}
		public ITerminalNode[] Comma() { return GetTokens(VeeParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(VeeParser.Comma, i);
		}
		public ConditionalContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Plus() { return GetToken(VeeParser.Plus, 0); }
		public ITerminalNode Minus() { return GetToken(VeeParser.Minus, 0); }
		public ITerminalNode Compl() { return GetToken(VeeParser.Compl, 0); }
		public UnaryContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeContext : ExpressionContext {
		public ExpressionContext l;
		public IToken op;
		public ExpressionContext r;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Multiply() { return GetToken(VeeParser.Multiply, 0); }
		public ITerminalNode Divide() { return GetToken(VeeParser.Divide, 0); }
		public ITerminalNode Modulo() { return GetToken(VeeParser.Modulo, 0); }
		public MultiplicativeContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicative(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ResolutionContext : ExpressionContext {
		public ITerminalNode Try() { return GetToken(VeeParser.Try, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ContinuationContext continuation() {
			return GetRuleContext<ContinuationContext>(0);
		}
		public FallbackContext fallback() {
			return GetRuleContext<FallbackContext>(0);
		}
		public ResolutionContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResolution(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberContext : ExpressionContext {
		public ITerminalNode Number() { return GetToken(VeeParser.Number, 0); }
		public NumberContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TupleContext : ExpressionContext {
		public ITerminalNode LParen() { return GetToken(VeeParser.LParen, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RParen() { return GetToken(VeeParser.RParen, 0); }
		public ITerminalNode[] Comma() { return GetTokens(VeeParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(VeeParser.Comma, i);
		}
		public TupleContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DatetimeContext : ExpressionContext {
		public ITerminalNode DateTime() { return GetToken(VeeParser.DateTime, 0); }
		public DatetimeContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatetime(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaContext : ExpressionContext {
		public ITerminalNode LParen() { return GetToken(VeeParser.LParen, 0); }
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public ITerminalNode RParen() { return GetToken(VeeParser.RParen, 0); }
		public ITerminalNode Arrow() { return GetToken(VeeParser.Arrow, 0); }
		public ITerminalNode LBrace() { return GetToken(VeeParser.LBrace, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RBrace() { return GetToken(VeeParser.RBrace, 0); }
		public LambdaContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseContext : ExpressionContext {
		public ExpressionContext l;
		public IToken op;
		public ExpressionContext r;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode And() { return GetToken(VeeParser.And, 0); }
		public ITerminalNode Xor() { return GetToken(VeeParser.Xor, 0); }
		public ITerminalNode Or() { return GetToken(VeeParser.Or, 0); }
		public BitwiseContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwise(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PipeContext : ExpressionContext {
		public ExpressionContext l;
		public IToken op;
		public ExpressionContext r;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RPipe() { return GetToken(VeeParser.RPipe, 0); }
		public PipeContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPipe(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MapContext : ExpressionContext {
		public ITerminalNode LBrace() { return GetToken(VeeParser.LBrace, 0); }
		public ITerminalNode RBrace() { return GetToken(VeeParser.RBrace, 0); }
		public PairsContext pairs() {
			return GetRuleContext<PairsContext>(0);
		}
		public ITerminalNode Lt() { return GetToken(VeeParser.Lt, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode Gt() { return GetToken(VeeParser.Gt, 0); }
		public MapContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMap(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityContext : ExpressionContext {
		public ExpressionContext l;
		public IToken op;
		public ExpressionContext r;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Eq() { return GetToken(VeeParser.Eq, 0); }
		public ITerminalNode Eeq() { return GetToken(VeeParser.Eeq, 0); }
		public ITerminalNode Deq() { return GetToken(VeeParser.Deq, 0); }
		public ITerminalNode Neq() { return GetToken(VeeParser.Neq, 0); }
		public EqualityContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CombinationContext : ExpressionContext {
		public ExpressionContext l;
		public IToken op;
		public ExpressionContext r;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Combine() { return GetToken(VeeParser.Combine, 0); }
		public CombinationContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCombination(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalNotContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Not() { return GetToken(VeeParser.Not, 0); }
		public LogicalNotContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FalseContext : ExpressionContext {
		public ITerminalNode False() { return GetToken(VeeParser.False, 0); }
		public FalseContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFalse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListContext : ExpressionContext {
		public ITerminalNode LBracket() { return GetToken(VeeParser.LBracket, 0); }
		public ITerminalNode RBracket() { return GetToken(VeeParser.RBracket, 0); }
		public DatesContext dates() {
			return GetRuleContext<DatesContext>(0);
		}
		public NumsContext nums() {
			return GetRuleContext<NumsContext>(0);
		}
		public ItemsContext items() {
			return GetRuleContext<ItemsContext>(0);
		}
		public ITerminalNode Lt() { return GetToken(VeeParser.Lt, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode Gt() { return GetToken(VeeParser.Gt, 0); }
		public ListContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisionContext : ExpressionContext {
		public ExpressionContext l;
		public IToken op;
		public ExpressionContext r;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Lt() { return GetToken(VeeParser.Lt, 0); }
		public ITerminalNode Lte() { return GetToken(VeeParser.Lte, 0); }
		public ITerminalNode Gt() { return GetToken(VeeParser.Gt, 0); }
		public ITerminalNode Gte() { return GetToken(VeeParser.Gte, 0); }
		public ComparisionContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparision(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GroupingContext : ExpressionContext {
		public ITerminalNode LParen() { return GetToken(VeeParser.LParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RParen() { return GetToken(VeeParser.RParen, 0); }
		public GroupingContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrouping(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalContext : ExpressionContext {
		public ExpressionContext l;
		public IToken op;
		public ExpressionContext r;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode AndAlso() { return GetToken(VeeParser.AndAlso, 0); }
		public ITerminalNode OrElse() { return GetToken(VeeParser.OrElse, 0); }
		public LogicalContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveContext : ExpressionContext {
		public ExpressionContext l;
		public IToken op;
		public ExpressionContext r;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Plus() { return GetToken(VeeParser.Plus, 0); }
		public ITerminalNode Minus() { return GetToken(VeeParser.Minus, 0); }
		public AdditiveContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditive(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExponentiationContext : ExpressionContext {
		public ExpressionContext l;
		public IToken op;
		public ExpressionContext r;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Pow() { return GetToken(VeeParser.Pow, 0); }
		public ExponentiationContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExponentiation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InvocationContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public InvocationContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TrueContext : ExpressionContext {
		public ITerminalNode True() { return GetToken(VeeParser.True, 0); }
		public TrueContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableContext : ExpressionContext {
		public ITerminalNode Name() { return GetToken(VeeParser.Name, 0); }
		public VariableContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				_localctx = new LogicalNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 53; ((LogicalNotContext)_localctx).op = Match(Not);
				State = 54; expression(13);
				}
				break;
			case 2:
				{
				_localctx = new UnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 55;
				((UnaryContext)_localctx).op = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Plus) | (1L << Minus) | (1L << Compl))) != 0)) ) {
					((UnaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				Consume();
				State = 56; expression(12);
				}
				break;
			case 3:
				{
				_localctx = new TrueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 57; Match(True);
				}
				break;
			case 4:
				{
				_localctx = new FalseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 58; Match(False);
				}
				break;
			case 5:
				{
				_localctx = new NumberContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 59; Match(Number);
				}
				break;
			case 6:
				{
				_localctx = new StringContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 60; Match(String);
				}
				break;
			case 7:
				{
				_localctx = new DatetimeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 61; Match(DateTime);
				}
				break;
			case 8:
				{
				_localctx = new VariableContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 62; Match(Name);
				}
				break;
			case 9:
				{
				_localctx = new ListContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 63; Match(LBracket);
				State = 71;
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 64; dates();
					}
					break;
				case 2:
					{
					State = 65; nums();
					}
					break;
				case 3:
					{
					State = 66; items();
					}
					break;
				case 4:
					{
					State = 67; Match(Lt);
					State = 68; type();
					State = 69; Match(Gt);
					}
					break;
				}
				State = 73; Match(RBracket);
				}
				break;
			case 10:
				{
				_localctx = new MapContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 75; Match(LBrace);
				State = 81;
				switch (TokenStream.La(1)) {
				case String:
					{
					State = 76; pairs();
					}
					break;
				case Lt:
					{
					State = 77; Match(Lt);
					State = 78; type();
					State = 79; Match(Gt);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 83; Match(RBrace);
				}
				break;
			case 11:
				{
				_localctx = new LambdaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 85; Match(LParen);
				State = 86; parameters();
				State = 87; Match(RParen);
				State = 88; Match(Arrow);
				State = 89; Match(LBrace);
				State = 90; expression(0);
				State = 91; Match(RBrace);
				}
				break;
			case 12:
				{
				_localctx = new TupleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 93; Match(LParen);
				State = 94; expression(0);
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 95; Match(Comma);
					State = 96; expression(0);
					}
					}
					State = 99;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( _la==Comma );
				State = 101; Match(RParen);
				}
				break;
			case 13:
				{
				_localctx = new GroupingContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 103; Match(LParen);
				State = 104; expression(0);
				State = 105; Match(RParen);
				}
				break;
			case 14:
				{
				_localctx = new ResolutionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 107; Match(Try);
				State = 108; expression(0);
				State = 111;
				switch (TokenStream.La(1)) {
				case Then:
					{
					State = 109; continuation();
					}
					break;
				case Else:
					{
					State = 110; fallback();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 15:
				{
				_localctx = new ConditionalContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 113; Match(If);
				State = 114; thenClause();
				State = 119;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 115; Match(Comma);
					State = 116; thenClause();
					}
					}
					State = 121;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 122; elseClause();
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 163;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null ) 
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 161;
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new ExponentiationContext(new ExpressionContext(_parentctx, _parentState));
						((ExponentiationContext)_localctx).l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 126;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 127; ((ExponentiationContext)_localctx).op = Match(Pow);
						State = 128; ((ExponentiationContext)_localctx).r = expression(12);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeContext(new ExpressionContext(_parentctx, _parentState));
						((MultiplicativeContext)_localctx).l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 129;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 130;
						((MultiplicativeContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Multiply) | (1L << Divide) | (1L << Modulo))) != 0)) ) {
							((MultiplicativeContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						Consume();
						State = 131; ((MultiplicativeContext)_localctx).r = expression(11);
						}
						break;
					case 3:
						{
						_localctx = new AdditiveContext(new ExpressionContext(_parentctx, _parentState));
						((AdditiveContext)_localctx).l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 132;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 133;
						((AdditiveContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==Plus || _la==Minus) ) {
							((AdditiveContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						Consume();
						State = 134; ((AdditiveContext)_localctx).r = expression(10);
						}
						break;
					case 4:
						{
						_localctx = new EqualityContext(new ExpressionContext(_parentctx, _parentState));
						((EqualityContext)_localctx).l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 135;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 136;
						((EqualityContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Eq) | (1L << Eeq) | (1L << Deq) | (1L << Neq))) != 0)) ) {
							((EqualityContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						Consume();
						State = 137; ((EqualityContext)_localctx).r = expression(9);
						}
						break;
					case 5:
						{
						_localctx = new ComparisionContext(new ExpressionContext(_parentctx, _parentState));
						((ComparisionContext)_localctx).l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 138;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 139;
						((ComparisionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Lt) | (1L << Gt) | (1L << Lte) | (1L << Gte))) != 0)) ) {
							((ComparisionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						Consume();
						State = 140; ((ComparisionContext)_localctx).r = expression(8);
						}
						break;
					case 6:
						{
						_localctx = new BitwiseContext(new ExpressionContext(_parentctx, _parentState));
						((BitwiseContext)_localctx).l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 141;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 142;
						((BitwiseContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Xor) | (1L << And) | (1L << Or))) != 0)) ) {
							((BitwiseContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						Consume();
						State = 143; ((BitwiseContext)_localctx).r = expression(7);
						}
						break;
					case 7:
						{
						_localctx = new LogicalContext(new ExpressionContext(_parentctx, _parentState));
						((LogicalContext)_localctx).l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 144;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 145;
						((LogicalContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==AndAlso || _la==OrElse) ) {
							((LogicalContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						Consume();
						State = 146; ((LogicalContext)_localctx).r = expression(6);
						}
						break;
					case 8:
						{
						_localctx = new CombinationContext(new ExpressionContext(_parentctx, _parentState));
						((CombinationContext)_localctx).l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 147;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 148; ((CombinationContext)_localctx).op = Match(Combine);
						State = 149; ((CombinationContext)_localctx).r = expression(5);
						}
						break;
					case 9:
						{
						_localctx = new PipeContext(new ExpressionContext(_parentctx, _parentState));
						((PipeContext)_localctx).l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 150;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 151; ((PipeContext)_localctx).op = Match(RPipe);
						State = 152; ((PipeContext)_localctx).r = expression(4);
						}
						break;
					case 10:
						{
						_localctx = new AccessContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 153;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 155;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 154; member();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 157;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
						}
						break;
					case 11:
						{
						_localctx = new InvocationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 159;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 160; arguments();
						}
						break;
					}
					} 
				}
				State = 165;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DatesContext : ParserRuleContext {
		public IToken from;
		public IToken to;
		public ITerminalNode[] Hash() { return GetTokens(VeeParser.Hash); }
		public ITerminalNode Hash(int i) {
			return GetToken(VeeParser.Hash, i);
		}
		public IncrContext incr() {
			return GetRuleContext<IncrContext>(0);
		}
		public ITerminalNode[] Date() { return GetTokens(VeeParser.Date); }
		public ITerminalNode Date(int i) {
			return GetToken(VeeParser.Date, i);
		}
		public DatesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dates; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDates(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatesContext dates() {
		DatesContext _localctx = new DatesContext(Context, State);
		EnterRule(_localctx, 4, RULE_dates);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166; Match(Hash);
			State = 167; _localctx.from = Match(Date);
			State = 168; incr();
			State = 169; _localctx.to = Match(Date);
			State = 170; Match(Hash);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumsContext : ParserRuleContext {
		public IntContext from;
		public IntContext to;
		public IncrContext incr() {
			return GetRuleContext<IncrContext>(0);
		}
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public NumsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nums; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNums(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumsContext nums() {
		NumsContext _localctx = new NumsContext(Context, State);
		EnterRule(_localctx, 6, RULE_nums);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172; _localctx.from = @int();
			State = 173; incr();
			State = 174; _localctx.to = @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		public ITerminalNode Number() { return GetToken(VeeParser.Number, 0); }
		public ITerminalNode Plus() { return GetToken(VeeParser.Plus, 0); }
		public ITerminalNode Minus() { return GetToken(VeeParser.Minus, 0); }
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(Context, State);
		EnterRule(_localctx, 8, RULE_int);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			_la = TokenStream.La(1);
			if (_la==Plus || _la==Minus) {
				{
				State = 176;
				_la = TokenStream.La(1);
				if ( !(_la==Plus || _la==Minus) ) {
				ErrorHandler.RecoverInline(this);
				}
				Consume();
				}
			}

			State = 179; Match(Number);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncrContext : ParserRuleContext {
		public ITerminalNode[] Range() { return GetTokens(VeeParser.Range); }
		public ITerminalNode Range(int i) {
			return GetToken(VeeParser.Range, i);
		}
		public ITerminalNode Number() { return GetToken(VeeParser.Number, 0); }
		public ITerminalNode Plus() { return GetToken(VeeParser.Plus, 0); }
		public ITerminalNode Minus() { return GetToken(VeeParser.Minus, 0); }
		public IncrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncrContext incr() {
		IncrContext _localctx = new IncrContext(Context, State);
		EnterRule(_localctx, 10, RULE_incr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181; Match(Range);
			State = 185;
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 182;
				_la = TokenStream.La(1);
				if ( !(_la==Plus || _la==Minus) ) {
				ErrorHandler.RecoverInline(this);
				}
				Consume();
				State = 183; Match(Number);
				State = 184; Match(Range);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairsContext : ParserRuleContext {
		public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(VeeParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(VeeParser.Comma, i);
		}
		public PairsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pairs; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPairs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairsContext pairs() {
		PairsContext _localctx = new PairsContext(Context, State);
		EnterRule(_localctx, 12, RULE_pairs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187; pair();
			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 188; Match(Comma);
				State = 189; pair();
				}
				}
				State = 194;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		public ITerminalNode String() { return GetToken(VeeParser.String, 0); }
		public ITerminalNode Colon() { return GetToken(VeeParser.Colon, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 14, RULE_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195; Match(String);
			State = 196; Match(Colon);
			State = 197; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(VeeParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(VeeParser.Comma, i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 16, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			_la = TokenStream.La(1);
			if (_la==Name) {
				{
				State = 199; parameter();
				}
			}

			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 202; Match(Comma);
				State = 203; parameter();
				}
				}
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public ITerminalNode Name() { return GetToken(VeeParser.Name, 0); }
		public ITerminalNode Colon() { return GetToken(VeeParser.Colon, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 18, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209; Match(Name);
			State = 210; Match(Colon);
			State = 211; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItemsContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(VeeParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(VeeParser.Comma, i);
		}
		public ItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_items; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItems(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItemsContext items() {
		ItemsContext _localctx = new ItemsContext(Context, State);
		EnterRule(_localctx, 20, RULE_items);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213; expression(0);
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 214; Match(Comma);
				State = 215; expression(0);
				}
				}
				State = 220;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ITerminalNode LParen() { return GetToken(VeeParser.LParen, 0); }
		public ITerminalNode RParen() { return GetToken(VeeParser.RParen, 0); }
		public GenericArgsContext genericArgs() {
			return GetRuleContext<GenericArgsContext>(0);
		}
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(VeeParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(VeeParser.Comma, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 22, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			_la = TokenStream.La(1);
			if (_la==Lt) {
				{
				State = 221; genericArgs();
				}
			}

			State = 224; Match(LParen);
			State = 226;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBracket) | (1L << LBrace) | (1L << LParen) | (1L << Plus) | (1L << Minus) | (1L << Compl) | (1L << Not) | (1L << If) | (1L << Try) | (1L << True) | (1L << False) | (1L << DateTime) | (1L << Number) | (1L << Name) | (1L << String))) != 0)) {
				{
				State = 225; argument();
				}
			}

			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 228; Match(Comma);
				State = 229; argument();
				}
				}
				State = 234;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 235; Match(RParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericArgsContext : ParserRuleContext {
		public ITerminalNode Lt() { return GetToken(VeeParser.Lt, 0); }
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode Gt() { return GetToken(VeeParser.Gt, 0); }
		public ITerminalNode[] Comma() { return GetTokens(VeeParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(VeeParser.Comma, i);
		}
		public GenericArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericArgs; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericArgs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericArgsContext genericArgs() {
		GenericArgsContext _localctx = new GenericArgsContext(Context, State);
		EnterRule(_localctx, 24, RULE_genericArgs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237; Match(Lt);
			State = 238; type();
			State = 243;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 239; Match(Comma);
				State = 240; type();
				}
				}
				State = 245;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 246; Match(Gt);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Name() { return GetToken(VeeParser.Name, 0); }
		public ITerminalNode Colon() { return GetToken(VeeParser.Colon, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 26, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250;
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 248; Match(Name);
				State = 249; Match(Colon);
				}
				break;
			}
			State = 252; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberContext : ParserRuleContext {
		public ITerminalNode LBracket() { return GetToken(VeeParser.LBracket, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RBracket() { return GetToken(VeeParser.RBracket, 0); }
		public ITerminalNode Dot() { return GetToken(VeeParser.Dot, 0); }
		public ITerminalNode Name() { return GetToken(VeeParser.Name, 0); }
		public MemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberContext member() {
		MemberContext _localctx = new MemberContext(Context, State);
		EnterRule(_localctx, 28, RULE_member);
		try {
			State = 260;
			switch (TokenStream.La(1)) {
			case LBracket:
				EnterOuterAlt(_localctx, 1);
				{
				State = 254; Match(LBracket);
				State = 255; expression(0);
				State = 256; Match(RBracket);
				}
				break;
			case Dot:
				EnterOuterAlt(_localctx, 2);
				{
				State = 258; Match(Dot);
				State = 259; Match(Name);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode Name() { return GetToken(VeeParser.Name, 0); }
		public ITerminalNode Lt() { return GetToken(VeeParser.Lt, 0); }
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode Gt() { return GetToken(VeeParser.Gt, 0); }
		public ITerminalNode[] Comma() { return GetTokens(VeeParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(VeeParser.Comma, i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 30, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262; Match(Name);
			State = 274;
			_la = TokenStream.La(1);
			if (_la==Lt) {
				{
				State = 263; Match(Lt);
				State = 264; type();
				State = 269;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==Comma) {
					{
					{
					State = 265; Match(Comma);
					State = 266; type();
					}
					}
					State = 271;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 272; Match(Gt);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThenClauseContext : ParserRuleContext {
		public ExpressionContext @if;
		public ExpressionContext then;
		public ITerminalNode Then() { return GetToken(VeeParser.Then, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ThenClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thenClause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThenClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ThenClauseContext thenClause() {
		ThenClauseContext _localctx = new ThenClauseContext(Context, State);
		EnterRule(_localctx, 32, RULE_thenClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276; _localctx.@if = expression(0);
			State = 277; Match(Then);
			State = 278; _localctx.then = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseClauseContext : ParserRuleContext {
		public ExpressionContext @else;
		public ITerminalNode Else() { return GetToken(VeeParser.Else, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ElseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseClause; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseClauseContext elseClause() {
		ElseClauseContext _localctx = new ElseClauseContext(Context, State);
		EnterRule(_localctx, 34, RULE_elseClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280; Match(Else);
			State = 281; _localctx.@else = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinuationContext : ParserRuleContext {
		public HandlerContext success;
		public HandlerContext failure;
		public ITerminalNode Then() { return GetToken(VeeParser.Then, 0); }
		public ITerminalNode Else() { return GetToken(VeeParser.Else, 0); }
		public HandlerContext[] handler() {
			return GetRuleContexts<HandlerContext>();
		}
		public HandlerContext handler(int i) {
			return GetRuleContext<HandlerContext>(i);
		}
		public ContinuationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continuation; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinuation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinuationContext continuation() {
		ContinuationContext _localctx = new ContinuationContext(Context, State);
		EnterRule(_localctx, 36, RULE_continuation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283; Match(Then);
			State = 284; _localctx.success = handler();
			State = 285; Match(Else);
			State = 286; _localctx.failure = handler();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerContext : ParserRuleContext {
		public ITerminalNode Name() { return GetToken(VeeParser.Name, 0); }
		public ITerminalNode Arrow() { return GetToken(VeeParser.Arrow, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public HandlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handler; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHandler(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HandlerContext handler() {
		HandlerContext _localctx = new HandlerContext(Context, State);
		EnterRule(_localctx, 38, RULE_handler);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288; Match(Name);
			State = 289; Match(Arrow);
			State = 290; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FallbackContext : ParserRuleContext {
		public ITerminalNode Else() { return GetToken(VeeParser.Else, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FallbackContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fallback; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFallback(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FallbackContext fallback() {
		FallbackContext _localctx = new FallbackContext(Context, State);
		EnterRule(_localctx, 40, RULE_fallback);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292; Match(Else);
			State = 293; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationsContext : ParserRuleContext {
		public ITerminalNode Let() { return GetToken(VeeParser.Let, 0); }
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public ITerminalNode Return() { return GetToken(VeeParser.Return, 0); }
		public ITerminalNode[] Comma() { return GetTokens(VeeParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(VeeParser.Comma, i);
		}
		public DeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarations; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationsContext declarations() {
		DeclarationsContext _localctx = new DeclarationsContext(Context, State);
		EnterRule(_localctx, 42, RULE_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295; Match(Let);
			State = 296; declaration();
			State = 301;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 297; Match(Comma);
				State = 298; declaration();
				}
				}
				State = 303;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 304; Match(Return);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public ITerminalNode[] Name() { return GetTokens(VeeParser.Name); }
		public ITerminalNode Name(int i) {
			return GetToken(VeeParser.Name, i);
		}
		public ITerminalNode Colon() { return GetToken(VeeParser.Colon, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode[] Comma() { return GetTokens(VeeParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(VeeParser.Comma, i);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVeeVisitor<TResult> typedVisitor = visitor as IVeeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 44, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306; Match(Name);
			State = 311;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Comma) {
				{
				{
				State = 307; Match(Comma);
				State = 308; Match(Name);
				}
				}
				State = 313;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 314; Match(Colon);
			State = 315; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 7);
		case 5: return Precpred(Context, 6);
		case 6: return Precpred(Context, 5);
		case 7: return Precpred(Context, 4);
		case 8: return Precpred(Context, 3);
		case 9: return Precpred(Context, 16);
		case 10: return Precpred(Context, 15);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x34\x140\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x3\x2\x5\x2\x32\n\x2\x3\x2\x3"+
		"\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3J\n\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3T\n\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x6\x3\x64\n\x3\r\x3\xE\x3\x65\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3r\n\x3\x3\x3\x3\x3\x3\x3\x3\x3\a\x3x\n\x3"+
		"\f\x3\xE\x3{\v\x3\x3\x3\x3\x3\x5\x3\x7F\n\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x6\x3\x9E\n\x3\r\x3\xE\x3\x9F\x3\x3\x3\x3\a\x3\xA4\n\x3\f\x3"+
		"\xE\x3\xA7\v\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x6\x5\x6\xB4\n\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x5\a\xBC\n"+
		"\a\x3\b\x3\b\x3\b\a\b\xC1\n\b\f\b\xE\b\xC4\v\b\x3\t\x3\t\x3\t\x3\t\x3"+
		"\n\x5\n\xCB\n\n\x3\n\x3\n\a\n\xCF\n\n\f\n\xE\n\xD2\v\n\x3\v\x3\v\x3\v"+
		"\x3\v\x3\f\x3\f\x3\f\a\f\xDB\n\f\f\f\xE\f\xDE\v\f\x3\r\x5\r\xE1\n\r\x3"+
		"\r\x3\r\x5\r\xE5\n\r\x3\r\x3\r\a\r\xE9\n\r\f\r\xE\r\xEC\v\r\x3\r\x3\r"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\a\xE\xF4\n\xE\f\xE\xE\xE\xF7\v\xE\x3\xE\x3\xE"+
		"\x3\xF\x3\xF\x5\xF\xFD\n\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\x5\x10\x107\n\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\a\x11"+
		"\x10E\n\x11\f\x11\xE\x11\x111\v\x11\x3\x11\x3\x11\x5\x11\x115\n\x11\x3"+
		"\x12\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3"+
		"\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x17\x3"+
		"\x17\x3\x17\x3\x17\a\x17\x12E\n\x17\f\x17\xE\x17\x131\v\x17\x3\x17\x3"+
		"\x17\x3\x18\x3\x18\x3\x18\a\x18\x138\n\x18\f\x18\xE\x18\x13B\v\x18\x3"+
		"\x18\x3\x18\x3\x18\x3\x18\x2\x3\x4\x19\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16"+
		"\x18\x1A\x1C\x1E \"$&(*,.\x2\t\x4\x2\x13\x14  \x3\x2\x10\x12\x3\x2\x13"+
		"\x14\x3\x2\x15\x18\x3\x2\x19\x1C\x3\x2\x1D\x1F\x3\x2$%\x15A\x2\x31\x3"+
		"\x2\x2\x2\x4~\x3\x2\x2\x2\x6\xA8\x3\x2\x2\x2\b\xAE\x3\x2\x2\x2\n\xB3\x3"+
		"\x2\x2\x2\f\xB7\x3\x2\x2\x2\xE\xBD\x3\x2\x2\x2\x10\xC5\x3\x2\x2\x2\x12"+
		"\xCA\x3\x2\x2\x2\x14\xD3\x3\x2\x2\x2\x16\xD7\x3\x2\x2\x2\x18\xE0\x3\x2"+
		"\x2\x2\x1A\xEF\x3\x2\x2\x2\x1C\xFC\x3\x2\x2\x2\x1E\x106\x3\x2\x2\x2 \x108"+
		"\x3\x2\x2\x2\"\x116\x3\x2\x2\x2$\x11A\x3\x2\x2\x2&\x11D\x3\x2\x2\x2(\x122"+
		"\x3\x2\x2\x2*\x126\x3\x2\x2\x2,\x129\x3\x2\x2\x2.\x134\x3\x2\x2\x2\x30"+
		"\x32\x5,\x17\x2\x31\x30\x3\x2\x2\x2\x31\x32\x3\x2\x2\x2\x32\x33\x3\x2"+
		"\x2\x2\x33\x34\x5\x4\x3\x2\x34\x35\a\x2\x2\x3\x35\x3\x3\x2\x2\x2\x36\x37"+
		"\b\x3\x1\x2\x37\x38\a&\x2\x2\x38\x7F\x5\x4\x3\xF\x39:\t\x2\x2\x2:\x7F"+
		"\x5\x4\x3\xE;\x7F\a-\x2\x2<\x7F\a.\x2\x2=\x7F\a\x31\x2\x2>\x7F\a\x33\x2"+
		"\x2?\x7F\a\x30\x2\x2@\x7F\a\x32\x2\x2\x41I\a\x3\x2\x2\x42J\x5\x6\x4\x2"+
		"\x43J\x5\b\x5\x2\x44J\x5\x16\f\x2\x45\x46\a\x19\x2\x2\x46G\x5 \x11\x2"+
		"GH\a\x1A\x2\x2HJ\x3\x2\x2\x2I\x42\x3\x2\x2\x2I\x43\x3\x2\x2\x2I\x44\x3"+
		"\x2\x2\x2I\x45\x3\x2\x2\x2JK\x3\x2\x2\x2KL\a\x4\x2\x2L\x7F\x3\x2\x2\x2"+
		"MS\a\x5\x2\x2NT\x5\xE\b\x2OP\a\x19\x2\x2PQ\x5 \x11\x2QR\a\x1A\x2\x2RT"+
		"\x3\x2\x2\x2SN\x3\x2\x2\x2SO\x3\x2\x2\x2TU\x3\x2\x2\x2UV\a\x6\x2\x2V\x7F"+
		"\x3\x2\x2\x2WX\a\a\x2\x2XY\x5\x12\n\x2YZ\a\b\x2\x2Z[\a\xE\x2\x2[\\\a\x5"+
		"\x2\x2\\]\x5\x4\x3\x2]^\a\x6\x2\x2^\x7F\x3\x2\x2\x2_`\a\a\x2\x2`\x63\x5"+
		"\x4\x3\x2\x61\x62\a\t\x2\x2\x62\x64\x5\x4\x3\x2\x63\x61\x3\x2\x2\x2\x64"+
		"\x65\x3\x2\x2\x2\x65\x63\x3\x2\x2\x2\x65\x66\x3\x2\x2\x2\x66g\x3\x2\x2"+
		"\x2gh\a\b\x2\x2h\x7F\x3\x2\x2\x2ij\a\a\x2\x2jk\x5\x4\x3\x2kl\a\b\x2\x2"+
		"l\x7F\x3\x2\x2\x2mn\a*\x2\x2nq\x5\x4\x3\x2or\x5&\x14\x2pr\x5*\x16\x2q"+
		"o\x3\x2\x2\x2qp\x3\x2\x2\x2r\x7F\x3\x2\x2\x2st\a)\x2\x2ty\x5\"\x12\x2"+
		"uv\a\t\x2\x2vx\x5\"\x12\x2wu\x3\x2\x2\x2x{\x3\x2\x2\x2yw\x3\x2\x2\x2y"+
		"z\x3\x2\x2\x2z|\x3\x2\x2\x2{y\x3\x2\x2\x2|}\x5$\x13\x2}\x7F\x3\x2\x2\x2"+
		"~\x36\x3\x2\x2\x2~\x39\x3\x2\x2\x2~;\x3\x2\x2\x2~<\x3\x2\x2\x2~=\x3\x2"+
		"\x2\x2~>\x3\x2\x2\x2~?\x3\x2\x2\x2~@\x3\x2\x2\x2~\x41\x3\x2\x2\x2~M\x3"+
		"\x2\x2\x2~W\x3\x2\x2\x2~_\x3\x2\x2\x2~i\x3\x2\x2\x2~m\x3\x2\x2\x2~s\x3"+
		"\x2\x2\x2\x7F\xA5\x3\x2\x2\x2\x80\x81\f\r\x2\x2\x81\x82\a\xF\x2\x2\x82"+
		"\xA4\x5\x4\x3\xE\x83\x84\f\f\x2\x2\x84\x85\t\x3\x2\x2\x85\xA4\x5\x4\x3"+
		"\r\x86\x87\f\v\x2\x2\x87\x88\t\x4\x2\x2\x88\xA4\x5\x4\x3\f\x89\x8A\f\n"+
		"\x2\x2\x8A\x8B\t\x5\x2\x2\x8B\xA4\x5\x4\x3\v\x8C\x8D\f\t\x2\x2\x8D\x8E"+
		"\t\x6\x2\x2\x8E\xA4\x5\x4\x3\n\x8F\x90\f\b\x2\x2\x90\x91\t\a\x2\x2\x91"+
		"\xA4\x5\x4\x3\t\x92\x93\f\a\x2\x2\x93\x94\t\b\x2\x2\x94\xA4\x5\x4\x3\b"+
		"\x95\x96\f\x6\x2\x2\x96\x97\a#\x2\x2\x97\xA4\x5\x4\x3\a\x98\x99\f\x5\x2"+
		"\x2\x99\x9A\a!\x2\x2\x9A\xA4\x5\x4\x3\x6\x9B\x9D\f\x12\x2\x2\x9C\x9E\x5"+
		"\x1E\x10\x2\x9D\x9C\x3\x2\x2\x2\x9E\x9F\x3\x2\x2\x2\x9F\x9D\x3\x2\x2\x2"+
		"\x9F\xA0\x3\x2\x2\x2\xA0\xA4\x3\x2\x2\x2\xA1\xA2\f\x11\x2\x2\xA2\xA4\x5"+
		"\x18\r\x2\xA3\x80\x3\x2\x2\x2\xA3\x83\x3\x2\x2\x2\xA3\x86\x3\x2\x2\x2"+
		"\xA3\x89\x3\x2\x2\x2\xA3\x8C\x3\x2\x2\x2\xA3\x8F\x3\x2\x2\x2\xA3\x92\x3"+
		"\x2\x2\x2\xA3\x95\x3\x2\x2\x2\xA3\x98\x3\x2\x2\x2\xA3\x9B\x3\x2\x2\x2"+
		"\xA3\xA1\x3\x2\x2\x2\xA4\xA7\x3\x2\x2\x2\xA5\xA3\x3\x2\x2\x2\xA5\xA6\x3"+
		"\x2\x2\x2\xA6\x5\x3\x2\x2\x2\xA7\xA5\x3\x2\x2\x2\xA8\xA9\a\f\x2\x2\xA9"+
		"\xAA\a/\x2\x2\xAA\xAB\x5\f\a\x2\xAB\xAC\a/\x2\x2\xAC\xAD\a\f\x2\x2\xAD"+
		"\a\x3\x2\x2\x2\xAE\xAF\x5\n\x6\x2\xAF\xB0\x5\f\a\x2\xB0\xB1\x5\n\x6\x2"+
		"\xB1\t\x3\x2\x2\x2\xB2\xB4\t\x4\x2\x2\xB3\xB2\x3\x2\x2\x2\xB3\xB4\x3\x2"+
		"\x2\x2\xB4\xB5\x3\x2\x2\x2\xB5\xB6\a\x31\x2\x2\xB6\v\x3\x2\x2\x2\xB7\xBB"+
		"\a\r\x2\x2\xB8\xB9\t\x4\x2\x2\xB9\xBA\a\x31\x2\x2\xBA\xBC\a\r\x2\x2\xBB"+
		"\xB8\x3\x2\x2\x2\xBB\xBC\x3\x2\x2\x2\xBC\r\x3\x2\x2\x2\xBD\xC2\x5\x10"+
		"\t\x2\xBE\xBF\a\t\x2\x2\xBF\xC1\x5\x10\t\x2\xC0\xBE\x3\x2\x2\x2\xC1\xC4"+
		"\x3\x2\x2\x2\xC2\xC0\x3\x2\x2\x2\xC2\xC3\x3\x2\x2\x2\xC3\xF\x3\x2\x2\x2"+
		"\xC4\xC2\x3\x2\x2\x2\xC5\xC6\a\x33\x2\x2\xC6\xC7\a\v\x2\x2\xC7\xC8\x5"+
		"\x4\x3\x2\xC8\x11\x3\x2\x2\x2\xC9\xCB\x5\x14\v\x2\xCA\xC9\x3\x2\x2\x2"+
		"\xCA\xCB\x3\x2\x2\x2\xCB\xD0\x3\x2\x2\x2\xCC\xCD\a\t\x2\x2\xCD\xCF\x5"+
		"\x14\v\x2\xCE\xCC\x3\x2\x2\x2\xCF\xD2\x3\x2\x2\x2\xD0\xCE\x3\x2\x2\x2"+
		"\xD0\xD1\x3\x2\x2\x2\xD1\x13\x3\x2\x2\x2\xD2\xD0\x3\x2\x2\x2\xD3\xD4\a"+
		"\x32\x2\x2\xD4\xD5\a\v\x2\x2\xD5\xD6\x5 \x11\x2\xD6\x15\x3\x2\x2\x2\xD7"+
		"\xDC\x5\x4\x3\x2\xD8\xD9\a\t\x2\x2\xD9\xDB\x5\x4\x3\x2\xDA\xD8\x3\x2\x2"+
		"\x2\xDB\xDE\x3\x2\x2\x2\xDC\xDA\x3\x2\x2\x2\xDC\xDD\x3\x2\x2\x2\xDD\x17"+
		"\x3\x2\x2\x2\xDE\xDC\x3\x2\x2\x2\xDF\xE1\x5\x1A\xE\x2\xE0\xDF\x3\x2\x2"+
		"\x2\xE0\xE1\x3\x2\x2\x2\xE1\xE2\x3\x2\x2\x2\xE2\xE4\a\a\x2\x2\xE3\xE5"+
		"\x5\x1C\xF\x2\xE4\xE3\x3\x2\x2\x2\xE4\xE5\x3\x2\x2\x2\xE5\xEA\x3\x2\x2"+
		"\x2\xE6\xE7\a\t\x2\x2\xE7\xE9\x5\x1C\xF\x2\xE8\xE6\x3\x2\x2\x2\xE9\xEC"+
		"\x3\x2\x2\x2\xEA\xE8\x3\x2\x2\x2\xEA\xEB\x3\x2\x2\x2\xEB\xED\x3\x2\x2"+
		"\x2\xEC\xEA\x3\x2\x2\x2\xED\xEE\a\b\x2\x2\xEE\x19\x3\x2\x2\x2\xEF\xF0"+
		"\a\x19\x2\x2\xF0\xF5\x5 \x11\x2\xF1\xF2\a\t\x2\x2\xF2\xF4\x5 \x11\x2\xF3"+
		"\xF1\x3\x2\x2\x2\xF4\xF7\x3\x2\x2\x2\xF5\xF3\x3\x2\x2\x2\xF5\xF6\x3\x2"+
		"\x2\x2\xF6\xF8\x3\x2\x2\x2\xF7\xF5\x3\x2\x2\x2\xF8\xF9\a\x1A\x2\x2\xF9"+
		"\x1B\x3\x2\x2\x2\xFA\xFB\a\x32\x2\x2\xFB\xFD\a\v\x2\x2\xFC\xFA\x3\x2\x2"+
		"\x2\xFC\xFD\x3\x2\x2\x2\xFD\xFE\x3\x2\x2\x2\xFE\xFF\x5\x4\x3\x2\xFF\x1D"+
		"\x3\x2\x2\x2\x100\x101\a\x3\x2\x2\x101\x102\x5\x4\x3\x2\x102\x103\a\x4"+
		"\x2\x2\x103\x107\x3\x2\x2\x2\x104\x105\a\"\x2\x2\x105\x107\a\x32\x2\x2"+
		"\x106\x100\x3\x2\x2\x2\x106\x104\x3\x2\x2\x2\x107\x1F\x3\x2\x2\x2\x108"+
		"\x114\a\x32\x2\x2\x109\x10A\a\x19\x2\x2\x10A\x10F\x5 \x11\x2\x10B\x10C"+
		"\a\t\x2\x2\x10C\x10E\x5 \x11\x2\x10D\x10B\x3\x2\x2\x2\x10E\x111\x3\x2"+
		"\x2\x2\x10F\x10D\x3\x2\x2\x2\x10F\x110\x3\x2\x2\x2\x110\x112\x3\x2\x2"+
		"\x2\x111\x10F\x3\x2\x2\x2\x112\x113\a\x1A\x2\x2\x113\x115\x3\x2\x2\x2"+
		"\x114\x109\x3\x2\x2\x2\x114\x115\x3\x2\x2\x2\x115!\x3\x2\x2\x2\x116\x117"+
		"\x5\x4\x3\x2\x117\x118\a+\x2\x2\x118\x119\x5\x4\x3\x2\x119#\x3\x2\x2\x2"+
		"\x11A\x11B\a,\x2\x2\x11B\x11C\x5\x4\x3\x2\x11C%\x3\x2\x2\x2\x11D\x11E"+
		"\a+\x2\x2\x11E\x11F\x5(\x15\x2\x11F\x120\a,\x2\x2\x120\x121\x5(\x15\x2"+
		"\x121\'\x3\x2\x2\x2\x122\x123\a\x32\x2\x2\x123\x124\a\xE\x2\x2\x124\x125"+
		"\x5\x4\x3\x2\x125)\x3\x2\x2\x2\x126\x127\a,\x2\x2\x127\x128\x5\x4\x3\x2"+
		"\x128+\x3\x2\x2\x2\x129\x12A\a\'\x2\x2\x12A\x12F\x5.\x18\x2\x12B\x12C"+
		"\a\t\x2\x2\x12C\x12E\x5.\x18\x2\x12D\x12B\x3\x2\x2\x2\x12E\x131\x3\x2"+
		"\x2\x2\x12F\x12D\x3\x2\x2\x2\x12F\x130\x3\x2\x2\x2\x130\x132\x3\x2\x2"+
		"\x2\x131\x12F\x3\x2\x2\x2\x132\x133\a(\x2\x2\x133-\x3\x2\x2\x2\x134\x139"+
		"\a\x32\x2\x2\x135\x136\a\t\x2\x2\x136\x138\a\x32\x2\x2\x137\x135\x3\x2"+
		"\x2\x2\x138\x13B\x3\x2\x2\x2\x139\x137\x3\x2\x2\x2\x139\x13A\x3\x2\x2"+
		"\x2\x13A\x13C\x3\x2\x2\x2\x13B\x139\x3\x2\x2\x2\x13C\x13D\a\v\x2\x2\x13D"+
		"\x13E\x5\x4\x3\x2\x13E/\x3\x2\x2\x2\x1C\x31IS\x65qy~\x9F\xA3\xA5\xB3\xBB"+
		"\xC2\xCA\xD0\xDC\xE0\xE4\xEA\xF5\xFC\x106\x10F\x114\x12F\x139";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Vee
