//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/work/Vee/Vee\Vee.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class VeeParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LBracket=1, RBracket=2, LBrace=3, RBrace=4, LParen=5, RParen=6, Comma=7, 
		Quiz=8, Colon=9, Range=10, Arrow=11, Lambda=12, Pow=13, Multiply=14, Divide=15, 
		Modulo=16, Plus=17, Minus=18, Eq=19, Neq=20, Lt=21, Gt=22, Lte=23, Gte=24, 
		Pipe=25, RPipe=26, Dot=27, Combine=28, AndAlso=29, OrElse=30, Not=31, 
		TypeOf=32, Let=33, Return=34, If=35, Is=36, When=37, Then=38, Else=39, 
		True=40, False=41, New=42, As=43, Type=44, StringType=45, NumberType=46, 
		BooleanType=47, EnumType=48, TupleType=49, RecordType=50, ListType=51, 
		HashType=52, TryType=53, OptionType=54, Number=55, Name=56, String=57, 
		WS=58;
	public const int
		RULE_root = 0, RULE_expression = 1, RULE_conditions = 2, RULE_condition = 3, 
		RULE_patterns = 4, RULE_match = 5, RULE_pattern = 6, RULE_constant = 7, 
		RULE_nameOrConstant = 8, RULE_typePattern = 9, RULE_listPattern = 10, 
		RULE_mapPattern = 11, RULE_mapPairPattern = 12, RULE_recordPattern = 13, 
		RULE_recPairPattern = 14, RULE_tuplePattern = 15, RULE_tupleItemPattern = 16, 
		RULE_enumPattern = 17, RULE_rest = 18, RULE_operators = 19, RULE_member = 20, 
		RULE_binaryOperators = 21, RULE_unaryOperators = 22, RULE_nums = 23, RULE_recordPair = 24, 
		RULE_mapPair = 25, RULE_lambdaParams = 26, RULE_listItems = 27, RULE_arguments = 28, 
		RULE_argument = 29, RULE_type = 30, RULE_typeName = 31, RULE_declarations = 32, 
		RULE_extraction = 33, RULE_alias = 34, RULE_declaration = 35, RULE_typeDefs = 36, 
		RULE_typeDef = 37;
	public static readonly string[] ruleNames = {
		"root", "expression", "conditions", "condition", "patterns", "match", 
		"pattern", "constant", "nameOrConstant", "typePattern", "listPattern", 
		"mapPattern", "mapPairPattern", "recordPattern", "recPairPattern", "tuplePattern", 
		"tupleItemPattern", "enumPattern", "rest", "operators", "member", "binaryOperators", 
		"unaryOperators", "nums", "recordPair", "mapPair", "lambdaParams", "listItems", 
		"arguments", "argument", "type", "typeName", "declarations", "extraction", 
		"alias", "declaration", "typeDefs", "typeDef"
	};

	private static readonly string[] _LiteralNames = {
		null, "'['", "']'", "'{'", "'}'", "'('", "')'", "','", "'?'", "':'", "'..'", 
		"'->'", "'\\'", "'^'", "'*'", "'/'", "'%'", "'+'", "'-'", "'='", "'!='", 
		"'<'", "'>'", "'<='", "'>='", "'|'", "'|>'", "'.'", "'::'", "'and'", "'or'", 
		"'not'", "'typeof'", "'let'", "'return'", "'if'", "'is'", "'when'", "'then'", 
		"'else'", "'true'", "'false'", "'new'", "'as'", "'type'", "'string'", 
		"'number'", "'boolean'", "'enum'", "'tuple'", "'record'", "'list'", "'hash'", 
		"'try'", "'option'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LBracket", "RBracket", "LBrace", "RBrace", "LParen", "RParen", 
		"Comma", "Quiz", "Colon", "Range", "Arrow", "Lambda", "Pow", "Multiply", 
		"Divide", "Modulo", "Plus", "Minus", "Eq", "Neq", "Lt", "Gt", "Lte", "Gte", 
		"Pipe", "RPipe", "Dot", "Combine", "AndAlso", "OrElse", "Not", "TypeOf", 
		"Let", "Return", "If", "Is", "When", "Then", "Else", "True", "False", 
		"New", "As", "Type", "StringType", "NumberType", "BooleanType", "EnumType", 
		"TupleType", "RecordType", "ListType", "HashType", "TryType", "OptionType", 
		"Number", "Name", "String", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Vee.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static VeeParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public VeeParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public VeeParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class RootContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(VeeParser.Eof, 0); }
		public ITerminalNode Return() { return GetToken(VeeParser.Return, 0); }
		public TypeDefsContext typeDefs() {
			return GetRuleContext<TypeDefsContext>(0);
		}
		public DeclarationsContext declarations() {
			return GetRuleContext<DeclarationsContext>(0);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterRoot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitRoot(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Let) | (1L << Return) | (1L << Type))) != 0)) {
				{
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Type) {
					{
					State = 76; typeDefs();
					}
				}

				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Let) {
					{
					State = 79; declarations();
					}
				}

				State = 82; Match(Return);
				}
			}

			State = 85; expression(0);
			State = 86; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class InitContext : ExpressionContext {
		public ITerminalNode New() { return GetToken(VeeParser.New, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode Name() { return GetToken(VeeParser.Name, 0); }
		public InitContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitInit(this);
		}
	}
	public partial class LogicalNotContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Not() { return GetToken(VeeParser.Not, 0); }
		public LogicalNotContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterLogicalNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitLogicalNot(this);
		}
	}
	public partial class AccessContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Dot() { return GetToken(VeeParser.Dot, 0); }
		public MemberContext member() {
			return GetRuleContext<MemberContext>(0);
		}
		public AccessContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitAccess(this);
		}
	}
	public partial class TestContext : ExpressionContext {
		public ITerminalNode If() { return GetToken(VeeParser.If, 0); }
		public ITerminalNode Else() { return GetToken(VeeParser.Else, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConditionsContext[] conditions() {
			return GetRuleContexts<ConditionsContext>();
		}
		public ConditionsContext conditions(int i) {
			return GetRuleContext<ConditionsContext>(i);
		}
		public PatternsContext[] patterns() {
			return GetRuleContexts<PatternsContext>();
		}
		public PatternsContext patterns(int i) {
			return GetRuleContext<PatternsContext>(i);
		}
		public TestContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterTest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitTest(this);
		}
	}
	public partial class UnaryContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Plus() { return GetToken(VeeParser.Plus, 0); }
		public ITerminalNode Minus() { return GetToken(VeeParser.Minus, 0); }
		public UnaryContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterUnary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitUnary(this);
		}
	}
	public partial class MultiplicativeContext : ExpressionContext {
		public ExpressionContext l;
		public IToken op;
		public ExpressionContext r;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Multiply() { return GetToken(VeeParser.Multiply, 0); }
		public ITerminalNode Divide() { return GetToken(VeeParser.Divide, 0); }
		public ITerminalNode Modulo() { return GetToken(VeeParser.Modulo, 0); }
		public MultiplicativeContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterMultiplicative(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitMultiplicative(this);
		}
	}
	public partial class ListContext : ExpressionContext {
		public ITerminalNode LBracket() { return GetToken(VeeParser.LBracket, 0); }
		public ITerminalNode RBracket() { return GetToken(VeeParser.RBracket, 0); }
		public NumsContext nums() {
			return GetRuleContext<NumsContext>(0);
		}
		public ListItemsContext listItems() {
			return GetRuleContext<ListItemsContext>(0);
		}
		public ListContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
	}
	public partial class ComparisionContext : ExpressionContext {
		public ExpressionContext l;
		public IToken op;
		public ExpressionContext r;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Lt() { return GetToken(VeeParser.Lt, 0); }
		public ITerminalNode Lte() { return GetToken(VeeParser.Lte, 0); }
		public ITerminalNode Gt() { return GetToken(VeeParser.Gt, 0); }
		public ITerminalNode Gte() { return GetToken(VeeParser.Gte, 0); }
		public ComparisionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterComparision(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitComparision(this);
		}
	}
	public partial class GroupingContext : ExpressionContext {
		public ITerminalNode LParen() { return GetToken(VeeParser.LParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RParen() { return GetToken(VeeParser.RParen, 0); }
		public GroupingContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterGrouping(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitGrouping(this);
		}
	}
	public partial class LogicalContext : ExpressionContext {
		public ExpressionContext l;
		public IToken op;
		public ExpressionContext r;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode AndAlso() { return GetToken(VeeParser.AndAlso, 0); }
		public ITerminalNode OrElse() { return GetToken(VeeParser.OrElse, 0); }
		public LogicalContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterLogical(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitLogical(this);
		}
	}
	public partial class OperatorLambdaContext : ExpressionContext {
		public ITerminalNode[] Pipe() { return GetTokens(VeeParser.Pipe); }
		public ITerminalNode Pipe(int i) {
			return GetToken(VeeParser.Pipe, i);
		}
		public OperatorsContext operators() {
			return GetRuleContext<OperatorsContext>(0);
		}
		public OperatorLambdaContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterOperatorLambda(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitOperatorLambda(this);
		}
	}
	public partial class AdditiveContext : ExpressionContext {
		public ExpressionContext l;
		public IToken op;
		public ExpressionContext r;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Plus() { return GetToken(VeeParser.Plus, 0); }
		public ITerminalNode Minus() { return GetToken(VeeParser.Minus, 0); }
		public AdditiveContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterAdditive(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitAdditive(this);
		}
	}
	public partial class TupleContext : ExpressionContext {
		public ITerminalNode LParen() { return GetToken(VeeParser.LParen, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RParen() { return GetToken(VeeParser.RParen, 0); }
		public ITerminalNode[] Comma() { return GetTokens(VeeParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(VeeParser.Comma, i);
		}
		public TupleContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
	}
	public partial class ExponentiationContext : ExpressionContext {
		public ExpressionContext l;
		public IToken op;
		public ExpressionContext r;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Pow() { return GetToken(VeeParser.Pow, 0); }
		public ExponentiationContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterExponentiation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitExponentiation(this);
		}
	}
	public partial class LambdaContext : ExpressionContext {
		public ITerminalNode Lambda() { return GetToken(VeeParser.Lambda, 0); }
		public ITerminalNode LParen() { return GetToken(VeeParser.LParen, 0); }
		public LambdaParamsContext lambdaParams() {
			return GetRuleContext<LambdaParamsContext>(0);
		}
		public ITerminalNode RParen() { return GetToken(VeeParser.RParen, 0); }
		public ITerminalNode Arrow() { return GetToken(VeeParser.Arrow, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LambdaContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterLambda(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitLambda(this);
		}
	}
	public partial class InvocationContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public InvocationContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterInvocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitInvocation(this);
		}
	}
	public partial class RecordContext : ExpressionContext {
		public ITerminalNode LBrace() { return GetToken(VeeParser.LBrace, 0); }
		public RecordPairContext[] recordPair() {
			return GetRuleContexts<RecordPairContext>();
		}
		public RecordPairContext recordPair(int i) {
			return GetRuleContext<RecordPairContext>(i);
		}
		public ITerminalNode RBrace() { return GetToken(VeeParser.RBrace, 0); }
		public ITerminalNode[] Comma() { return GetTokens(VeeParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(VeeParser.Comma, i);
		}
		public RecordContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterRecord(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitRecord(this);
		}
	}
	public partial class VariableContext : ExpressionContext {
		public ITerminalNode Name() { return GetToken(VeeParser.Name, 0); }
		public VariableContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
	}
	public partial class PipeContext : ExpressionContext {
		public ExpressionContext l;
		public IToken op;
		public ExpressionContext r;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RPipe() { return GetToken(VeeParser.RPipe, 0); }
		public PipeContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterPipe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitPipe(this);
		}
	}
	public partial class ValueContext : ExpressionContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ValueContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}
	public partial class EqualityContext : ExpressionContext {
		public ExpressionContext l;
		public IToken op;
		public ExpressionContext r;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Eq() { return GetToken(VeeParser.Eq, 0); }
		public ITerminalNode Neq() { return GetToken(VeeParser.Neq, 0); }
		public EqualityContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterEquality(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitEquality(this);
		}
	}
	public partial class HashContext : ExpressionContext {
		public ITerminalNode LBrace() { return GetToken(VeeParser.LBrace, 0); }
		public ITerminalNode RBrace() { return GetToken(VeeParser.RBrace, 0); }
		public MapPairContext[] mapPair() {
			return GetRuleContexts<MapPairContext>();
		}
		public MapPairContext mapPair(int i) {
			return GetRuleContext<MapPairContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(VeeParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(VeeParser.Comma, i);
		}
		public HashContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterHash(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitHash(this);
		}
	}
	public partial class TypeofContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TypeOf() { return GetToken(VeeParser.TypeOf, 0); }
		public TypeofContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterTypeof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitTypeof(this);
		}
	}
	public partial class CombinationContext : ExpressionContext {
		public ExpressionContext l;
		public IToken op;
		public ExpressionContext r;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Combine() { return GetToken(VeeParser.Combine, 0); }
		public CombinationContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterCombination(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitCombination(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				_localctx = new ValueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 89; constant();
				}
				break;
			case 2:
				{
				_localctx = new VariableContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 90; Match(Name);
				}
				break;
			case 3:
				{
				_localctx = new TupleContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 91; Match(LParen);
				State = 92; expression(0);
				State = 95;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 93; Match(Comma);
					State = 94; expression(0);
					}
					}
					State = 97;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Comma );
				State = 99; Match(RParen);
				}
				break;
			case 4:
				{
				_localctx = new RecordContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 101; Match(LBrace);
				State = 102; recordPair();
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 103; Match(Comma);
					State = 104; recordPair();
					}
					}
					State = 109;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 110; Match(RBrace);
				}
				break;
			case 5:
				{
				_localctx = new HashContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 112; Match(LBrace);
				{
				State = 113; mapPair();
				State = 118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 114; Match(Comma);
					State = 115; mapPair();
					}
					}
					State = 120;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				State = 121; Match(RBrace);
				}
				break;
			case 6:
				{
				_localctx = new ListContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 123; Match(LBracket);
				State = 126;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 124; nums();
					}
					break;
				case 2:
					{
					State = 125; listItems();
					}
					break;
				}
				State = 128; Match(RBracket);
				}
				break;
			case 7:
				{
				_localctx = new GroupingContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 130; Match(LParen);
				State = 131; expression(0);
				State = 132; Match(RParen);
				}
				break;
			case 8:
				{
				_localctx = new LogicalNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 134; ((LogicalNotContext)_localctx).op = Match(Not);
				State = 135; expression(15);
				}
				break;
			case 9:
				{
				_localctx = new UnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 136;
				((UnaryContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==Plus || _la==Minus) ) {
					((UnaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 137; expression(14);
				}
				break;
			case 10:
				{
				_localctx = new TypeofContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 138; ((TypeofContext)_localctx).op = Match(TypeOf);
				State = 139; expression(13);
				}
				break;
			case 11:
				{
				_localctx = new InitContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 140; Match(New);
				State = 143;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 141; type(0);
					}
					break;
				case 2:
					{
					State = 142; Match(Name);
					}
					break;
				}
				}
				break;
			case 12:
				{
				_localctx = new OperatorLambdaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 145; Match(Pipe);
				State = 146; operators();
				State = 147; Match(Pipe);
				}
				break;
			case 13:
				{
				_localctx = new LambdaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 149; Match(Lambda);
				State = 150; Match(LParen);
				State = 151; lambdaParams();
				State = 152; Match(RParen);
				State = 153; Match(Arrow);
				State = 154; expression(2);
				}
				break;
			case 14:
				{
				_localctx = new TestContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 156; Match(If);
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBracket) | (1L << LBrace) | (1L << LParen) | (1L << Lambda) | (1L << Plus) | (1L << Minus) | (1L << Pipe) | (1L << Not) | (1L << TypeOf) | (1L << If) | (1L << True) | (1L << False) | (1L << New) | (1L << Number) | (1L << Name) | (1L << String))) != 0)) {
					{
					State = 159;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						State = 157; conditions();
						}
						break;
					case 2:
						{
						State = 158; patterns();
						}
						break;
					}
					}
					State = 163;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 164; Match(Else);
				State = 165; expression(1);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 199;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 197;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
					case 1:
						{
						_localctx = new ExponentiationContext(new ExpressionContext(_parentctx, _parentState));
						((ExponentiationContext)_localctx).l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 168;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 169; ((ExponentiationContext)_localctx).op = Match(Pow);
						State = 170; ((ExponentiationContext)_localctx).r = expression(12);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeContext(new ExpressionContext(_parentctx, _parentState));
						((MultiplicativeContext)_localctx).l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 171;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 172;
						((MultiplicativeContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Multiply) | (1L << Divide) | (1L << Modulo))) != 0)) ) {
							((MultiplicativeContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 173; ((MultiplicativeContext)_localctx).r = expression(11);
						}
						break;
					case 3:
						{
						_localctx = new AdditiveContext(new ExpressionContext(_parentctx, _parentState));
						((AdditiveContext)_localctx).l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 174;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 175;
						((AdditiveContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
							((AdditiveContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 176; ((AdditiveContext)_localctx).r = expression(10);
						}
						break;
					case 4:
						{
						_localctx = new EqualityContext(new ExpressionContext(_parentctx, _parentState));
						((EqualityContext)_localctx).l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 177;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 178;
						((EqualityContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Eq || _la==Neq) ) {
							((EqualityContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 179; ((EqualityContext)_localctx).r = expression(9);
						}
						break;
					case 5:
						{
						_localctx = new ComparisionContext(new ExpressionContext(_parentctx, _parentState));
						((ComparisionContext)_localctx).l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 180;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 181;
						((ComparisionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Lt) | (1L << Gt) | (1L << Lte) | (1L << Gte))) != 0)) ) {
							((ComparisionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 182; ((ComparisionContext)_localctx).r = expression(8);
						}
						break;
					case 6:
						{
						_localctx = new LogicalContext(new ExpressionContext(_parentctx, _parentState));
						((LogicalContext)_localctx).l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 183;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 184;
						((LogicalContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==AndAlso || _la==OrElse) ) {
							((LogicalContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 185; ((LogicalContext)_localctx).r = expression(7);
						}
						break;
					case 7:
						{
						_localctx = new CombinationContext(new ExpressionContext(_parentctx, _parentState));
						((CombinationContext)_localctx).l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 186;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 187; ((CombinationContext)_localctx).op = Match(Combine);
						State = 188; ((CombinationContext)_localctx).r = expression(6);
						}
						break;
					case 8:
						{
						_localctx = new PipeContext(new ExpressionContext(_parentctx, _parentState));
						((PipeContext)_localctx).l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 189;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 190; ((PipeContext)_localctx).op = Match(RPipe);
						State = 191; ((PipeContext)_localctx).r = expression(5);
						}
						break;
					case 9:
						{
						_localctx = new AccessContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 192;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 193; Match(Dot);
						State = 194; member();
						}
						break;
					case 10:
						{
						_localctx = new InvocationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 195;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 196; arguments();
						}
						break;
					}
					} 
				}
				State = 201;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionsContext : ParserRuleContext {
		public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		public ITerminalNode[] Pipe() { return GetTokens(VeeParser.Pipe); }
		public ITerminalNode Pipe(int i) {
			return GetToken(VeeParser.Pipe, i);
		}
		public ConditionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterConditions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitConditions(this);
		}
	}

	[RuleVersion(0)]
	public ConditionsContext conditions() {
		ConditionsContext _localctx = new ConditionsContext(Context, State);
		EnterRule(_localctx, 4, RULE_conditions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 202; condition();
			State = 207;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 203; Match(Pipe);
					State = 204; condition();
					}
					} 
				}
				State = 209;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode Then() { return GetToken(VeeParser.Then, 0); }
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 6, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210; expression(0);
			State = 211; Match(Then);
			State = 212; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatternsContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Is() { return GetToken(VeeParser.Is, 0); }
		public MatchContext[] match() {
			return GetRuleContexts<MatchContext>();
		}
		public MatchContext match(int i) {
			return GetRuleContext<MatchContext>(i);
		}
		public ITerminalNode[] Pipe() { return GetTokens(VeeParser.Pipe); }
		public ITerminalNode Pipe(int i) {
			return GetToken(VeeParser.Pipe, i);
		}
		public PatternsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patterns; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterPatterns(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitPatterns(this);
		}
	}

	[RuleVersion(0)]
	public PatternsContext patterns() {
		PatternsContext _localctx = new PatternsContext(Context, State);
		EnterRule(_localctx, 8, RULE_patterns);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; expression(0);
			State = 215; Match(Is);
			State = 216; match();
			State = 221;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 217; Match(Pipe);
					State = 218; match();
					}
					} 
				}
				State = 223;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MatchContext : ParserRuleContext {
		public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		public ITerminalNode Then() { return GetToken(VeeParser.Then, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode When() { return GetToken(VeeParser.When, 0); }
		public MatchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_match; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterMatch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitMatch(this);
		}
	}

	[RuleVersion(0)]
	public MatchContext match() {
		MatchContext _localctx = new MatchContext(Context, State);
		EnterRule(_localctx, 10, RULE_match);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224; pattern();
			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==When) {
				{
				State = 225; Match(When);
				State = 226; expression(0);
				}
			}

			State = 229; Match(Then);
			State = 230; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatternContext : ParserRuleContext {
		public ListPatternContext listPattern() {
			return GetRuleContext<ListPatternContext>(0);
		}
		public MapPatternContext mapPattern() {
			return GetRuleContext<MapPatternContext>(0);
		}
		public RecordPatternContext recordPattern() {
			return GetRuleContext<RecordPatternContext>(0);
		}
		public TuplePatternContext tuplePattern() {
			return GetRuleContext<TuplePatternContext>(0);
		}
		public TypePatternContext typePattern() {
			return GetRuleContext<TypePatternContext>(0);
		}
		public EnumPatternContext enumPattern() {
			return GetRuleContext<EnumPatternContext>(0);
		}
		public PatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pattern; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitPattern(this);
		}
	}

	[RuleVersion(0)]
	public PatternContext pattern() {
		PatternContext _localctx = new PatternContext(Context, State);
		EnterRule(_localctx, 12, RULE_pattern);
		try {
			State = 238;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 232; listPattern();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 233; mapPattern();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 234; recordPattern();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 235; tuplePattern();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 236; typePattern();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 237; enumPattern();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode True() { return GetToken(VeeParser.True, 0); }
		public ITerminalNode False() { return GetToken(VeeParser.False, 0); }
		public ITerminalNode Number() { return GetToken(VeeParser.Number, 0); }
		public ITerminalNode String() { return GetToken(VeeParser.String, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 14, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << True) | (1L << False) | (1L << Number) | (1L << String))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameOrConstantContext : ParserRuleContext {
		public ITerminalNode Name() { return GetToken(VeeParser.Name, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public NameOrConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameOrConstant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterNameOrConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitNameOrConstant(this);
		}
	}

	[RuleVersion(0)]
	public NameOrConstantContext nameOrConstant() {
		NameOrConstantContext _localctx = new NameOrConstantContext(Context, State);
		EnterRule(_localctx, 16, RULE_nameOrConstant);
		try {
			State = 244;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Name:
				EnterOuterAlt(_localctx, 1);
				{
				State = 242; Match(Name);
				}
				break;
			case True:
			case False:
			case Number:
			case String:
				EnterOuterAlt(_localctx, 2);
				{
				State = 243; constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypePatternContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		public TypePatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typePattern; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterTypePattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitTypePattern(this);
		}
	}

	[RuleVersion(0)]
	public TypePatternContext typePattern() {
		TypePatternContext _localctx = new TypePatternContext(Context, State);
		EnterRule(_localctx, 18, RULE_typePattern);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246; type(0);
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 247; alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListPatternContext : ParserRuleContext {
		public ITerminalNode LBracket() { return GetToken(VeeParser.LBracket, 0); }
		public ITerminalNode RBracket() { return GetToken(VeeParser.RBracket, 0); }
		public NameOrConstantContext[] nameOrConstant() {
			return GetRuleContexts<NameOrConstantContext>();
		}
		public NameOrConstantContext nameOrConstant(int i) {
			return GetRuleContext<NameOrConstantContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(VeeParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(VeeParser.Comma, i);
		}
		public RestContext rest() {
			return GetRuleContext<RestContext>(0);
		}
		public ListPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listPattern; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterListPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitListPattern(this);
		}
	}

	[RuleVersion(0)]
	public ListPatternContext listPattern() {
		ListPatternContext _localctx = new ListPatternContext(Context, State);
		EnterRule(_localctx, 20, RULE_listPattern);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 250; Match(LBracket);
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << True) | (1L << False) | (1L << Number) | (1L << Name) | (1L << String))) != 0)) {
				{
				State = 251; nameOrConstant();
				}
			}

			State = 258;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 254; Match(Comma);
					State = 255; nameOrConstant();
					}
					} 
				}
				State = 260;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			State = 263;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 261; Match(Comma);
				State = 262; rest();
				}
			}

			State = 265; Match(RBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapPatternContext : ParserRuleContext {
		public ITerminalNode LBrace() { return GetToken(VeeParser.LBrace, 0); }
		public MapPairPatternContext[] mapPairPattern() {
			return GetRuleContexts<MapPairPatternContext>();
		}
		public MapPairPatternContext mapPairPattern(int i) {
			return GetRuleContext<MapPairPatternContext>(i);
		}
		public ITerminalNode RBrace() { return GetToken(VeeParser.RBrace, 0); }
		public ITerminalNode[] Comma() { return GetTokens(VeeParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(VeeParser.Comma, i);
		}
		public RestContext rest() {
			return GetRuleContext<RestContext>(0);
		}
		public MapPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapPattern; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterMapPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitMapPattern(this);
		}
	}

	[RuleVersion(0)]
	public MapPatternContext mapPattern() {
		MapPatternContext _localctx = new MapPatternContext(Context, State);
		EnterRule(_localctx, 22, RULE_mapPattern);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 267; Match(LBrace);
			State = 268; mapPairPattern();
			State = 273;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 269; Match(Comma);
					State = 270; mapPairPattern();
					}
					} 
				}
				State = 275;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			State = 278;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 276; Match(Comma);
				State = 277; rest();
				}
			}

			State = 280; Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapPairPatternContext : ParserRuleContext {
		public ITerminalNode LBracket() { return GetToken(VeeParser.LBracket, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ITerminalNode RBracket() { return GetToken(VeeParser.RBracket, 0); }
		public ITerminalNode Colon() { return GetToken(VeeParser.Colon, 0); }
		public NameOrConstantContext nameOrConstant() {
			return GetRuleContext<NameOrConstantContext>(0);
		}
		public MapPairPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapPairPattern; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterMapPairPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitMapPairPattern(this);
		}
	}

	[RuleVersion(0)]
	public MapPairPatternContext mapPairPattern() {
		MapPairPatternContext _localctx = new MapPairPatternContext(Context, State);
		EnterRule(_localctx, 24, RULE_mapPairPattern);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282; Match(LBracket);
			State = 283; constant();
			State = 284; Match(RBracket);
			State = 285; Match(Colon);
			State = 286; nameOrConstant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordPatternContext : ParserRuleContext {
		public ITerminalNode LBrace() { return GetToken(VeeParser.LBrace, 0); }
		public RecPairPatternContext[] recPairPattern() {
			return GetRuleContexts<RecPairPatternContext>();
		}
		public RecPairPatternContext recPairPattern(int i) {
			return GetRuleContext<RecPairPatternContext>(i);
		}
		public ITerminalNode RBrace() { return GetToken(VeeParser.RBrace, 0); }
		public ITerminalNode[] Comma() { return GetTokens(VeeParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(VeeParser.Comma, i);
		}
		public RestContext rest() {
			return GetRuleContext<RestContext>(0);
		}
		public RecordPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordPattern; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterRecordPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitRecordPattern(this);
		}
	}

	[RuleVersion(0)]
	public RecordPatternContext recordPattern() {
		RecordPatternContext _localctx = new RecordPatternContext(Context, State);
		EnterRule(_localctx, 26, RULE_recordPattern);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 288; Match(LBrace);
			State = 289; recPairPattern();
			State = 294;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 290; Match(Comma);
					State = 291; recPairPattern();
					}
					} 
				}
				State = 296;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			State = 299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 297; Match(Comma);
				State = 298; rest();
				}
			}

			State = 301; Match(RBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecPairPatternContext : ParserRuleContext {
		public ITerminalNode Name() { return GetToken(VeeParser.Name, 0); }
		public ITerminalNode Colon() { return GetToken(VeeParser.Colon, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public AliasContext alias() {
			return GetRuleContext<AliasContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public RecPairPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recPairPattern; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterRecPairPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitRecPairPattern(this);
		}
	}

	[RuleVersion(0)]
	public RecPairPatternContext recPairPattern() {
		RecPairPatternContext _localctx = new RecPairPatternContext(Context, State);
		EnterRule(_localctx, 28, RULE_recPairPattern);
		int _la;
		try {
			State = 312;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 303; Match(Name);
				State = 304; Match(Colon);
				State = 305; type(0);
				State = 307;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==As) {
					{
					State = 306; alias();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 309; Match(Name);
				State = 310; Match(Colon);
				State = 311; constant();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TuplePatternContext : ParserRuleContext {
		public ITerminalNode LParen() { return GetToken(VeeParser.LParen, 0); }
		public TupleItemPatternContext[] tupleItemPattern() {
			return GetRuleContexts<TupleItemPatternContext>();
		}
		public TupleItemPatternContext tupleItemPattern(int i) {
			return GetRuleContext<TupleItemPatternContext>(i);
		}
		public ITerminalNode RParen() { return GetToken(VeeParser.RParen, 0); }
		public ITerminalNode[] Comma() { return GetTokens(VeeParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(VeeParser.Comma, i);
		}
		public RestContext rest() {
			return GetRuleContext<RestContext>(0);
		}
		public TuplePatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuplePattern; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterTuplePattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitTuplePattern(this);
		}
	}

	[RuleVersion(0)]
	public TuplePatternContext tuplePattern() {
		TuplePatternContext _localctx = new TuplePatternContext(Context, State);
		EnterRule(_localctx, 30, RULE_tuplePattern);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 314; Match(LParen);
			State = 315; tupleItemPattern();
			State = 320;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 316; Match(Comma);
					State = 317; tupleItemPattern();
					}
					} 
				}
				State = 322;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			State = 325;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 323; Match(Comma);
				State = 324; rest();
				}
			}

			State = 327; Match(RParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleItemPatternContext : ParserRuleContext {
		public ITerminalNode[] Name() { return GetTokens(VeeParser.Name); }
		public ITerminalNode Name(int i) {
			return GetToken(VeeParser.Name, i);
		}
		public ITerminalNode Colon() { return GetToken(VeeParser.Colon, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public TupleItemPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleItemPattern; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterTupleItemPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitTupleItemPattern(this);
		}
	}

	[RuleVersion(0)]
	public TupleItemPatternContext tupleItemPattern() {
		TupleItemPatternContext _localctx = new TupleItemPatternContext(Context, State);
		EnterRule(_localctx, 32, RULE_tupleItemPattern);
		try {
			State = 336;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Name:
				EnterOuterAlt(_localctx, 1);
				{
				State = 329; Match(Name);
				State = 330; Match(Colon);
				State = 333;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
				case 1:
					{
					State = 331; type(0);
					}
					break;
				case 2:
					{
					State = 332; Match(Name);
					}
					break;
				}
				}
				break;
			case True:
			case False:
			case Number:
			case String:
				EnterOuterAlt(_localctx, 2);
				{
				State = 335; constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumPatternContext : ParserRuleContext {
		public ITerminalNode[] Name() { return GetTokens(VeeParser.Name); }
		public ITerminalNode Name(int i) {
			return GetToken(VeeParser.Name, i);
		}
		public ITerminalNode LParen() { return GetToken(VeeParser.LParen, 0); }
		public ITerminalNode RParen() { return GetToken(VeeParser.RParen, 0); }
		public ITerminalNode[] Comma() { return GetTokens(VeeParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(VeeParser.Comma, i);
		}
		public EnumPatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumPattern; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterEnumPattern(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitEnumPattern(this);
		}
	}

	[RuleVersion(0)]
	public EnumPatternContext enumPattern() {
		EnumPatternContext _localctx = new EnumPatternContext(Context, State);
		EnterRule(_localctx, 34, RULE_enumPattern);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338; Match(Name);
			State = 349;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LParen) {
				{
				State = 339; Match(LParen);
				State = 340; Match(Name);
				State = 345;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 341; Match(Comma);
					State = 342; Match(Name);
					}
					}
					State = 347;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 348; Match(RParen);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RestContext : ParserRuleContext {
		public ITerminalNode Range() { return GetToken(VeeParser.Range, 0); }
		public ITerminalNode Name() { return GetToken(VeeParser.Name, 0); }
		public RestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rest; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitRest(this);
		}
	}

	[RuleVersion(0)]
	public RestContext rest() {
		RestContext _localctx = new RestContext(Context, State);
		EnterRule(_localctx, 36, RULE_rest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351; Match(Range);
			State = 352; Match(Name);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorsContext : ParserRuleContext {
		public ITerminalNode[] Quiz() { return GetTokens(VeeParser.Quiz); }
		public ITerminalNode Quiz(int i) {
			return GetToken(VeeParser.Quiz, i);
		}
		public BinaryOperatorsContext binaryOperators() {
			return GetRuleContext<BinaryOperatorsContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryOperatorsContext unaryOperators() {
			return GetRuleContext<UnaryOperatorsContext>(0);
		}
		public ITerminalNode Dot() { return GetToken(VeeParser.Dot, 0); }
		public MemberContext member() {
			return GetRuleContext<MemberContext>(0);
		}
		public OperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operators; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterOperators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitOperators(this);
		}
	}

	[RuleVersion(0)]
	public OperatorsContext operators() {
		OperatorsContext _localctx = new OperatorsContext(Context, State);
		EnterRule(_localctx, 38, RULE_operators);
		try {
			State = 372;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 354; Match(Quiz);
				State = 355; binaryOperators();
				State = 356; expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 358; expression(0);
				State = 359; binaryOperators();
				State = 360; Match(Quiz);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 362; Match(Quiz);
				State = 363; binaryOperators();
				State = 364; Match(Quiz);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 366; unaryOperators();
				State = 367; Match(Quiz);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 369; Match(Quiz);
				State = 370; Match(Dot);
				State = 371; member();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberContext : ParserRuleContext {
		public ITerminalNode LBracket() { return GetToken(VeeParser.LBracket, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RBracket() { return GetToken(VeeParser.RBracket, 0); }
		public ITerminalNode Name() { return GetToken(VeeParser.Name, 0); }
		public MemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitMember(this);
		}
	}

	[RuleVersion(0)]
	public MemberContext member() {
		MemberContext _localctx = new MemberContext(Context, State);
		EnterRule(_localctx, 40, RULE_member);
		try {
			State = 379;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBracket:
				EnterOuterAlt(_localctx, 1);
				{
				State = 374; Match(LBracket);
				State = 375; expression(0);
				State = 376; Match(RBracket);
				}
				break;
			case Name:
				EnterOuterAlt(_localctx, 2);
				{
				State = 378; Match(Name);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryOperatorsContext : ParserRuleContext {
		public ITerminalNode Pow() { return GetToken(VeeParser.Pow, 0); }
		public ITerminalNode Multiply() { return GetToken(VeeParser.Multiply, 0); }
		public ITerminalNode Divide() { return GetToken(VeeParser.Divide, 0); }
		public ITerminalNode Modulo() { return GetToken(VeeParser.Modulo, 0); }
		public ITerminalNode Plus() { return GetToken(VeeParser.Plus, 0); }
		public ITerminalNode Minus() { return GetToken(VeeParser.Minus, 0); }
		public ITerminalNode Eq() { return GetToken(VeeParser.Eq, 0); }
		public ITerminalNode Neq() { return GetToken(VeeParser.Neq, 0); }
		public ITerminalNode AndAlso() { return GetToken(VeeParser.AndAlso, 0); }
		public ITerminalNode OrElse() { return GetToken(VeeParser.OrElse, 0); }
		public ITerminalNode Gte() { return GetToken(VeeParser.Gte, 0); }
		public ITerminalNode Gt() { return GetToken(VeeParser.Gt, 0); }
		public ITerminalNode Lt() { return GetToken(VeeParser.Lt, 0); }
		public ITerminalNode Lte() { return GetToken(VeeParser.Lte, 0); }
		public ITerminalNode Combine() { return GetToken(VeeParser.Combine, 0); }
		public BinaryOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryOperators; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterBinaryOperators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitBinaryOperators(this);
		}
	}

	[RuleVersion(0)]
	public BinaryOperatorsContext binaryOperators() {
		BinaryOperatorsContext _localctx = new BinaryOperatorsContext(Context, State);
		EnterRule(_localctx, 42, RULE_binaryOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Pow) | (1L << Multiply) | (1L << Divide) | (1L << Modulo) | (1L << Plus) | (1L << Minus) | (1L << Eq) | (1L << Neq) | (1L << Lt) | (1L << Gt) | (1L << Lte) | (1L << Gte) | (1L << Combine) | (1L << AndAlso) | (1L << OrElse))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOperatorsContext : ParserRuleContext {
		public ITerminalNode Minus() { return GetToken(VeeParser.Minus, 0); }
		public ITerminalNode Not() { return GetToken(VeeParser.Not, 0); }
		public UnaryOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperators; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterUnaryOperators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitUnaryOperators(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperatorsContext unaryOperators() {
		UnaryOperatorsContext _localctx = new UnaryOperatorsContext(Context, State);
		EnterRule(_localctx, 44, RULE_unaryOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383;
			_la = TokenStream.LA(1);
			if ( !(_la==Minus || _la==Not) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumsContext : ParserRuleContext {
		public IToken from;
		public IToken to;
		public ITerminalNode[] Number() { return GetTokens(VeeParser.Number); }
		public ITerminalNode Number(int i) {
			return GetToken(VeeParser.Number, i);
		}
		public ITerminalNode[] Range() { return GetTokens(VeeParser.Range); }
		public ITerminalNode Range(int i) {
			return GetToken(VeeParser.Range, i);
		}
		public ITerminalNode Plus() { return GetToken(VeeParser.Plus, 0); }
		public ITerminalNode Minus() { return GetToken(VeeParser.Minus, 0); }
		public NumsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nums; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterNums(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitNums(this);
		}
	}

	[RuleVersion(0)]
	public NumsContext nums() {
		NumsContext _localctx = new NumsContext(Context, State);
		EnterRule(_localctx, 46, RULE_nums);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385; _localctx.from = Match(Number);
			{
			State = 386; Match(Range);
			State = 387;
			_la = TokenStream.LA(1);
			if ( !(_la==Plus || _la==Minus) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 388; Match(Number);
			State = 389; Match(Range);
			}
			State = 391; _localctx.to = Match(Number);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordPairContext : ParserRuleContext {
		public ITerminalNode Name() { return GetToken(VeeParser.Name, 0); }
		public ITerminalNode Colon() { return GetToken(VeeParser.Colon, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RecordPairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordPair; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterRecordPair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitRecordPair(this);
		}
	}

	[RuleVersion(0)]
	public RecordPairContext recordPair() {
		RecordPairContext _localctx = new RecordPairContext(Context, State);
		EnterRule(_localctx, 48, RULE_recordPair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393; Match(Name);
			State = 394; Match(Colon);
			State = 395; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapPairContext : ParserRuleContext {
		public ITerminalNode LBracket() { return GetToken(VeeParser.LBracket, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RBracket() { return GetToken(VeeParser.RBracket, 0); }
		public ITerminalNode Colon() { return GetToken(VeeParser.Colon, 0); }
		public MapPairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapPair; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterMapPair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitMapPair(this);
		}
	}

	[RuleVersion(0)]
	public MapPairContext mapPair() {
		MapPairContext _localctx = new MapPairContext(Context, State);
		EnterRule(_localctx, 50, RULE_mapPair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397; Match(LBracket);
			State = 398; expression(0);
			State = 399; Match(RBracket);
			State = 400; Match(Colon);
			State = 401; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaParamsContext : ParserRuleContext {
		public ITerminalNode[] Name() { return GetTokens(VeeParser.Name); }
		public ITerminalNode Name(int i) {
			return GetToken(VeeParser.Name, i);
		}
		public ITerminalNode[] Colon() { return GetTokens(VeeParser.Colon); }
		public ITerminalNode Colon(int i) {
			return GetToken(VeeParser.Colon, i);
		}
		public ITerminalNode[] Comma() { return GetTokens(VeeParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(VeeParser.Comma, i);
		}
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public LambdaParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaParams; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterLambdaParams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitLambdaParams(this);
		}
	}

	[RuleVersion(0)]
	public LambdaParamsContext lambdaParams() {
		LambdaParamsContext _localctx = new LambdaParamsContext(Context, State);
		EnterRule(_localctx, 52, RULE_lambdaParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Name) {
				{
				State = 403; Match(Name);
				State = 404; Match(Colon);
				State = 407;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
				case 1:
					{
					State = 405; Match(Name);
					}
					break;
				case 2:
					{
					State = 406; type(0);
					}
					break;
				}
				}
			}

			State = 420;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 411; Match(Comma);
				State = 412; Match(Name);
				State = 413; Match(Colon);
				State = 416;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
				case 1:
					{
					State = 414; Match(Name);
					}
					break;
				case 2:
					{
					State = 415; type(0);
					}
					break;
				}
				}
				}
				State = 422;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListItemsContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(VeeParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(VeeParser.Comma, i);
		}
		public ListItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listItems; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterListItems(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitListItems(this);
		}
	}

	[RuleVersion(0)]
	public ListItemsContext listItems() {
		ListItemsContext _localctx = new ListItemsContext(Context, State);
		EnterRule(_localctx, 54, RULE_listItems);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423; expression(0);
			State = 428;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 424; Match(Comma);
				State = 425; expression(0);
				}
				}
				State = 430;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ITerminalNode LParen() { return GetToken(VeeParser.LParen, 0); }
		public ITerminalNode RParen() { return GetToken(VeeParser.RParen, 0); }
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(VeeParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(VeeParser.Comma, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 56, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431; Match(LParen);
			State = 433;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LBracket) | (1L << LBrace) | (1L << LParen) | (1L << Quiz) | (1L << Lambda) | (1L << Plus) | (1L << Minus) | (1L << Pipe) | (1L << Not) | (1L << TypeOf) | (1L << If) | (1L << True) | (1L << False) | (1L << New) | (1L << Number) | (1L << Name) | (1L << String))) != 0)) {
				{
				State = 432; argument();
				}
			}

			State = 439;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 435; Match(Comma);
				State = 436; argument();
				}
				}
				State = 441;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 442; Match(RParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Name() { return GetToken(VeeParser.Name, 0); }
		public ITerminalNode Colon() { return GetToken(VeeParser.Colon, 0); }
		public ITerminalNode Quiz() { return GetToken(VeeParser.Quiz, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 58, RULE_argument);
		try {
			State = 450;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBracket:
			case LBrace:
			case LParen:
			case Lambda:
			case Plus:
			case Minus:
			case Pipe:
			case Not:
			case TypeOf:
			case If:
			case True:
			case False:
			case New:
			case Number:
			case Name:
			case String:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 446;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
				case 1:
					{
					State = 444; Match(Name);
					State = 445; Match(Colon);
					}
					break;
				}
				State = 448; expression(0);
				}
				}
				break;
			case Quiz:
				EnterOuterAlt(_localctx, 2);
				{
				State = 449; Match(Quiz);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypeGroupContext : TypeContext {
		public ITerminalNode LParen() { return GetToken(VeeParser.LParen, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode RParen() { return GetToken(VeeParser.RParen, 0); }
		public TypeGroupContext(TypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterTypeGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitTypeGroup(this);
		}
	}
	public partial class SingleTypeContext : TypeContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode Name() { return GetToken(VeeParser.Name, 0); }
		public ITerminalNode Colon() { return GetToken(VeeParser.Colon, 0); }
		public SingleTypeContext(TypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterSingleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitSingleType(this);
		}
	}
	public partial class ParameterizedTypeContext : TypeContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode LParen() { return GetToken(VeeParser.LParen, 0); }
		public ITerminalNode RParen() { return GetToken(VeeParser.RParen, 0); }
		public ParameterizedTypeContext(TypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterParameterizedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitParameterizedType(this);
		}
	}
	public partial class UnknownTypeContext : TypeContext {
		public ITerminalNode Quiz() { return GetToken(VeeParser.Quiz, 0); }
		public UnknownTypeContext(TypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterUnknownType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitUnknownType(this);
		}
	}
	public partial class SumTypeContext : TypeContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode Pipe() { return GetToken(VeeParser.Pipe, 0); }
		public SumTypeContext(TypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterSumType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitSumType(this);
		}
	}
	public partial class ProductTypeContext : TypeContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode Multiply() { return GetToken(VeeParser.Multiply, 0); }
		public ProductTypeContext(TypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterProductType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitProductType(this);
		}
	}
	public partial class FuncTypeContext : TypeContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode Arrow() { return GetToken(VeeParser.Arrow, 0); }
		public FuncTypeContext(TypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterFuncType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitFuncType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		return type(0);
	}

	private TypeContext type(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeContext _localctx = new TypeContext(Context, _parentState);
		TypeContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_type, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 463;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case StringType:
			case NumberType:
			case BooleanType:
			case EnumType:
			case TupleType:
			case RecordType:
			case ListType:
			case HashType:
			case TryType:
			case OptionType:
			case Name:
				{
				_localctx = new SingleTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 455;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Name) {
					{
					State = 453; Match(Name);
					State = 454; Match(Colon);
					}
				}

				State = 457; typeName();
				}
				break;
			case Quiz:
				{
				_localctx = new UnknownTypeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 458; Match(Quiz);
				}
				break;
			case LParen:
				{
				_localctx = new TypeGroupContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 459; Match(LParen);
				State = 460; type(0);
				State = 461; Match(RParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 481;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 479;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
					case 1:
						{
						_localctx = new FuncTypeContext(new TypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 465;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 466; Match(Arrow);
						State = 467; type(5);
						}
						break;
					case 2:
						{
						_localctx = new SumTypeContext(new TypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 468;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 469; Match(Pipe);
						State = 470; type(4);
						}
						break;
					case 3:
						{
						_localctx = new ProductTypeContext(new TypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 471;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 472; Match(Multiply);
						State = 473; type(3);
						}
						break;
					case 4:
						{
						_localctx = new ParameterizedTypeContext(new TypeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_type);
						State = 474;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 475; Match(LParen);
						State = 476; type(0);
						State = 477; Match(RParen);
						}
						break;
					}
					} 
				}
				State = 483;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public ITerminalNode StringType() { return GetToken(VeeParser.StringType, 0); }
		public ITerminalNode NumberType() { return GetToken(VeeParser.NumberType, 0); }
		public ITerminalNode BooleanType() { return GetToken(VeeParser.BooleanType, 0); }
		public ITerminalNode ListType() { return GetToken(VeeParser.ListType, 0); }
		public ITerminalNode HashType() { return GetToken(VeeParser.HashType, 0); }
		public ITerminalNode TupleType() { return GetToken(VeeParser.TupleType, 0); }
		public ITerminalNode RecordType() { return GetToken(VeeParser.RecordType, 0); }
		public ITerminalNode EnumType() { return GetToken(VeeParser.EnumType, 0); }
		public ITerminalNode TryType() { return GetToken(VeeParser.TryType, 0); }
		public ITerminalNode OptionType() { return GetToken(VeeParser.OptionType, 0); }
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 62, RULE_typeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 484;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << StringType) | (1L << NumberType) | (1L << BooleanType) | (1L << EnumType) | (1L << TupleType) | (1L << RecordType) | (1L << ListType) | (1L << HashType) | (1L << TryType) | (1L << OptionType))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationsContext : ParserRuleContext {
		public ITerminalNode Let() { return GetToken(VeeParser.Let, 0); }
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(VeeParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(VeeParser.Comma, i);
		}
		public DeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitDeclarations(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationsContext declarations() {
		DeclarationsContext _localctx = new DeclarationsContext(Context, State);
		EnterRule(_localctx, 64, RULE_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486; Match(Let);
			State = 487; declaration();
			State = 492;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 488; Match(Comma);
				State = 489; declaration();
				}
				}
				State = 494;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtractionContext : ParserRuleContext {
		public ExtractionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extraction; } }
	 
		public ExtractionContext() { }
		public virtual void CopyFrom(ExtractionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RecordExtractionContext : ExtractionContext {
		public ITerminalNode LBrace() { return GetToken(VeeParser.LBrace, 0); }
		public ITerminalNode[] Name() { return GetTokens(VeeParser.Name); }
		public ITerminalNode Name(int i) {
			return GetToken(VeeParser.Name, i);
		}
		public ITerminalNode RBrace() { return GetToken(VeeParser.RBrace, 0); }
		public AliasContext[] alias() {
			return GetRuleContexts<AliasContext>();
		}
		public AliasContext alias(int i) {
			return GetRuleContext<AliasContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(VeeParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(VeeParser.Comma, i);
		}
		public RecordExtractionContext(ExtractionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterRecordExtraction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitRecordExtraction(this);
		}
	}
	public partial class ScalarExtractionContext : ExtractionContext {
		public ITerminalNode Name() { return GetToken(VeeParser.Name, 0); }
		public ScalarExtractionContext(ExtractionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterScalarExtraction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitScalarExtraction(this);
		}
	}
	public partial class TupleExtractionContext : ExtractionContext {
		public ITerminalNode LParen() { return GetToken(VeeParser.LParen, 0); }
		public ITerminalNode[] Name() { return GetTokens(VeeParser.Name); }
		public ITerminalNode Name(int i) {
			return GetToken(VeeParser.Name, i);
		}
		public ITerminalNode RParen() { return GetToken(VeeParser.RParen, 0); }
		public ITerminalNode[] Comma() { return GetTokens(VeeParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(VeeParser.Comma, i);
		}
		public TupleExtractionContext(ExtractionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterTupleExtraction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitTupleExtraction(this);
		}
	}

	[RuleVersion(0)]
	public ExtractionContext extraction() {
		ExtractionContext _localctx = new ExtractionContext(Context, State);
		EnterRule(_localctx, 66, RULE_extraction);
		int _la;
		try {
			State = 519;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Name:
				_localctx = new ScalarExtractionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 495; Match(Name);
				}
				break;
			case LParen:
				_localctx = new TupleExtractionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 496; Match(LParen);
				State = 497; Match(Name);
				State = 500;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 498; Match(Comma);
					State = 499; Match(Name);
					}
					}
					State = 502;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Comma );
				State = 504; Match(RParen);
				}
				break;
			case LBrace:
				_localctx = new RecordExtractionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 505; Match(LBrace);
				State = 506; Match(Name);
				State = 508;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==As) {
					{
					State = 507; alias();
					}
				}

				State = 515;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 510; Match(Comma);
					State = 511; Match(Name);
					State = 512; alias();
					}
					}
					State = 517;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 518; Match(RBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasContext : ParserRuleContext {
		public ITerminalNode As() { return GetToken(VeeParser.As, 0); }
		public ITerminalNode Name() { return GetToken(VeeParser.Name, 0); }
		public AliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterAlias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitAlias(this);
		}
	}

	[RuleVersion(0)]
	public AliasContext alias() {
		AliasContext _localctx = new AliasContext(Context, State);
		EnterRule(_localctx, 68, RULE_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 521; Match(As);
			State = 522; Match(Name);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public ExtractionContext extraction() {
			return GetRuleContext<ExtractionContext>(0);
		}
		public ITerminalNode Colon() { return GetToken(VeeParser.Colon, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 70, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 524; extraction();
			State = 525; Match(Colon);
			State = 526; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefsContext : ParserRuleContext {
		public ITerminalNode Type() { return GetToken(VeeParser.Type, 0); }
		public TypeDefContext[] typeDef() {
			return GetRuleContexts<TypeDefContext>();
		}
		public TypeDefContext typeDef(int i) {
			return GetRuleContext<TypeDefContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(VeeParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(VeeParser.Comma, i);
		}
		public TypeDefsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDefs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterTypeDefs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitTypeDefs(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefsContext typeDefs() {
		TypeDefsContext _localctx = new TypeDefsContext(Context, State);
		EnterRule(_localctx, 72, RULE_typeDefs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 528; Match(Type);
			State = 529; typeDef();
			State = 534;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 530; Match(Comma);
				State = 531; typeDef();
				}
				}
				State = 536;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefContext : ParserRuleContext {
		public ITerminalNode Name() { return GetToken(VeeParser.Name, 0); }
		public ITerminalNode Colon() { return GetToken(VeeParser.Colon, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.EnterTypeDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVeeListener typedListener = listener as IVeeListener;
			if (typedListener != null) typedListener.ExitTypeDef(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefContext typeDef() {
		TypeDefContext _localctx = new TypeDefContext(Context, State);
		EnterRule(_localctx, 74, RULE_typeDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 537; Match(Name);
			State = 538; Match(Colon);
			State = 539; type(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 30: return type_sempred((TypeContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 7);
		case 5: return Precpred(Context, 6);
		case 6: return Precpred(Context, 5);
		case 7: return Precpred(Context, 4);
		case 8: return Precpred(Context, 18);
		case 9: return Precpred(Context, 17);
		}
		return true;
	}
	private bool type_sempred(TypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(Context, 4);
		case 11: return Precpred(Context, 3);
		case 12: return Precpred(Context, 2);
		case 13: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '<', '\x220', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x3', '\x2', '\x5', '\x2', 'P', '\n', 
		'\x2', '\x3', '\x2', '\x5', '\x2', 'S', '\n', '\x2', '\x3', '\x2', '\x5', 
		'\x2', 'V', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x6', '\x3', '\x62', '\n', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\x63', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\a', '\x3', 'l', '\n', '\x3', '\f', '\x3', 
		'\xE', '\x3', 'o', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 'w', '\n', '\x3', 
		'\f', '\x3', '\xE', '\x3', 'z', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x81', '\n', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '\x92', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\xA2', '\n', '\x3', '\f', '\x3', 
		'\xE', '\x3', '\xA5', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '\xA9', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\a', '\x3', '\xC8', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
		'\xCB', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 
		'\xD0', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\xD3', '\v', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\xDE', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', '\xE1', '\v', '\x6', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', '\xE6', '\n', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\xF1', '\n', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\xF7', '\n', 
		'\n', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xFB', '\n', '\v', '\x3', 
		'\f', '\x3', '\f', '\x5', '\f', '\xFF', '\n', '\f', '\x3', '\f', '\x3', 
		'\f', '\a', '\f', '\x103', '\n', '\f', '\f', '\f', '\xE', '\f', '\x106', 
		'\v', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x10A', '\n', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\a', '\r', '\x112', '\n', '\r', '\f', '\r', '\xE', '\r', '\x115', 
		'\v', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x119', '\n', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\a', '\xF', '\x127', '\n', '\xF', '\f', '\xF', '\xE', 
		'\xF', '\x12A', '\v', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', 
		'\x12E', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x136', '\n', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x13B', '\n', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', 
		'\x11', '\x141', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\x144', '\v', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x148', '\n', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x5', '\x12', '\x150', '\n', '\x12', '\x3', '\x12', '\x5', 
		'\x12', '\x153', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\a', '\x13', '\x15A', '\n', '\x13', '\f', 
		'\x13', '\xE', '\x13', '\x15D', '\v', '\x13', '\x3', '\x13', '\x5', '\x13', 
		'\x160', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x177', '\n', '\x15', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x5', '\x16', '\x17E', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x19A', 
		'\n', '\x1C', '\x5', '\x1C', '\x19C', '\n', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x1A3', 
		'\n', '\x1C', '\a', '\x1C', '\x1A5', '\n', '\x1C', '\f', '\x1C', '\xE', 
		'\x1C', '\x1A8', '\v', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\a', '\x1D', '\x1AD', '\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', '\x1B0', 
		'\v', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x1B4', '\n', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\a', '\x1E', '\x1B8', '\n', '\x1E', 
		'\f', '\x1E', '\xE', '\x1E', '\x1BB', '\v', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x1C1', '\n', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x1C5', '\n', '\x1F', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x1CA', '\n', ' ', '\x3', ' ', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', 
		'\x1D2', '\n', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\a', ' ', '\x1E2', '\n', ' ', 
		'\f', ' ', '\xE', ' ', '\x1E5', '\v', ' ', '\x3', '!', '\x3', '!', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\a', '\"', '\x1ED', '\n', 
		'\"', '\f', '\"', '\xE', '\"', '\x1F0', '\v', '\"', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\x6', '#', '\x1F7', '\n', '#', 
		'\r', '#', '\xE', '#', '\x1F8', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x5', '#', '\x1FF', '\n', '#', '\x3', '#', '\x3', '#', '\x3', '#', 
		'\a', '#', '\x204', '\n', '#', '\f', '#', '\xE', '#', '\x207', '\v', '#', 
		'\x3', '#', '\x5', '#', '\x20A', '\n', '#', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\a', '&', '\x217', '\n', '&', '\f', '&', 
		'\xE', '&', '\x21A', '\v', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\x3', '\'', '\x2', '\x4', '\x4', '>', '(', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', 
		'\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 
		'H', 'J', 'L', '\x2', '\v', '\x3', '\x2', '\x13', '\x14', '\x3', '\x2', 
		'\x10', '\x12', '\x3', '\x2', '\x15', '\x16', '\x3', '\x2', '\x17', '\x1A', 
		'\x3', '\x2', '\x1F', ' ', '\x5', '\x2', '*', '+', '\x39', '\x39', ';', 
		';', '\x4', '\x2', '\xF', '\x1A', '\x1E', ' ', '\x4', '\x2', '\x14', '\x14', 
		'!', '!', '\x3', '\x2', '/', '\x38', '\x2', '\x24F', '\x2', 'U', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\xA8', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\xCC', '\x3', '\x2', '\x2', '\x2', '\b', '\xD4', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\xD8', '\x3', '\x2', '\x2', '\x2', '\f', '\xE2', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\xF0', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\xF2', '\x3', '\x2', '\x2', '\x2', '\x12', '\xF6', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\xF8', '\x3', '\x2', '\x2', '\x2', '\x16', '\xFC', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x11C', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x122', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x13A', '\x3', '\x2', '\x2', '\x2', ' ', '\x13C', '\x3', 
		'\x2', '\x2', '\x2', '\"', '\x152', '\x3', '\x2', '\x2', '\x2', '$', '\x154', 
		'\x3', '\x2', '\x2', '\x2', '&', '\x161', '\x3', '\x2', '\x2', '\x2', 
		'(', '\x176', '\x3', '\x2', '\x2', '\x2', '*', '\x17D', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x17F', '\x3', '\x2', '\x2', '\x2', '.', '\x181', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x183', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x34', '\x18F', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x19B', '\x3', '\x2', '\x2', '\x2', '\x38', '\x1A9', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x1B1', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x1C4', '\x3', '\x2', '\x2', '\x2', '>', '\x1D1', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x1E6', '\x3', '\x2', '\x2', '\x2', '\x42', '\x1E8', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x209', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x20B', '\x3', '\x2', '\x2', '\x2', 'H', '\x20E', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x212', '\x3', '\x2', '\x2', '\x2', 'L', '\x21B', 
		'\x3', '\x2', '\x2', '\x2', 'N', 'P', '\x5', 'J', '&', '\x2', 'O', 'N', 
		'\x3', '\x2', '\x2', '\x2', 'O', 'P', '\x3', '\x2', '\x2', '\x2', 'P', 
		'R', '\x3', '\x2', '\x2', '\x2', 'Q', 'S', '\x5', '\x42', '\"', '\x2', 
		'R', 'Q', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x3', '\x2', '\x2', '\x2', 
		'S', 'T', '\x3', '\x2', '\x2', '\x2', 'T', 'V', '\a', '$', '\x2', '\x2', 
		'U', 'O', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\x3', '\x2', '\x2', '\x2', 
		'V', 'W', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x5', '\x4', '\x3', '\x2', 
		'X', 'Y', '\a', '\x2', '\x2', '\x3', 'Y', '\x3', '\x3', '\x2', '\x2', 
		'\x2', 'Z', '[', '\b', '\x3', '\x1', '\x2', '[', '\xA9', '\x5', '\x10', 
		'\t', '\x2', '\\', '\xA9', '\a', ':', '\x2', '\x2', ']', '^', '\a', '\a', 
		'\x2', '\x2', '^', '\x61', '\x5', '\x4', '\x3', '\x2', '_', '`', '\a', 
		'\t', '\x2', '\x2', '`', '\x62', '\x5', '\x4', '\x3', '\x2', '\x61', '_', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x65', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', 
		'\a', '\b', '\x2', '\x2', '\x66', '\xA9', '\x3', '\x2', '\x2', '\x2', 
		'g', 'h', '\a', '\x5', '\x2', '\x2', 'h', 'm', '\x5', '\x32', '\x1A', 
		'\x2', 'i', 'j', '\a', '\t', '\x2', '\x2', 'j', 'l', '\x5', '\x32', '\x1A', 
		'\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 'l', 'o', '\x3', '\x2', '\x2', 
		'\x2', 'm', 'k', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\x3', '\x2', '\x2', 
		'\x2', 'n', 'p', '\x3', '\x2', '\x2', '\x2', 'o', 'm', '\x3', '\x2', '\x2', 
		'\x2', 'p', 'q', '\a', '\x6', '\x2', '\x2', 'q', '\xA9', '\x3', '\x2', 
		'\x2', '\x2', 'r', 's', '\a', '\x5', '\x2', '\x2', 's', 'x', '\x5', '\x34', 
		'\x1B', '\x2', 't', 'u', '\a', '\t', '\x2', '\x2', 'u', 'w', '\x5', '\x34', 
		'\x1B', '\x2', 'v', 't', '\x3', '\x2', '\x2', '\x2', 'w', 'z', '\x3', 
		'\x2', '\x2', '\x2', 'x', 'v', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x3', 
		'\x2', '\x2', '\x2', 'y', '{', '\x3', '\x2', '\x2', '\x2', 'z', 'x', '\x3', 
		'\x2', '\x2', '\x2', '{', '|', '\a', '\x6', '\x2', '\x2', '|', '\xA9', 
		'\x3', '\x2', '\x2', '\x2', '}', '\x80', '\a', '\x3', '\x2', '\x2', '~', 
		'\x81', '\x5', '\x30', '\x19', '\x2', '\x7F', '\x81', '\x5', '\x38', '\x1D', 
		'\x2', '\x80', '~', '\x3', '\x2', '\x2', '\x2', '\x80', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x81', '\x82', '\x3', '\x2', '\x2', '\x2', '\x82', 
		'\x83', '\a', '\x4', '\x2', '\x2', '\x83', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\x84', '\x85', '\a', '\a', '\x2', '\x2', '\x85', '\x86', '\x5', 
		'\x4', '\x3', '\x2', '\x86', '\x87', '\a', '\b', '\x2', '\x2', '\x87', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\a', '!', '\x2', 
		'\x2', '\x89', '\xA9', '\x5', '\x4', '\x3', '\x11', '\x8A', '\x8B', '\t', 
		'\x2', '\x2', '\x2', '\x8B', '\xA9', '\x5', '\x4', '\x3', '\x10', '\x8C', 
		'\x8D', '\a', '\"', '\x2', '\x2', '\x8D', '\xA9', '\x5', '\x4', '\x3', 
		'\xF', '\x8E', '\x91', '\a', ',', '\x2', '\x2', '\x8F', '\x92', '\x5', 
		'>', ' ', '\x2', '\x90', '\x92', '\a', ':', '\x2', '\x2', '\x91', '\x8F', 
		'\x3', '\x2', '\x2', '\x2', '\x91', '\x90', '\x3', '\x2', '\x2', '\x2', 
		'\x92', '\xA9', '\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\a', '\x1B', 
		'\x2', '\x2', '\x94', '\x95', '\x5', '(', '\x15', '\x2', '\x95', '\x96', 
		'\a', '\x1B', '\x2', '\x2', '\x96', '\xA9', '\x3', '\x2', '\x2', '\x2', 
		'\x97', '\x98', '\a', '\xE', '\x2', '\x2', '\x98', '\x99', '\a', '\a', 
		'\x2', '\x2', '\x99', '\x9A', '\x5', '\x36', '\x1C', '\x2', '\x9A', '\x9B', 
		'\a', '\b', '\x2', '\x2', '\x9B', '\x9C', '\a', '\r', '\x2', '\x2', '\x9C', 
		'\x9D', '\x5', '\x4', '\x3', '\x4', '\x9D', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\x9E', '\xA3', '\a', '%', '\x2', '\x2', '\x9F', '\xA2', '\x5', 
		'\x6', '\x4', '\x2', '\xA0', '\xA2', '\x5', '\n', '\x6', '\x2', '\xA1', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA0', '\x3', '\x2', '\x2', 
		'\x2', '\xA2', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA1', '\x3', 
		'\x2', '\x2', '\x2', '\xA3', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\xA6', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\xA6', '\xA7', '\a', ')', '\x2', '\x2', '\xA7', '\xA9', '\x5', 
		'\x4', '\x3', '\x3', '\xA8', 'Z', '\x3', '\x2', '\x2', '\x2', '\xA8', 
		'\\', '\x3', '\x2', '\x2', '\x2', '\xA8', ']', '\x3', '\x2', '\x2', '\x2', 
		'\xA8', 'g', '\x3', '\x2', '\x2', '\x2', '\xA8', 'r', '\x3', '\x2', '\x2', 
		'\x2', '\xA8', '}', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '\xA8', '\x88', '\x3', '\x2', '\x2', '\x2', '\xA8', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x8C', '\x3', '\x2', '\x2', 
		'\x2', '\xA8', '\x8E', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x93', '\x3', 
		'\x2', '\x2', '\x2', '\xA8', '\x97', '\x3', '\x2', '\x2', '\x2', '\xA8', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xC9', '\x3', '\x2', '\x2', 
		'\x2', '\xAA', '\xAB', '\f', '\r', '\x2', '\x2', '\xAB', '\xAC', '\a', 
		'\xF', '\x2', '\x2', '\xAC', '\xC8', '\x5', '\x4', '\x3', '\xE', '\xAD', 
		'\xAE', '\f', '\f', '\x2', '\x2', '\xAE', '\xAF', '\t', '\x3', '\x2', 
		'\x2', '\xAF', '\xC8', '\x5', '\x4', '\x3', '\r', '\xB0', '\xB1', '\f', 
		'\v', '\x2', '\x2', '\xB1', '\xB2', '\t', '\x2', '\x2', '\x2', '\xB2', 
		'\xC8', '\x5', '\x4', '\x3', '\f', '\xB3', '\xB4', '\f', '\n', '\x2', 
		'\x2', '\xB4', '\xB5', '\t', '\x4', '\x2', '\x2', '\xB5', '\xC8', '\x5', 
		'\x4', '\x3', '\v', '\xB6', '\xB7', '\f', '\t', '\x2', '\x2', '\xB7', 
		'\xB8', '\t', '\x5', '\x2', '\x2', '\xB8', '\xC8', '\x5', '\x4', '\x3', 
		'\n', '\xB9', '\xBA', '\f', '\b', '\x2', '\x2', '\xBA', '\xBB', '\t', 
		'\x6', '\x2', '\x2', '\xBB', '\xC8', '\x5', '\x4', '\x3', '\t', '\xBC', 
		'\xBD', '\f', '\a', '\x2', '\x2', '\xBD', '\xBE', '\a', '\x1E', '\x2', 
		'\x2', '\xBE', '\xC8', '\x5', '\x4', '\x3', '\b', '\xBF', '\xC0', '\f', 
		'\x6', '\x2', '\x2', '\xC0', '\xC1', '\a', '\x1C', '\x2', '\x2', '\xC1', 
		'\xC8', '\x5', '\x4', '\x3', '\a', '\xC2', '\xC3', '\f', '\x14', '\x2', 
		'\x2', '\xC3', '\xC4', '\a', '\x1D', '\x2', '\x2', '\xC4', '\xC8', '\x5', 
		'*', '\x16', '\x2', '\xC5', '\xC6', '\f', '\x13', '\x2', '\x2', '\xC6', 
		'\xC8', '\x5', ':', '\x1E', '\x2', '\xC7', '\xAA', '\x3', '\x2', '\x2', 
		'\x2', '\xC7', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xB0', '\x3', 
		'\x2', '\x2', '\x2', '\xC7', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xC7', 
		'\xB6', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xB9', '\x3', '\x2', '\x2', 
		'\x2', '\xC7', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xBF', '\x3', 
		'\x2', '\x2', '\x2', '\xC7', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC7', 
		'\xC5', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xCB', '\x3', '\x2', '\x2', 
		'\x2', '\xC9', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\x3', 
		'\x2', '\x2', '\x2', '\xCA', '\x5', '\x3', '\x2', '\x2', '\x2', '\xCB', 
		'\xC9', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xD1', '\x5', '\b', '\x5', 
		'\x2', '\xCD', '\xCE', '\a', '\x1B', '\x2', '\x2', '\xCE', '\xD0', '\x5', 
		'\b', '\x5', '\x2', '\xCF', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xD0', 
		'\xD3', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xCF', '\x3', '\x2', '\x2', 
		'\x2', '\xD1', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD2', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\xD3', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD4', 
		'\xD5', '\x5', '\x4', '\x3', '\x2', '\xD5', '\xD6', '\a', '(', '\x2', 
		'\x2', '\xD6', '\xD7', '\x5', '\x4', '\x3', '\x2', '\xD7', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\xD8', '\xD9', '\x5', '\x4', '\x3', '\x2', '\xD9', 
		'\xDA', '\a', '&', '\x2', '\x2', '\xDA', '\xDF', '\x5', '\f', '\a', '\x2', 
		'\xDB', '\xDC', '\a', '\x1B', '\x2', '\x2', '\xDC', '\xDE', '\x5', '\f', 
		'\a', '\x2', '\xDD', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xE1', 
		'\x3', '\x2', '\x2', '\x2', '\xDF', '\xDD', '\x3', '\x2', '\x2', '\x2', 
		'\xDF', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE0', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\xE1', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE5', 
		'\x5', '\xE', '\b', '\x2', '\xE3', '\xE4', '\a', '\'', '\x2', '\x2', '\xE4', 
		'\xE6', '\x5', '\x4', '\x3', '\x2', '\xE5', '\xE3', '\x3', '\x2', '\x2', 
		'\x2', '\xE5', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\x3', 
		'\x2', '\x2', '\x2', '\xE7', '\xE8', '\a', '(', '\x2', '\x2', '\xE8', 
		'\xE9', '\x5', '\x4', '\x3', '\x2', '\xE9', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\xEA', '\xF1', '\x5', '\x16', '\f', '\x2', '\xEB', '\xF1', '\x5', 
		'\x18', '\r', '\x2', '\xEC', '\xF1', '\x5', '\x1C', '\xF', '\x2', '\xED', 
		'\xF1', '\x5', ' ', '\x11', '\x2', '\xEE', '\xF1', '\x5', '\x14', '\v', 
		'\x2', '\xEF', '\xF1', '\x5', '$', '\x13', '\x2', '\xF0', '\xEA', '\x3', 
		'\x2', '\x2', '\x2', '\xF0', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xF0', 
		'\xEC', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xED', '\x3', '\x2', '\x2', 
		'\x2', '\xF0', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xEF', '\x3', 
		'\x2', '\x2', '\x2', '\xF1', '\xF', '\x3', '\x2', '\x2', '\x2', '\xF2', 
		'\xF3', '\t', '\a', '\x2', '\x2', '\xF3', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\xF4', '\xF7', '\a', ':', '\x2', '\x2', '\xF5', '\xF7', '\x5', 
		'\x10', '\t', '\x2', '\xF6', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF6', 
		'\xF5', '\x3', '\x2', '\x2', '\x2', '\xF7', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\xF8', '\xFA', '\x5', '>', ' ', '\x2', '\xF9', '\xFB', '\x5', 
		'\x46', '$', '\x2', '\xFA', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xFA', 
		'\xFB', '\x3', '\x2', '\x2', '\x2', '\xFB', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\xFC', '\xFE', '\a', '\x3', '\x2', '\x2', '\xFD', '\xFF', '\x5', 
		'\x12', '\n', '\x2', '\xFE', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFE', 
		'\xFF', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x104', '\x3', '\x2', '\x2', 
		'\x2', '\x100', '\x101', '\a', '\t', '\x2', '\x2', '\x101', '\x103', '\x5', 
		'\x12', '\n', '\x2', '\x102', '\x100', '\x3', '\x2', '\x2', '\x2', '\x103', 
		'\x106', '\x3', '\x2', '\x2', '\x2', '\x104', '\x102', '\x3', '\x2', '\x2', 
		'\x2', '\x104', '\x105', '\x3', '\x2', '\x2', '\x2', '\x105', '\x109', 
		'\x3', '\x2', '\x2', '\x2', '\x106', '\x104', '\x3', '\x2', '\x2', '\x2', 
		'\x107', '\x108', '\a', '\t', '\x2', '\x2', '\x108', '\x10A', '\x5', '&', 
		'\x14', '\x2', '\x109', '\x107', '\x3', '\x2', '\x2', '\x2', '\x109', 
		'\x10A', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x10B', '\x3', '\x2', '\x2', 
		'\x2', '\x10B', '\x10C', '\a', '\x4', '\x2', '\x2', '\x10C', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x10D', '\x10E', '\a', '\x5', '\x2', '\x2', '\x10E', 
		'\x113', '\x5', '\x1A', '\xE', '\x2', '\x10F', '\x110', '\a', '\t', '\x2', 
		'\x2', '\x110', '\x112', '\x5', '\x1A', '\xE', '\x2', '\x111', '\x10F', 
		'\x3', '\x2', '\x2', '\x2', '\x112', '\x115', '\x3', '\x2', '\x2', '\x2', 
		'\x113', '\x111', '\x3', '\x2', '\x2', '\x2', '\x113', '\x114', '\x3', 
		'\x2', '\x2', '\x2', '\x114', '\x118', '\x3', '\x2', '\x2', '\x2', '\x115', 
		'\x113', '\x3', '\x2', '\x2', '\x2', '\x116', '\x117', '\a', '\t', '\x2', 
		'\x2', '\x117', '\x119', '\x5', '&', '\x14', '\x2', '\x118', '\x116', 
		'\x3', '\x2', '\x2', '\x2', '\x118', '\x119', '\x3', '\x2', '\x2', '\x2', 
		'\x119', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11B', '\a', 
		'\x6', '\x2', '\x2', '\x11B', '\x19', '\x3', '\x2', '\x2', '\x2', '\x11C', 
		'\x11D', '\a', '\x3', '\x2', '\x2', '\x11D', '\x11E', '\x5', '\x10', '\t', 
		'\x2', '\x11E', '\x11F', '\a', '\x4', '\x2', '\x2', '\x11F', '\x120', 
		'\a', '\v', '\x2', '\x2', '\x120', '\x121', '\x5', '\x12', '\n', '\x2', 
		'\x121', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x122', '\x123', '\a', '\x5', 
		'\x2', '\x2', '\x123', '\x128', '\x5', '\x1E', '\x10', '\x2', '\x124', 
		'\x125', '\a', '\t', '\x2', '\x2', '\x125', '\x127', '\x5', '\x1E', '\x10', 
		'\x2', '\x126', '\x124', '\x3', '\x2', '\x2', '\x2', '\x127', '\x12A', 
		'\x3', '\x2', '\x2', '\x2', '\x128', '\x126', '\x3', '\x2', '\x2', '\x2', 
		'\x128', '\x129', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12D', '\x3', 
		'\x2', '\x2', '\x2', '\x12A', '\x128', '\x3', '\x2', '\x2', '\x2', '\x12B', 
		'\x12C', '\a', '\t', '\x2', '\x2', '\x12C', '\x12E', '\x5', '&', '\x14', 
		'\x2', '\x12D', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', 
		'\x3', '\x2', '\x2', '\x2', '\x12E', '\x12F', '\x3', '\x2', '\x2', '\x2', 
		'\x12F', '\x130', '\a', '\x6', '\x2', '\x2', '\x130', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x131', '\x132', '\a', ':', '\x2', '\x2', '\x132', '\x133', 
		'\a', '\v', '\x2', '\x2', '\x133', '\x135', '\x5', '>', ' ', '\x2', '\x134', 
		'\x136', '\x5', '\x46', '$', '\x2', '\x135', '\x134', '\x3', '\x2', '\x2', 
		'\x2', '\x135', '\x136', '\x3', '\x2', '\x2', '\x2', '\x136', '\x13B', 
		'\x3', '\x2', '\x2', '\x2', '\x137', '\x138', '\a', ':', '\x2', '\x2', 
		'\x138', '\x139', '\a', '\v', '\x2', '\x2', '\x139', '\x13B', '\x5', '\x10', 
		'\t', '\x2', '\x13A', '\x131', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x137', 
		'\x3', '\x2', '\x2', '\x2', '\x13B', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x13C', '\x13D', '\a', '\a', '\x2', '\x2', '\x13D', '\x142', '\x5', '\"', 
		'\x12', '\x2', '\x13E', '\x13F', '\a', '\t', '\x2', '\x2', '\x13F', '\x141', 
		'\x5', '\"', '\x12', '\x2', '\x140', '\x13E', '\x3', '\x2', '\x2', '\x2', 
		'\x141', '\x144', '\x3', '\x2', '\x2', '\x2', '\x142', '\x140', '\x3', 
		'\x2', '\x2', '\x2', '\x142', '\x143', '\x3', '\x2', '\x2', '\x2', '\x143', 
		'\x147', '\x3', '\x2', '\x2', '\x2', '\x144', '\x142', '\x3', '\x2', '\x2', 
		'\x2', '\x145', '\x146', '\a', '\t', '\x2', '\x2', '\x146', '\x148', '\x5', 
		'&', '\x14', '\x2', '\x147', '\x145', '\x3', '\x2', '\x2', '\x2', '\x147', 
		'\x148', '\x3', '\x2', '\x2', '\x2', '\x148', '\x149', '\x3', '\x2', '\x2', 
		'\x2', '\x149', '\x14A', '\a', '\b', '\x2', '\x2', '\x14A', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x14B', '\x14C', '\a', ':', '\x2', '\x2', '\x14C', 
		'\x14F', '\a', '\v', '\x2', '\x2', '\x14D', '\x150', '\x5', '>', ' ', 
		'\x2', '\x14E', '\x150', '\a', ':', '\x2', '\x2', '\x14F', '\x14D', '\x3', 
		'\x2', '\x2', '\x2', '\x14F', '\x14E', '\x3', '\x2', '\x2', '\x2', '\x150', 
		'\x153', '\x3', '\x2', '\x2', '\x2', '\x151', '\x153', '\x5', '\x10', 
		'\t', '\x2', '\x152', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x152', '\x151', 
		'\x3', '\x2', '\x2', '\x2', '\x153', '#', '\x3', '\x2', '\x2', '\x2', 
		'\x154', '\x15F', '\a', ':', '\x2', '\x2', '\x155', '\x156', '\a', '\a', 
		'\x2', '\x2', '\x156', '\x15B', '\a', ':', '\x2', '\x2', '\x157', '\x158', 
		'\a', '\t', '\x2', '\x2', '\x158', '\x15A', '\a', ':', '\x2', '\x2', '\x159', 
		'\x157', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x15D', '\x3', '\x2', '\x2', 
		'\x2', '\x15B', '\x159', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x15C', 
		'\x3', '\x2', '\x2', '\x2', '\x15C', '\x15E', '\x3', '\x2', '\x2', '\x2', 
		'\x15D', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x160', '\a', 
		'\b', '\x2', '\x2', '\x15F', '\x155', '\x3', '\x2', '\x2', '\x2', '\x15F', 
		'\x160', '\x3', '\x2', '\x2', '\x2', '\x160', '%', '\x3', '\x2', '\x2', 
		'\x2', '\x161', '\x162', '\a', '\f', '\x2', '\x2', '\x162', '\x163', '\a', 
		':', '\x2', '\x2', '\x163', '\'', '\x3', '\x2', '\x2', '\x2', '\x164', 
		'\x165', '\a', '\n', '\x2', '\x2', '\x165', '\x166', '\x5', ',', '\x17', 
		'\x2', '\x166', '\x167', '\x5', '\x4', '\x3', '\x2', '\x167', '\x177', 
		'\x3', '\x2', '\x2', '\x2', '\x168', '\x169', '\x5', '\x4', '\x3', '\x2', 
		'\x169', '\x16A', '\x5', ',', '\x17', '\x2', '\x16A', '\x16B', '\a', '\n', 
		'\x2', '\x2', '\x16B', '\x177', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x16D', 
		'\a', '\n', '\x2', '\x2', '\x16D', '\x16E', '\x5', ',', '\x17', '\x2', 
		'\x16E', '\x16F', '\a', '\n', '\x2', '\x2', '\x16F', '\x177', '\x3', '\x2', 
		'\x2', '\x2', '\x170', '\x171', '\x5', '.', '\x18', '\x2', '\x171', '\x172', 
		'\a', '\n', '\x2', '\x2', '\x172', '\x177', '\x3', '\x2', '\x2', '\x2', 
		'\x173', '\x174', '\a', '\n', '\x2', '\x2', '\x174', '\x175', '\a', '\x1D', 
		'\x2', '\x2', '\x175', '\x177', '\x5', '*', '\x16', '\x2', '\x176', '\x164', 
		'\x3', '\x2', '\x2', '\x2', '\x176', '\x168', '\x3', '\x2', '\x2', '\x2', 
		'\x176', '\x16C', '\x3', '\x2', '\x2', '\x2', '\x176', '\x170', '\x3', 
		'\x2', '\x2', '\x2', '\x176', '\x173', '\x3', '\x2', '\x2', '\x2', '\x177', 
		')', '\x3', '\x2', '\x2', '\x2', '\x178', '\x179', '\a', '\x3', '\x2', 
		'\x2', '\x179', '\x17A', '\x5', '\x4', '\x3', '\x2', '\x17A', '\x17B', 
		'\a', '\x4', '\x2', '\x2', '\x17B', '\x17E', '\x3', '\x2', '\x2', '\x2', 
		'\x17C', '\x17E', '\a', ':', '\x2', '\x2', '\x17D', '\x178', '\x3', '\x2', 
		'\x2', '\x2', '\x17D', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x17E', '+', 
		'\x3', '\x2', '\x2', '\x2', '\x17F', '\x180', '\t', '\b', '\x2', '\x2', 
		'\x180', '-', '\x3', '\x2', '\x2', '\x2', '\x181', '\x182', '\t', '\t', 
		'\x2', '\x2', '\x182', '/', '\x3', '\x2', '\x2', '\x2', '\x183', '\x184', 
		'\a', '\x39', '\x2', '\x2', '\x184', '\x185', '\a', '\f', '\x2', '\x2', 
		'\x185', '\x186', '\t', '\x2', '\x2', '\x2', '\x186', '\x187', '\a', '\x39', 
		'\x2', '\x2', '\x187', '\x188', '\a', '\f', '\x2', '\x2', '\x188', '\x189', 
		'\x3', '\x2', '\x2', '\x2', '\x189', '\x18A', '\a', '\x39', '\x2', '\x2', 
		'\x18A', '\x31', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x18C', '\a', ':', 
		'\x2', '\x2', '\x18C', '\x18D', '\a', '\v', '\x2', '\x2', '\x18D', '\x18E', 
		'\x5', '\x4', '\x3', '\x2', '\x18E', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x18F', '\x190', '\a', '\x3', '\x2', '\x2', '\x190', '\x191', '\x5', 
		'\x4', '\x3', '\x2', '\x191', '\x192', '\a', '\x4', '\x2', '\x2', '\x192', 
		'\x193', '\a', '\v', '\x2', '\x2', '\x193', '\x194', '\x5', '\x4', '\x3', 
		'\x2', '\x194', '\x35', '\x3', '\x2', '\x2', '\x2', '\x195', '\x196', 
		'\a', ':', '\x2', '\x2', '\x196', '\x199', '\a', '\v', '\x2', '\x2', '\x197', 
		'\x19A', '\a', ':', '\x2', '\x2', '\x198', '\x19A', '\x5', '>', ' ', '\x2', 
		'\x199', '\x197', '\x3', '\x2', '\x2', '\x2', '\x199', '\x198', '\x3', 
		'\x2', '\x2', '\x2', '\x19A', '\x19C', '\x3', '\x2', '\x2', '\x2', '\x19B', 
		'\x195', '\x3', '\x2', '\x2', '\x2', '\x19B', '\x19C', '\x3', '\x2', '\x2', 
		'\x2', '\x19C', '\x1A6', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x19E', 
		'\a', '\t', '\x2', '\x2', '\x19E', '\x19F', '\a', ':', '\x2', '\x2', '\x19F', 
		'\x1A2', '\a', '\v', '\x2', '\x2', '\x1A0', '\x1A3', '\a', ':', '\x2', 
		'\x2', '\x1A1', '\x1A3', '\x5', '>', ' ', '\x2', '\x1A2', '\x1A0', '\x3', 
		'\x2', '\x2', '\x2', '\x1A2', '\x1A1', '\x3', '\x2', '\x2', '\x2', '\x1A3', 
		'\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A4', '\x19D', '\x3', '\x2', '\x2', 
		'\x2', '\x1A5', '\x1A8', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x1A4', 
		'\x3', '\x2', '\x2', '\x2', '\x1A6', '\x1A7', '\x3', '\x2', '\x2', '\x2', 
		'\x1A7', '\x37', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1A6', '\x3', 
		'\x2', '\x2', '\x2', '\x1A9', '\x1AE', '\x5', '\x4', '\x3', '\x2', '\x1AA', 
		'\x1AB', '\a', '\t', '\x2', '\x2', '\x1AB', '\x1AD', '\x5', '\x4', '\x3', 
		'\x2', '\x1AC', '\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1B0', 
		'\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1AC', '\x3', '\x2', '\x2', '\x2', 
		'\x1AE', '\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x1B0', '\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1B1', 
		'\x1B3', '\a', '\a', '\x2', '\x2', '\x1B2', '\x1B4', '\x5', '<', '\x1F', 
		'\x2', '\x1B3', '\x1B2', '\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B4', 
		'\x3', '\x2', '\x2', '\x2', '\x1B4', '\x1B9', '\x3', '\x2', '\x2', '\x2', 
		'\x1B5', '\x1B6', '\a', '\t', '\x2', '\x2', '\x1B6', '\x1B8', '\x5', '<', 
		'\x1F', '\x2', '\x1B7', '\x1B5', '\x3', '\x2', '\x2', '\x2', '\x1B8', 
		'\x1BB', '\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1B7', '\x3', '\x2', '\x2', 
		'\x2', '\x1B9', '\x1BA', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1BC', 
		'\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1B9', '\x3', '\x2', '\x2', '\x2', 
		'\x1BC', '\x1BD', '\a', '\b', '\x2', '\x2', '\x1BD', ';', '\x3', '\x2', 
		'\x2', '\x2', '\x1BE', '\x1BF', '\a', ':', '\x2', '\x2', '\x1BF', '\x1C1', 
		'\a', '\v', '\x2', '\x2', '\x1C0', '\x1BE', '\x3', '\x2', '\x2', '\x2', 
		'\x1C0', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1C2', '\x3', 
		'\x2', '\x2', '\x2', '\x1C2', '\x1C5', '\x5', '\x4', '\x3', '\x2', '\x1C3', 
		'\x1C5', '\a', '\n', '\x2', '\x2', '\x1C4', '\x1C0', '\x3', '\x2', '\x2', 
		'\x2', '\x1C4', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x1C5', '=', '\x3', 
		'\x2', '\x2', '\x2', '\x1C6', '\x1C9', '\b', ' ', '\x1', '\x2', '\x1C7', 
		'\x1C8', '\a', ':', '\x2', '\x2', '\x1C8', '\x1CA', '\a', '\v', '\x2', 
		'\x2', '\x1C9', '\x1C7', '\x3', '\x2', '\x2', '\x2', '\x1C9', '\x1CA', 
		'\x3', '\x2', '\x2', '\x2', '\x1CA', '\x1CB', '\x3', '\x2', '\x2', '\x2', 
		'\x1CB', '\x1D2', '\x5', '@', '!', '\x2', '\x1CC', '\x1D2', '\a', '\n', 
		'\x2', '\x2', '\x1CD', '\x1CE', '\a', '\a', '\x2', '\x2', '\x1CE', '\x1CF', 
		'\x5', '>', ' ', '\x2', '\x1CF', '\x1D0', '\a', '\b', '\x2', '\x2', '\x1D0', 
		'\x1D2', '\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1C6', '\x3', '\x2', '\x2', 
		'\x2', '\x1D1', '\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1CD', 
		'\x3', '\x2', '\x2', '\x2', '\x1D2', '\x1E3', '\x3', '\x2', '\x2', '\x2', 
		'\x1D3', '\x1D4', '\f', '\x6', '\x2', '\x2', '\x1D4', '\x1D5', '\a', '\r', 
		'\x2', '\x2', '\x1D5', '\x1E2', '\x5', '>', ' ', '\a', '\x1D6', '\x1D7', 
		'\f', '\x5', '\x2', '\x2', '\x1D7', '\x1D8', '\a', '\x1B', '\x2', '\x2', 
		'\x1D8', '\x1E2', '\x5', '>', ' ', '\x6', '\x1D9', '\x1DA', '\f', '\x4', 
		'\x2', '\x2', '\x1DA', '\x1DB', '\a', '\x10', '\x2', '\x2', '\x1DB', '\x1E2', 
		'\x5', '>', ' ', '\x5', '\x1DC', '\x1DD', '\f', '\x3', '\x2', '\x2', '\x1DD', 
		'\x1DE', '\a', '\a', '\x2', '\x2', '\x1DE', '\x1DF', '\x5', '>', ' ', 
		'\x2', '\x1DF', '\x1E0', '\a', '\b', '\x2', '\x2', '\x1E0', '\x1E2', '\x3', 
		'\x2', '\x2', '\x2', '\x1E1', '\x1D3', '\x3', '\x2', '\x2', '\x2', '\x1E1', 
		'\x1D6', '\x3', '\x2', '\x2', '\x2', '\x1E1', '\x1D9', '\x3', '\x2', '\x2', 
		'\x2', '\x1E1', '\x1DC', '\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1E5', 
		'\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1E1', '\x3', '\x2', '\x2', '\x2', 
		'\x1E3', '\x1E4', '\x3', '\x2', '\x2', '\x2', '\x1E4', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x1E5', '\x1E3', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1E7', 
		'\t', '\n', '\x2', '\x2', '\x1E7', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x1E8', '\x1E9', '\a', '#', '\x2', '\x2', '\x1E9', '\x1EE', '\x5', 'H', 
		'%', '\x2', '\x1EA', '\x1EB', '\a', '\t', '\x2', '\x2', '\x1EB', '\x1ED', 
		'\x5', 'H', '%', '\x2', '\x1EC', '\x1EA', '\x3', '\x2', '\x2', '\x2', 
		'\x1ED', '\x1F0', '\x3', '\x2', '\x2', '\x2', '\x1EE', '\x1EC', '\x3', 
		'\x2', '\x2', '\x2', '\x1EE', '\x1EF', '\x3', '\x2', '\x2', '\x2', '\x1EF', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x1F0', '\x1EE', '\x3', '\x2', '\x2', 
		'\x2', '\x1F1', '\x20A', '\a', ':', '\x2', '\x2', '\x1F2', '\x1F3', '\a', 
		'\a', '\x2', '\x2', '\x1F3', '\x1F6', '\a', ':', '\x2', '\x2', '\x1F4', 
		'\x1F5', '\a', '\t', '\x2', '\x2', '\x1F5', '\x1F7', '\a', ':', '\x2', 
		'\x2', '\x1F6', '\x1F4', '\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1F8', 
		'\x3', '\x2', '\x2', '\x2', '\x1F8', '\x1F6', '\x3', '\x2', '\x2', '\x2', 
		'\x1F8', '\x1F9', '\x3', '\x2', '\x2', '\x2', '\x1F9', '\x1FA', '\x3', 
		'\x2', '\x2', '\x2', '\x1FA', '\x20A', '\a', '\b', '\x2', '\x2', '\x1FB', 
		'\x1FC', '\a', '\x5', '\x2', '\x2', '\x1FC', '\x1FE', '\a', ':', '\x2', 
		'\x2', '\x1FD', '\x1FF', '\x5', '\x46', '$', '\x2', '\x1FE', '\x1FD', 
		'\x3', '\x2', '\x2', '\x2', '\x1FE', '\x1FF', '\x3', '\x2', '\x2', '\x2', 
		'\x1FF', '\x205', '\x3', '\x2', '\x2', '\x2', '\x200', '\x201', '\a', 
		'\t', '\x2', '\x2', '\x201', '\x202', '\a', ':', '\x2', '\x2', '\x202', 
		'\x204', '\x5', '\x46', '$', '\x2', '\x203', '\x200', '\x3', '\x2', '\x2', 
		'\x2', '\x204', '\x207', '\x3', '\x2', '\x2', '\x2', '\x205', '\x203', 
		'\x3', '\x2', '\x2', '\x2', '\x205', '\x206', '\x3', '\x2', '\x2', '\x2', 
		'\x206', '\x208', '\x3', '\x2', '\x2', '\x2', '\x207', '\x205', '\x3', 
		'\x2', '\x2', '\x2', '\x208', '\x20A', '\a', '\x6', '\x2', '\x2', '\x209', 
		'\x1F1', '\x3', '\x2', '\x2', '\x2', '\x209', '\x1F2', '\x3', '\x2', '\x2', 
		'\x2', '\x209', '\x1FB', '\x3', '\x2', '\x2', '\x2', '\x20A', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\x20B', '\x20C', '\a', '-', '\x2', '\x2', 
		'\x20C', '\x20D', '\a', ':', '\x2', '\x2', '\x20D', 'G', '\x3', '\x2', 
		'\x2', '\x2', '\x20E', '\x20F', '\x5', '\x44', '#', '\x2', '\x20F', '\x210', 
		'\a', '\v', '\x2', '\x2', '\x210', '\x211', '\x5', '\x4', '\x3', '\x2', 
		'\x211', 'I', '\x3', '\x2', '\x2', '\x2', '\x212', '\x213', '\a', '.', 
		'\x2', '\x2', '\x213', '\x218', '\x5', 'L', '\'', '\x2', '\x214', '\x215', 
		'\a', '\t', '\x2', '\x2', '\x215', '\x217', '\x5', 'L', '\'', '\x2', '\x216', 
		'\x214', '\x3', '\x2', '\x2', '\x2', '\x217', '\x21A', '\x3', '\x2', '\x2', 
		'\x2', '\x218', '\x216', '\x3', '\x2', '\x2', '\x2', '\x218', '\x219', 
		'\x3', '\x2', '\x2', '\x2', '\x219', 'K', '\x3', '\x2', '\x2', '\x2', 
		'\x21A', '\x218', '\x3', '\x2', '\x2', '\x2', '\x21B', '\x21C', '\a', 
		':', '\x2', '\x2', '\x21C', '\x21D', '\a', '\v', '\x2', '\x2', '\x21D', 
		'\x21E', '\x5', '>', ' ', '\x2', '\x21E', 'M', '\x3', '\x2', '\x2', '\x2', 
		'\x39', 'O', 'R', 'U', '\x63', 'm', 'x', '\x80', '\x91', '\xA1', '\xA3', 
		'\xA8', '\xC7', '\xC9', '\xD1', '\xDF', '\xE5', '\xF0', '\xF6', '\xFA', 
		'\xFE', '\x104', '\x109', '\x113', '\x118', '\x128', '\x12D', '\x135', 
		'\x13A', '\x142', '\x147', '\x14F', '\x152', '\x15B', '\x15F', '\x176', 
		'\x17D', '\x199', '\x19B', '\x1A2', '\x1A6', '\x1AE', '\x1B3', '\x1B9', 
		'\x1C0', '\x1C4', '\x1C9', '\x1D1', '\x1E1', '\x1E3', '\x1EE', '\x1F8', 
		'\x1FE', '\x205', '\x209', '\x218',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
