//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/work/Vee\Vee.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class VeeLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LBracket=1, RBracket=2, LBrace=3, RBrace=4, LParen=5, RParen=6, Comma=7, 
		Colon=8, Range=9, Arrow=10, Lambda=11, Pow=12, Multiply=13, Divide=14, 
		Modulo=15, Plus=16, Minus=17, Eq=18, Neq=19, Lt=20, Gt=21, Lte=22, Gte=23, 
		Pipe=24, RPipe=25, Dot=26, Concat=27, ComposeRight=28, ComposeLeft=29, 
		ComposeAnd=30, ComposeOr=31, Inverse=32, AndAlso=33, OrElse=34, Not=35, 
		TypeOf=36, Let=37, In=38, If=39, Is=40, When=41, Then=42, Else=43, True=44, 
		False=45, New=46, As=47, Type=48, StringType=49, NumberType=50, BooleanType=51, 
		EnumType=52, TupleType=53, RecordType=54, ListType=55, MapType=56, TaskType=57, 
		OptionType=58, UnitType=59, SomeCase=60, NoneCase=61, ResultCase=62, ErrorCase=63, 
		Number=64, Name=65, Wildcard=66, String=67, WS=68;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LBracket", "RBracket", "LBrace", "RBrace", "LParen", "RParen", "Comma", 
		"Colon", "Range", "Arrow", "Lambda", "Pow", "Multiply", "Divide", "Modulo", 
		"Plus", "Minus", "Eq", "Neq", "Lt", "Gt", "Lte", "Gte", "Pipe", "RPipe", 
		"Dot", "Concat", "ComposeRight", "ComposeLeft", "ComposeAnd", "ComposeOr", 
		"Inverse", "AndAlso", "OrElse", "Not", "TypeOf", "Let", "In", "If", "Is", 
		"When", "Then", "Else", "True", "False", "New", "As", "Type", "StringType", 
		"NumberType", "BooleanType", "EnumType", "TupleType", "RecordType", "ListType", 
		"MapType", "TaskType", "OptionType", "UnitType", "SomeCase", "NoneCase", 
		"ResultCase", "ErrorCase", "Number", "Name", "Wildcard", "String", "WS", 
		"Quiz", "NaN", "Infinity", "NormalNumber", "Digit", "Quote", "Esc", "Unicode", 
		"Hex", "Interpolation", "Identifier"
	};


	public VeeLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'['", "']'", "'{'", "'}'", "'('", "')'", "','", "':'", "'..'", 
		"'->'", "'\\'", "'^'", "'*'", "'/'", "'%'", "'+'", "'-'", "'='", "'!='", 
		"'<'", "'>'", "'<='", "'>='", "'|'", "'|>'", "'.'", "'::'", "'>>'", "'<<'", 
		"'&&'", "'||'", "'!'", "'and'", "'or'", "'not'", "'typeof'", "'let'", 
		"'in'", "'if'", "'is'", "'when'", "'then'", "'else'", "'true'", "'false'", 
		"'new'", "'as'", "'type'", "'string'", "'number'", "'boolean'", "'enum'", 
		"'tuple'", "'record'", "'list'", "'map'", "'task'", "'option'", "'unit'", 
		"'some'", "'none'", "'result'", "'error'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LBracket", "RBracket", "LBrace", "RBrace", "LParen", "RParen", 
		"Comma", "Colon", "Range", "Arrow", "Lambda", "Pow", "Multiply", "Divide", 
		"Modulo", "Plus", "Minus", "Eq", "Neq", "Lt", "Gt", "Lte", "Gte", "Pipe", 
		"RPipe", "Dot", "Concat", "ComposeRight", "ComposeLeft", "ComposeAnd", 
		"ComposeOr", "Inverse", "AndAlso", "OrElse", "Not", "TypeOf", "Let", "In", 
		"If", "Is", "When", "Then", "Else", "True", "False", "New", "As", "Type", 
		"StringType", "NumberType", "BooleanType", "EnumType", "TupleType", "RecordType", 
		"ListType", "MapType", "TaskType", "OptionType", "UnitType", "SomeCase", 
		"NoneCase", "ResultCase", "ErrorCase", "Number", "Name", "Wildcard", "String", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Vee.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static VeeLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\x46");
		sb.Append("\x1EB\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6");
		sb.Append("\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f");
		sb.Append("\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4");
		sb.Append("\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16");
		sb.Append("\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B");
		sb.Append("\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4");
		sb.Append(" \t \x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4");
		sb.Append("(\t(\x4)\t)\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30");
		sb.Append("\t\x30\x4\x31\t\x31\x4\x32\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4");
		sb.Append("\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37\x4\x38\t\x38\x4\x39\t\x39");
		sb.Append("\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4@\t@\x4\x41\t\x41");
		sb.Append("\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45\x4\x46");
		sb.Append("\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N");
		sb.Append("\tN\x4O\tO\x4P\tP\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5");
		sb.Append("\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3");
		sb.Append("\n\x3\v\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF");
		sb.Append("\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3");
		sb.Append("\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17");
		sb.Append("\x3\x17\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3");
		sb.Append("\x1A\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D");
		sb.Append("\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3!\x3");
		sb.Append("!\x3\"\x3\"\x3\"\x3\"\x3#\x3#\x3#\x3$\x3$\x3$\x3$\x3%\x3%\x3");
		sb.Append("%\x3%\x3%\x3%\x3%\x3&\x3&\x3&\x3&\x3\'\x3\'\x3\'\x3(\x3(\x3");
		sb.Append("(\x3)\x3)\x3)\x3*\x3*\x3*\x3*\x3*\x3+\x3+\x3+\x3+\x3+\x3,\x3");
		sb.Append(",\x3,\x3,\x3,\x3-\x3-\x3-\x3-\x3-\x3.\x3.\x3.\x3.\x3.\x3.\x3");
		sb.Append("/\x3/\x3/\x3/\x3\x30\x3\x30\x3\x30\x3\x31\x3\x31\x3\x31\x3\x31");
		sb.Append("\x3\x31\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3");
		sb.Append("\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x34\x3\x34");
		sb.Append("\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x35\x3\x35\x3");
		sb.Append("\x35\x3\x35\x3\x35\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36");
		sb.Append("\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x38\x3");
		sb.Append("\x38\x3\x38\x3\x38\x3\x38\x3\x39\x3\x39\x3\x39\x3\x39\x3:\x3");
		sb.Append(":\x3:\x3:\x3:\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x3<\x3<\x3<\x3<\x3");
		sb.Append("<\x3=\x3=\x3=\x3=\x3=\x3>\x3>\x3>\x3>\x3>\x3?\x3?\x3?\x3?\x3");
		sb.Append("?\x3?\x3?\x3@\x3@\x3@\x3@\x3@\x3@\x3\x41\x3\x41\x3\x41\x5\x41");
		sb.Append("\x18E\n\x41\x3\x41\x3\x41\x5\x41\x192\n\x41\x3\x42\x3\x42\x3");
		sb.Append("\x43\x3\x43\a\x43\x198\n\x43\f\x43\xE\x43\x19B\v\x43\x3\x44");
		sb.Append("\x3\x44\x3\x44\a\x44\x1A0\n\x44\f\x44\xE\x44\x1A3\v\x44\x3\x44");
		sb.Append("\x3\x44\x3\x45\x3\x45\x3\x45\x3\x45\x3\x46\x3\x46\x3G\x3G\x3");
		sb.Append("G\x3G\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3I\x6I\x1BB\nI\r");
		sb.Append("I\xEI\x1BC\x3I\x3I\x6I\x1C1\nI\rI\xEI\x1C2\x5I\x1C5\nI\x3J\x3");
		sb.Append("J\x3K\x3K\x3L\x3L\x3L\x3L\x5L\x1CF\nL\x3M\x3M\x3M\x3M\x3M\x3");
		sb.Append("M\x3N\x3N\x3O\x3O\x3O\x3O\x3O\aO\x1DE\nO\fO\xEO\x1E1\vO\x3O");
		sb.Append("\x3O\x3P\x3P\aP\x1E7\nP\fP\xEP\x1EA\vP\x2\x2Q\x3\x3\x5\x4\a");
		sb.Append("\x5\t\x6\v\a\r\b\xF\t\x11\n\x13\v\x15\f\x17\r\x19\xE\x1B\xF");
		sb.Append("\x1D\x10\x1F\x11!\x12#\x13%\x14\'\x15)\x16+\x17-\x18/\x19\x31");
		sb.Append("\x1A\x33\x1B\x35\x1C\x37\x1D\x39\x1E;\x1F= ?!\x41\"\x43#\x45");
		sb.Append("$G%I&K\'M(O)Q*S+U,W-Y.[/]\x30_\x31\x61\x32\x63\x33\x65\x34g");
		sb.Append("\x35i\x36k\x37m\x38o\x39q:s;u<w=y>{?}@\x7F\x41\x81\x42\x83\x43");
		sb.Append("\x85\x44\x87\x45\x89\x46\x8B\x2\x8D\x2\x8F\x2\x91\x2\x93\x2");
		sb.Append("\x95\x2\x97\x2\x99\x2\x9B\x2\x9D\x2\x9F\x2\x3\x2\b\x4\x2))^");
		sb.Append("^\x5\x2\v\f\xF\xF\"\"\x3\x2\x32;\x5\x2\x32;\x43H\x63h\x6\x2");
		sb.Append("&&\x43\\\x61\x61\x63|\a\x2&&\x32;\x43\\\x61\x61\x63|\x1ED\x2");
		sb.Append("\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2");
		sb.Append("\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2");
		sb.Append("\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17");
		sb.Append("\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3");
		sb.Append("\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2");
		sb.Append("\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2");
		sb.Append("\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2");
		sb.Append("\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39");
		sb.Append("\x3\x2\x2\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2");
		sb.Append("\x2\x41\x3\x2\x2\x2\x2\x43\x3\x2\x2\x2\x2\x45\x3\x2\x2\x2\x2");
		sb.Append("G\x3\x2\x2\x2\x2I\x3\x2\x2\x2\x2K\x3\x2\x2\x2\x2M\x3\x2\x2\x2");
		sb.Append("\x2O\x3\x2\x2\x2\x2Q\x3\x2\x2\x2\x2S\x3\x2\x2\x2\x2U\x3\x2\x2");
		sb.Append("\x2\x2W\x3\x2\x2\x2\x2Y\x3\x2\x2\x2\x2[\x3\x2\x2\x2\x2]\x3\x2");
		sb.Append("\x2\x2\x2_\x3\x2\x2\x2\x2\x61\x3\x2\x2\x2\x2\x63\x3\x2\x2\x2");
		sb.Append("\x2\x65\x3\x2\x2\x2\x2g\x3\x2\x2\x2\x2i\x3\x2\x2\x2\x2k\x3\x2");
		sb.Append("\x2\x2\x2m\x3\x2\x2\x2\x2o\x3\x2\x2\x2\x2q\x3\x2\x2\x2\x2s\x3");
		sb.Append("\x2\x2\x2\x2u\x3\x2\x2\x2\x2w\x3\x2\x2\x2\x2y\x3\x2\x2\x2\x2");
		sb.Append("{\x3\x2\x2\x2\x2}\x3\x2\x2\x2\x2\x7F\x3\x2\x2\x2\x2\x81\x3\x2");
		sb.Append("\x2\x2\x2\x83\x3\x2\x2\x2\x2\x85\x3\x2\x2\x2\x2\x87\x3\x2\x2");
		sb.Append("\x2\x2\x89\x3\x2\x2\x2\x3\xA1\x3\x2\x2\x2\x5\xA3\x3\x2\x2\x2");
		sb.Append("\a\xA5\x3\x2\x2\x2\t\xA7\x3\x2\x2\x2\v\xA9\x3\x2\x2\x2\r\xAB");
		sb.Append("\x3\x2\x2\x2\xF\xAD\x3\x2\x2\x2\x11\xAF\x3\x2\x2\x2\x13\xB1");
		sb.Append("\x3\x2\x2\x2\x15\xB4\x3\x2\x2\x2\x17\xB7\x3\x2\x2\x2\x19\xB9");
		sb.Append("\x3\x2\x2\x2\x1B\xBB\x3\x2\x2\x2\x1D\xBD\x3\x2\x2\x2\x1F\xBF");
		sb.Append("\x3\x2\x2\x2!\xC1\x3\x2\x2\x2#\xC3\x3\x2\x2\x2%\xC5\x3\x2\x2");
		sb.Append("\x2\'\xC7\x3\x2\x2\x2)\xCA\x3\x2\x2\x2+\xCC\x3\x2\x2\x2-\xCE");
		sb.Append("\x3\x2\x2\x2/\xD1\x3\x2\x2\x2\x31\xD4\x3\x2\x2\x2\x33\xD6\x3");
		sb.Append("\x2\x2\x2\x35\xD9\x3\x2\x2\x2\x37\xDB\x3\x2\x2\x2\x39\xDE\x3");
		sb.Append("\x2\x2\x2;\xE1\x3\x2\x2\x2=\xE4\x3\x2\x2\x2?\xE7\x3\x2\x2\x2");
		sb.Append("\x41\xEA\x3\x2\x2\x2\x43\xEC\x3\x2\x2\x2\x45\xF0\x3\x2\x2\x2");
		sb.Append("G\xF3\x3\x2\x2\x2I\xF7\x3\x2\x2\x2K\xFE\x3\x2\x2\x2M\x102\x3");
		sb.Append("\x2\x2\x2O\x105\x3\x2\x2\x2Q\x108\x3\x2\x2\x2S\x10B\x3\x2\x2");
		sb.Append("\x2U\x110\x3\x2\x2\x2W\x115\x3\x2\x2\x2Y\x11A\x3\x2\x2\x2[\x11F");
		sb.Append("\x3\x2\x2\x2]\x125\x3\x2\x2\x2_\x129\x3\x2\x2\x2\x61\x12C\x3");
		sb.Append("\x2\x2\x2\x63\x131\x3\x2\x2\x2\x65\x138\x3\x2\x2\x2g\x13F\x3");
		sb.Append("\x2\x2\x2i\x147\x3\x2\x2\x2k\x14C\x3\x2\x2\x2m\x152\x3\x2\x2");
		sb.Append("\x2o\x159\x3\x2\x2\x2q\x15E\x3\x2\x2\x2s\x162\x3\x2\x2\x2u\x167");
		sb.Append("\x3\x2\x2\x2w\x16E\x3\x2\x2\x2y\x173\x3\x2\x2\x2{\x178\x3\x2");
		sb.Append("\x2\x2}\x17D\x3\x2\x2\x2\x7F\x184\x3\x2\x2\x2\x81\x191\x3\x2");
		sb.Append("\x2\x2\x83\x193\x3\x2\x2\x2\x85\x195\x3\x2\x2\x2\x87\x19C\x3");
		sb.Append("\x2\x2\x2\x89\x1A6\x3\x2\x2\x2\x8B\x1AA\x3\x2\x2\x2\x8D\x1AC");
		sb.Append("\x3\x2\x2\x2\x8F\x1B0\x3\x2\x2\x2\x91\x1BA\x3\x2\x2\x2\x93\x1C6");
		sb.Append("\x3\x2\x2\x2\x95\x1C8\x3\x2\x2\x2\x97\x1CA\x3\x2\x2\x2\x99\x1D0");
		sb.Append("\x3\x2\x2\x2\x9B\x1D6\x3\x2\x2\x2\x9D\x1D8\x3\x2\x2\x2\x9F\x1E4");
		sb.Append("\x3\x2\x2\x2\xA1\xA2\a]\x2\x2\xA2\x4\x3\x2\x2\x2\xA3\xA4\a_");
		sb.Append("\x2\x2\xA4\x6\x3\x2\x2\x2\xA5\xA6\a}\x2\x2\xA6\b\x3\x2\x2\x2");
		sb.Append("\xA7\xA8\a\x7F\x2\x2\xA8\n\x3\x2\x2\x2\xA9\xAA\a*\x2\x2\xAA");
		sb.Append("\f\x3\x2\x2\x2\xAB\xAC\a+\x2\x2\xAC\xE\x3\x2\x2\x2\xAD\xAE\a");
		sb.Append(".\x2\x2\xAE\x10\x3\x2\x2\x2\xAF\xB0\a<\x2\x2\xB0\x12\x3\x2\x2");
		sb.Append("\x2\xB1\xB2\a\x30\x2\x2\xB2\xB3\a\x30\x2\x2\xB3\x14\x3\x2\x2");
		sb.Append("\x2\xB4\xB5\a/\x2\x2\xB5\xB6\a@\x2\x2\xB6\x16\x3\x2\x2\x2\xB7");
		sb.Append("\xB8\a^\x2\x2\xB8\x18\x3\x2\x2\x2\xB9\xBA\a`\x2\x2\xBA\x1A\x3");
		sb.Append("\x2\x2\x2\xBB\xBC\a,\x2\x2\xBC\x1C\x3\x2\x2\x2\xBD\xBE\a\x31");
		sb.Append("\x2\x2\xBE\x1E\x3\x2\x2\x2\xBF\xC0\a\'\x2\x2\xC0 \x3\x2\x2\x2");
		sb.Append("\xC1\xC2\a-\x2\x2\xC2\"\x3\x2\x2\x2\xC3\xC4\a/\x2\x2\xC4$\x3");
		sb.Append("\x2\x2\x2\xC5\xC6\a?\x2\x2\xC6&\x3\x2\x2\x2\xC7\xC8\a#\x2\x2");
		sb.Append("\xC8\xC9\a?\x2\x2\xC9(\x3\x2\x2\x2\xCA\xCB\a>\x2\x2\xCB*\x3");
		sb.Append("\x2\x2\x2\xCC\xCD\a@\x2\x2\xCD,\x3\x2\x2\x2\xCE\xCF\a>\x2\x2");
		sb.Append("\xCF\xD0\a?\x2\x2\xD0.\x3\x2\x2\x2\xD1\xD2\a@\x2\x2\xD2\xD3");
		sb.Append("\a?\x2\x2\xD3\x30\x3\x2\x2\x2\xD4\xD5\a~\x2\x2\xD5\x32\x3\x2");
		sb.Append("\x2\x2\xD6\xD7\a~\x2\x2\xD7\xD8\a@\x2\x2\xD8\x34\x3\x2\x2\x2");
		sb.Append("\xD9\xDA\a\x30\x2\x2\xDA\x36\x3\x2\x2\x2\xDB\xDC\a<\x2\x2\xDC");
		sb.Append("\xDD\a<\x2\x2\xDD\x38\x3\x2\x2\x2\xDE\xDF\a@\x2\x2\xDF\xE0\a");
		sb.Append("@\x2\x2\xE0:\x3\x2\x2\x2\xE1\xE2\a>\x2\x2\xE2\xE3\a>\x2\x2\xE3");
		sb.Append("<\x3\x2\x2\x2\xE4\xE5\a(\x2\x2\xE5\xE6\a(\x2\x2\xE6>\x3\x2\x2");
		sb.Append("\x2\xE7\xE8\a~\x2\x2\xE8\xE9\a~\x2\x2\xE9@\x3\x2\x2\x2\xEA\xEB");
		sb.Append("\a#\x2\x2\xEB\x42\x3\x2\x2\x2\xEC\xED\a\x63\x2\x2\xED\xEE\a");
		sb.Append("p\x2\x2\xEE\xEF\a\x66\x2\x2\xEF\x44\x3\x2\x2\x2\xF0\xF1\aq\x2");
		sb.Append("\x2\xF1\xF2\at\x2\x2\xF2\x46\x3\x2\x2\x2\xF3\xF4\ap\x2\x2\xF4");
		sb.Append("\xF5\aq\x2\x2\xF5\xF6\av\x2\x2\xF6H\x3\x2\x2\x2\xF7\xF8\av\x2");
		sb.Append("\x2\xF8\xF9\a{\x2\x2\xF9\xFA\ar\x2\x2\xFA\xFB\ag\x2\x2\xFB\xFC");
		sb.Append("\aq\x2\x2\xFC\xFD\ah\x2\x2\xFDJ\x3\x2\x2\x2\xFE\xFF\an\x2\x2");
		sb.Append("\xFF\x100\ag\x2\x2\x100\x101\av\x2\x2\x101L\x3\x2\x2\x2\x102");
		sb.Append("\x103\ak\x2\x2\x103\x104\ap\x2\x2\x104N\x3\x2\x2\x2\x105\x106");
		sb.Append("\ak\x2\x2\x106\x107\ah\x2\x2\x107P\x3\x2\x2\x2\x108\x109\ak");
		sb.Append("\x2\x2\x109\x10A\au\x2\x2\x10AR\x3\x2\x2\x2\x10B\x10C\ay\x2");
		sb.Append("\x2\x10C\x10D\aj\x2\x2\x10D\x10E\ag\x2\x2\x10E\x10F\ap\x2\x2");
		sb.Append("\x10FT\x3\x2\x2\x2\x110\x111\av\x2\x2\x111\x112\aj\x2\x2\x112");
		sb.Append("\x113\ag\x2\x2\x113\x114\ap\x2\x2\x114V\x3\x2\x2\x2\x115\x116");
		sb.Append("\ag\x2\x2\x116\x117\an\x2\x2\x117\x118\au\x2\x2\x118\x119\a");
		sb.Append("g\x2\x2\x119X\x3\x2\x2\x2\x11A\x11B\av\x2\x2\x11B\x11C\at\x2");
		sb.Append("\x2\x11C\x11D\aw\x2\x2\x11D\x11E\ag\x2\x2\x11EZ\x3\x2\x2\x2");
		sb.Append("\x11F\x120\ah\x2\x2\x120\x121\a\x63\x2\x2\x121\x122\an\x2\x2");
		sb.Append("\x122\x123\au\x2\x2\x123\x124\ag\x2\x2\x124\\\x3\x2\x2\x2\x125");
		sb.Append("\x126\ap\x2\x2\x126\x127\ag\x2\x2\x127\x128\ay\x2\x2\x128^\x3");
		sb.Append("\x2\x2\x2\x129\x12A\a\x63\x2\x2\x12A\x12B\au\x2\x2\x12B`\x3");
		sb.Append("\x2\x2\x2\x12C\x12D\av\x2\x2\x12D\x12E\a{\x2\x2\x12E\x12F\a");
		sb.Append("r\x2\x2\x12F\x130\ag\x2\x2\x130\x62\x3\x2\x2\x2\x131\x132\a");
		sb.Append("u\x2\x2\x132\x133\av\x2\x2\x133\x134\at\x2\x2\x134\x135\ak\x2");
		sb.Append("\x2\x135\x136\ap\x2\x2\x136\x137\ai\x2\x2\x137\x64\x3\x2\x2");
		sb.Append("\x2\x138\x139\ap\x2\x2\x139\x13A\aw\x2\x2\x13A\x13B\ao\x2\x2");
		sb.Append("\x13B\x13C\a\x64\x2\x2\x13C\x13D\ag\x2\x2\x13D\x13E\at\x2\x2");
		sb.Append("\x13E\x66\x3\x2\x2\x2\x13F\x140\a\x64\x2\x2\x140\x141\aq\x2");
		sb.Append("\x2\x141\x142\aq\x2\x2\x142\x143\an\x2\x2\x143\x144\ag\x2\x2");
		sb.Append("\x144\x145\a\x63\x2\x2\x145\x146\ap\x2\x2\x146h\x3\x2\x2\x2");
		sb.Append("\x147\x148\ag\x2\x2\x148\x149\ap\x2\x2\x149\x14A\aw\x2\x2\x14A");
		sb.Append("\x14B\ao\x2\x2\x14Bj\x3\x2\x2\x2\x14C\x14D\av\x2\x2\x14D\x14E");
		sb.Append("\aw\x2\x2\x14E\x14F\ar\x2\x2\x14F\x150\an\x2\x2\x150\x151\a");
		sb.Append("g\x2\x2\x151l\x3\x2\x2\x2\x152\x153\at\x2\x2\x153\x154\ag\x2");
		sb.Append("\x2\x154\x155\a\x65\x2\x2\x155\x156\aq\x2\x2\x156\x157\at\x2");
		sb.Append("\x2\x157\x158\a\x66\x2\x2\x158n\x3\x2\x2\x2\x159\x15A\an\x2");
		sb.Append("\x2\x15A\x15B\ak\x2\x2\x15B\x15C\au\x2\x2\x15C\x15D\av\x2\x2");
		sb.Append("\x15Dp\x3\x2\x2\x2\x15E\x15F\ao\x2\x2\x15F\x160\a\x63\x2\x2");
		sb.Append("\x160\x161\ar\x2\x2\x161r\x3\x2\x2\x2\x162\x163\av\x2\x2\x163");
		sb.Append("\x164\a\x63\x2\x2\x164\x165\au\x2\x2\x165\x166\am\x2\x2\x166");
		sb.Append("t\x3\x2\x2\x2\x167\x168\aq\x2\x2\x168\x169\ar\x2\x2\x169\x16A");
		sb.Append("\av\x2\x2\x16A\x16B\ak\x2\x2\x16B\x16C\aq\x2\x2\x16C\x16D\a");
		sb.Append("p\x2\x2\x16Dv\x3\x2\x2\x2\x16E\x16F\aw\x2\x2\x16F\x170\ap\x2");
		sb.Append("\x2\x170\x171\ak\x2\x2\x171\x172\av\x2\x2\x172x\x3\x2\x2\x2");
		sb.Append("\x173\x174\au\x2\x2\x174\x175\aq\x2\x2\x175\x176\ao\x2\x2\x176");
		sb.Append("\x177\ag\x2\x2\x177z\x3\x2\x2\x2\x178\x179\ap\x2\x2\x179\x17A");
		sb.Append("\aq\x2\x2\x17A\x17B\ap\x2\x2\x17B\x17C\ag\x2\x2\x17C|\x3\x2");
		sb.Append("\x2\x2\x17D\x17E\at\x2\x2\x17E\x17F\ag\x2\x2\x17F\x180\au\x2");
		sb.Append("\x2\x180\x181\aw\x2\x2\x181\x182\an\x2\x2\x182\x183\av\x2\x2");
		sb.Append("\x183~\x3\x2\x2\x2\x184\x185\ag\x2\x2\x185\x186\at\x2\x2\x186");
		sb.Append("\x187\at\x2\x2\x187\x188\aq\x2\x2\x188\x189\at\x2\x2\x189\x80");
		sb.Append("\x3\x2\x2\x2\x18A\x192\x5\x8DG\x2\x18B\x18E\x5!\x11\x2\x18C");
		sb.Append("\x18E\x5#\x12\x2\x18D\x18B\x3\x2\x2\x2\x18D\x18C\x3\x2\x2\x2");
		sb.Append("\x18D\x18E\x3\x2\x2\x2\x18E\x18F\x3\x2\x2\x2\x18F\x192\x5\x8F");
		sb.Append("H\x2\x190\x192\x5\x91I\x2\x191\x18A\x3\x2\x2\x2\x191\x18D\x3");
		sb.Append("\x2\x2\x2\x191\x190\x3\x2\x2\x2\x192\x82\x3\x2\x2\x2\x193\x194");
		sb.Append("\x5\x9FP\x2\x194\x84\x3\x2\x2\x2\x195\x199\x5\x8B\x46\x2\x196");
		sb.Append("\x198\x5\x93J\x2\x197\x196\x3\x2\x2\x2\x198\x19B\x3\x2\x2\x2");
		sb.Append("\x199\x197\x3\x2\x2\x2\x199\x19A\x3\x2\x2\x2\x19A\x86\x3\x2");
		sb.Append("\x2\x2\x19B\x199\x3\x2\x2\x2\x19C\x1A1\x5\x95K\x2\x19D\x1A0");
		sb.Append("\x5\x97L\x2\x19E\x1A0\n\x2\x2\x2\x19F\x19D\x3\x2\x2\x2\x19F");
		sb.Append("\x19E\x3\x2\x2\x2\x1A0\x1A3\x3\x2\x2\x2\x1A1\x19F\x3\x2\x2\x2");
		sb.Append("\x1A1\x1A2\x3\x2\x2\x2\x1A2\x1A4\x3\x2\x2\x2\x1A3\x1A1\x3\x2");
		sb.Append("\x2\x2\x1A4\x1A5\x5\x95K\x2\x1A5\x88\x3\x2\x2\x2\x1A6\x1A7\t");
		sb.Append("\x3\x2\x2\x1A7\x1A8\x3\x2\x2\x2\x1A8\x1A9\b\x45\x2\x2\x1A9\x8A");
		sb.Append("\x3\x2\x2\x2\x1AA\x1AB\a\x41\x2\x2\x1AB\x8C\x3\x2\x2\x2\x1AC");
		sb.Append("\x1AD\aP\x2\x2\x1AD\x1AE\a\x63\x2\x2\x1AE\x1AF\aP\x2\x2\x1AF");
		sb.Append("\x8E\x3\x2\x2\x2\x1B0\x1B1\aK\x2\x2\x1B1\x1B2\ap\x2\x2\x1B2");
		sb.Append("\x1B3\ah\x2\x2\x1B3\x1B4\ak\x2\x2\x1B4\x1B5\ap\x2\x2\x1B5\x1B6");
		sb.Append("\ak\x2\x2\x1B6\x1B7\av\x2\x2\x1B7\x1B8\a{\x2\x2\x1B8\x90\x3");
		sb.Append("\x2\x2\x2\x1B9\x1BB\x5\x93J\x2\x1BA\x1B9\x3\x2\x2\x2\x1BB\x1BC");
		sb.Append("\x3\x2\x2\x2\x1BC\x1BA\x3\x2\x2\x2\x1BC\x1BD\x3\x2\x2\x2\x1BD");
		sb.Append("\x1C4\x3\x2\x2\x2\x1BE\x1C0\x5\x35\x1B\x2\x1BF\x1C1\x5\x93J");
		sb.Append("\x2\x1C0\x1BF\x3\x2\x2\x2\x1C1\x1C2\x3\x2\x2\x2\x1C2\x1C0\x3");
		sb.Append("\x2\x2\x2\x1C2\x1C3\x3\x2\x2\x2\x1C3\x1C5\x3\x2\x2\x2\x1C4\x1BE");
		sb.Append("\x3\x2\x2\x2\x1C4\x1C5\x3\x2\x2\x2\x1C5\x92\x3\x2\x2\x2\x1C6");
		sb.Append("\x1C7\t\x4\x2\x2\x1C7\x94\x3\x2\x2\x2\x1C8\x1C9\a)\x2\x2\x1C9");
		sb.Append("\x96\x3\x2\x2\x2\x1CA\x1CE\a^\x2\x2\x1CB\x1CF\t\x2\x2\x2\x1CC");
		sb.Append("\x1CF\x5\x99M\x2\x1CD\x1CF\x5\x9DO\x2\x1CE\x1CB\x3\x2\x2\x2");
		sb.Append("\x1CE\x1CC\x3\x2\x2\x2\x1CE\x1CD\x3\x2\x2\x2\x1CF\x98\x3\x2");
		sb.Append("\x2\x2\x1D0\x1D1\aw\x2\x2\x1D1\x1D2\x5\x9BN\x2\x1D2\x1D3\x5");
		sb.Append("\x9BN\x2\x1D3\x1D4\x5\x9BN\x2\x1D4\x1D5\x5\x9BN\x2\x1D5\x9A");
		sb.Append("\x3\x2\x2\x2\x1D6\x1D7\t\x5\x2\x2\x1D7\x9C\x3\x2\x2\x2\x1D8");
		sb.Append("\x1D9\x5\a\x4\x2\x1D9\x1DF\x5\x83\x42\x2\x1DA\x1DB\x5\x35\x1B");
		sb.Append("\x2\x1DB\x1DC\x5\x83\x42\x2\x1DC\x1DE\x3\x2\x2\x2\x1DD\x1DA");
		sb.Append("\x3\x2\x2\x2\x1DE\x1E1\x3\x2\x2\x2\x1DF\x1DD\x3\x2\x2\x2\x1DF");
		sb.Append("\x1E0\x3\x2\x2\x2\x1E0\x1E2\x3\x2\x2\x2\x1E1\x1DF\x3\x2\x2\x2");
		sb.Append("\x1E2\x1E3\x5\t\x5\x2\x1E3\x9E\x3\x2\x2\x2\x1E4\x1E8\t\x6\x2");
		sb.Append("\x2\x1E5\x1E7\t\a\x2\x2\x1E6\x1E5\x3\x2\x2\x2\x1E7\x1EA\x3\x2");
		sb.Append("\x2\x2\x1E8\x1E6\x3\x2\x2\x2\x1E8\x1E9\x3\x2\x2\x2\x1E9\xA0");
		sb.Append("\x3\x2\x2\x2\x1EA\x1E8\x3\x2\x2\x2\xE\x2\x18D\x191\x199\x19F");
		sb.Append("\x1A1\x1BC\x1C2\x1C4\x1CE\x1DF\x1E8\x3\b\x2\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
